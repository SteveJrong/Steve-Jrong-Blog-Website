/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.7.16-0ubuntu0.16.04.1 : Database - sjblogdb
*********************************************************************
*/


/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`sjblogdb` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `sjblogdb`;

/*Data for the table `sj_articles` */

insert  into `sj_articles`(`A_ID`,`A_NAME`,`A_T_ID`,`A_U_ID`,`A_CREATEDATE`,`A_IPADDRESS`,`A_MODIFYDATE`,`A_READCOUNT`,`A_HOLDTOP`,`A_STATE`,`A_TAGKEYWORD`,`A_BODYCONTENTS`,`A_ATTACHFILESPATH`,`A_BRIEFCONTENTS`,`A_BROWSERINFO`,`A_SYSTEMINFO`) values (1,'搭建局域网Maven私服并应用于项目中',1,1,'2016-09-17 14:36:32','120.76.131.230',NULL,21,0,'正常','Sonatype','<h2><strong>安装Maven管理软件Nexus</strong></h2>\r\n\r\n<ol>\r\n	<li>下载nexus-2.4.0-09-bundle.zip，解压后如下：</li>\r\n</ol>\r\n\r\n<p style=\"margin-left:18.0pt\"><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/16fff592-d09a-4c98-8a92-4b75763c0b965.png\" style=\"height:69px; width:342px\" /></p>\r\n\r\n<ul>\r\n	<li>nexus-2.4.0-09目录，这里就是Maven管理器的主要文件。</li>\r\n</ul>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/019d1fee-2860-4538-882b-b7a533f228c64.png\" style=\"height:157px; width:500px\" /></p>\r\n\r\n<p>然后转到bin/jsw/windows-x86-64文件夹下（windows-x86-64是因为我的电脑是64位的Windows操作系统，这个要视实际情况而定），点击&ldquo;console-nexus.bat&rdquo;批处理开启服务。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>这里要注意：</p>\r\n\r\n<p>Console-nexus.bat只是在开启cmd命令窗口时有效，当关闭窗口后服务也随之关闭；</p>\r\n\r\n<p>Install-nexus.bat 是安装Nexus服务到当前操作系统中，即可以与系统一起启动，不必要每次都双击bat来启动了。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>成功启动后如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/93078121-db2f-4b61-ab5d-923181856f019.png\" style=\"height:352px; width:600px\" /></p>\r\n\r\n<p>然后打开浏览器并在地址栏中输入地址：</p>\r\n\r\n<p><a href=\"http://localhost:8081/nexus\">http://localhost:8081/nexus</a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>之后会自动重定向到 <a href=\"http://localhost:8081/nexus/index.html#welcome\">http://localhost:8081/nexus/index.html#welcome</a> ，显示出如下页面则表示Nexus已在正常运行：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/b509cf38-89d0-46a3-9ccc-d72c6c8b1a1a5.png\" style=\"height:361px; width:600px\" /></p>\r\n\r\n<h2><strong>上传自己的Jar包</strong></h2>\r\n\r\n<p>点击页面右上角的链接进行登录，初始用户名是admin，初始密码是admin123。登陆成功之后左侧的列表会显示如下几项：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/003e4469-8d40-4abe-8a83-f95737a4798e6.png\" style=\"height:579px; width:303px\" /></p>\r\n\r\n<p>此时点击&ldquo;Repositories&rdquo;进入到jar包管理界面，如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/59304883-70c3-45fd-9ae8-3c304747b17d0.png\" style=\"height:274px; width:600px\" /></p>\r\n\r\n<p>这里如果是自己搭建私服的话一般采用3rd party，用于管理第三方Maven仓库里没有的Jar包。当然，用做自己的私服可以把常用的任意Jar包都放上去。</p>\r\n\r\n<p>点击 3<sup>rd</sup> party &ndash; Artifact Upload选项卡：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/81cde072-7d67-4e23-968c-af15d2da9a872.png\" style=\"height:277px; width:600px\" /></p>\r\n\r\n<p>参数含义阐释：</p>\r\n\r\n<p>GAV Definition 设置为 GAV Parameters；</p>\r\n\r\n<p>Auto Guess勾选；</p>\r\n\r\n<p>Group 可以随便填写，或是你的个性化包名前缀，或是Jar包官方的包名都可以，只是作为一个标识，并无其他用途；</p>\r\n\r\n<p>Artifact 定义一个项目要产生的文件，此处可以写这个jar包的一个名字，也是作为一个标志进行区分；</p>\r\n\r\n<p>Version 设置此Jar包的版本，这个版本实际可以随便填写，但是最好不要这样做，否则后期很难维护；</p>\r\n\r\n<p>Packaging 设置包类型，此处就设置为 Jar。</p>\r\n\r\n<p>都填写好之后点击&ldquo;Select Artifact(s) to Upload&rdquo;按钮选中Jar包进行上传。</p>\r\n\r\n<p>选好文件之后点击&ldquo;Add Artifact&rdquo;按钮添加，最后点击页面最下部的&ldquo;Upload Artifact(s)&rdquo;按钮将Jar包上传即可。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/cfda023e-e9e4-4f2b-82ad-efc374cd57b11.png\" style=\"height:234px; width:600px\" /></p>\r\n\r\n<p>提示操作成功。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/fe1f5abd-2cfb-461c-97df-f36d453263a44.png\" style=\"height:172px; width:434px\" /></p>\r\n\r\n<p>成功之后返回&ldquo;Browse Index&rdquo;选项卡即可查看刚才上传好的Jar包了。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/edec8d8c-6d7a-4d2a-9f7c-af94a746c8db9.png\" style=\"height:279px; width:600px\" /></p>\r\n\r\n<p>至此，Maven私服就已经完全可以正常使用了。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>将Maven私服应用于实际项目中</strong></h2>\r\n\r\n<p>新建一个普通的Web Project，之后在项目上右键单击&ldquo;Configure&rdquo; - &ldquo;Convert to Maven Project&rdquo;，在弹出的窗口中直接点击&ldquo;Finish&rdquo;即可。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/b5084aff-4369-4539-9bc0-3985a1e093f45.png\" style=\"height:580px; width:600px\" /></p>\r\n\r\n<p>转换成功之后，项目结构如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/c906bf7b-6df6-4442-bd1d-d672f28ed3600.png\" style=\"height:350px; width:395px\" /></p>\r\n\r\n<p>打开pom.xml，原有的文件内容如下：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</p>\r\n\r\n<p>&nbsp; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</p>\r\n\r\n<p>&nbsp; &lt;groupId&gt;MvnDemo&lt;/groupId&gt;</p>\r\n\r\n<p>&nbsp; &lt;artifactId&gt;MvnDemo&lt;/artifactId&gt;</p>\r\n\r\n<p>&nbsp; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</p>\r\n\r\n<p>&nbsp; &lt;packaging&gt;war&lt;/packaging&gt;</p>\r\n\r\n<p>&nbsp; &lt;build&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;plugins&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;3.1&lt;/version&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;source&gt;1.6&lt;/source&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;target&gt;1.6&lt;/target&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;2.3&lt;/version&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;warSourceDirectory&gt;WebRoot&lt;/warSourceDirectory&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/plugins&gt;</p>\r\n\r\n<p>&nbsp; &lt;/build&gt;</p>\r\n\r\n<p>&lt;/project&gt;</p>\r\n</div>\r\n\r\n<p>然后需要对其进行配置：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</p>\r\n\r\n<p>&nbsp; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</p>\r\n\r\n<p>&nbsp; &lt;groupId&gt;MvnDemo&lt;/groupId&gt;</p>\r\n\r\n<p>&nbsp; &lt;artifactId&gt;MvnDemo&lt;/artifactId&gt;</p>\r\n\r\n<p>&nbsp; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</p>\r\n\r\n<p>&nbsp; &lt;packaging&gt;war&lt;/packaging&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;!-- 远程仓库配置 --&gt;</p>\r\n\r\n<p>&nbsp; <span style=\"color:#FF0000\">&lt;repositories&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;repository&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;nexus&lt;/id&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Team Nexus Repository&lt;/name&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 此地址即Maven私服名为Public Repositories仓库的仓库地址 --&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/repository&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &lt;/repositories&gt;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;!-- 远程仓库插件配置 --&gt;</p>\r\n\r\n<p>&nbsp;<span style=\"color:#FF0000\"> &lt;pluginRepositories&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;pluginRepository&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;nexus&lt;/id&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Team Nexus Repository&lt;/name&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 此地址即Maven私服名为Public Repositories仓库的仓库地址 --&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/pluginRepository&gt;</span></p>\r\n\r\n<p><span style=\"color:#FF0000\">&nbsp; &lt;/pluginRepositories&gt;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&lt;!-- 配置仓库里Jar包的配置文件 --&gt;</p>\r\n\r\n<p>&nbsp; <span style=\"color:#0000FF\">&lt;dependencies&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dependency&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;groupId&gt;com.oracle&lt;/groupId&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;artifactId&gt;mysqljdbc&lt;/artifactId&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;version&gt;5.1.26&lt;/version&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dependency&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dependency&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;groupId&gt;top.sj.urlrewriter&lt;/groupId&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;artifactId&gt;urlwriter&lt;/artifactId&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;version&gt;4.0.3&lt;/version&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dependency&gt;</span></p>\r\n\r\n<p><span style=\"color:#0000FF\">&nbsp; &lt;/dependencies&gt;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;build&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;plugins&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;3.1&lt;/version&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;source&gt;1.6&lt;/source&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;target&gt;1.6&lt;/target&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;/configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;2.3&lt;/version&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;warSourceDirectory&gt;WebRoot&lt;/warSourceDirectory&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/plugin&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/plugins&gt;</p>\r\n\r\n<p>&nbsp; &lt;/build&gt;</p>\r\n\r\n<p>&lt;/project&gt;</p>\r\n</div>\r\n\r\n<p>其中，红色部分是必须要配置的，这是指向Maven私服的网络路径，今后所有的Jar包都要通过这个路径获取和更新；</p>\r\n\r\n<p>蓝色部分是配置Jar包的区域，用哪些Jar包就配置写哪些Jar包的配置。那么这里的配置要从这里看：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/394e41a5-806e-49d6-9422-2fc2abd43e855.png\" style=\"height:264px; width:600px\" /></p>\r\n\r\n<p>点击某个已上传好的Jar包，右侧的&ldquo;Maven&rdquo;选项卡中的&ldquo;XML&rdquo;即这个Jar包的配置文件。如果需要将这个Jar包应用到项目中那么就将这一小段XML代码粘贴到蓝色部分的dependencies标签里即可自动下载。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/49838ad7-812e-40d2-8667-bed21bc72d9a7.png\" style=\"height:128px; width:600px\" /></p>\r\n',NULL,'今天有时间研究了一下本地搭建Maven私人服务器并结合实际项目使用的一个小例子。','Chrome 50','Mac'),(2,'调用优酷接口进行视频上传并应用于第三方网站',2,1,'2016-09-17 14:48:00','120.76.131.230',NULL,6,0,'正常','优酷视频接口','<h2><strong>使用优酷官方提供的Java SDK进行上传</strong></h2>\r\n\r\n<p>首先去<a href=\"http://cloud.youku.com/down\">http://cloud.youku.com/down</a>下载面向Java的SDK包:</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/1c694a62-54fb-4781-ae17-f4767568f0fc0.png\" style=\"height:253px; width:600px\" /><br />\r\n下载完成之后解压得到如下文件：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/7e175614-d11e-4bc9-b598-80783ed5b92d7.png\" style=\"height:252px; width:600px\" /><br />\r\n按照优酷官方提供的文档，去网上下载如下jar包：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/a3d19fc7-065e-4ee7-b1f6-41e40c47a1701.png\" style=\"height:98px; width:600px\" /></p>\r\n\r\n<p>Upload.java源码：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p><strong>import</strong> java.io.File;</p>\r\n\r\n<p><strong>import</strong> java.util.HashMap;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> com.youku.uploader.FileUtil;</p>\r\n\r\n<p><strong>import</strong> com.youku.uploader.YoukuUploader;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>public</strong> <strong>class</strong> YoukuUpload {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; <strong>private</strong> <strong>static</strong> YoukuUploader <em>uploader</em>;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; <strong>public</strong> <strong>static</strong> <strong>void</strong> main(String[] args) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 应用编号</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String client_id = &quot;－－－－－－－－&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 应用Secret</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String client_secret = &quot;－－－－－－－－&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 优酷账号</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String username = &quot;－－－－－－－－&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 优酷密码</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String password = &quot;－－－－－－－－&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 上传结果集变量</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String result = &quot;&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Access Token</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String access_token = &quot;59ebc7a89dc49f3c28－－－－－－－&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 文件名</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String filename = &quot;C://Users//Steve Jrong//Desktop//励志创业.flv&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 根据文件路径创建文件byte数组</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>byte</strong>[] data = FileUtil.<em>getBytesFromFile</em>(<strong>new</strong> File(filename));</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 上传文件时必要的参数信息Map键值对集合：<u>params</u>参数表示用户账户信息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashMap&lt;String, String&gt; params = <strong>new</strong> HashMap&lt;String, String&gt;();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 向参数键值对集合中填入必要的用户账户基础信息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 优酷账号</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; params.put(&quot;username&quot;, username);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 优酷密码</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; params.put(&quot;password&quot;, password);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 优酷生成的Access Token</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; params.put(&quot;access_token&quot;, access_token);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 上传文件时必要的参数信息Map键值对集合：uploadInfo参数表示上传的视频文件的信息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HashMap&lt;String, String&gt; uploadInfo = <strong>new</strong> HashMap&lt;String, String&gt;();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 向参数键值对集合中填入必要的上传文件基本信息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 视频文件名</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uploadInfo.put(&quot;file_name&quot;, filename);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 视频标题</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uploadInfo.put(&quot;title&quot;, &quot;励志创业小视频.flv&quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 视频标签</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uploadInfo.put(&quot;tags&quot;, &quot;励志 创业&quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 视频权限（all表示所有人都可以观看，还可以设置仅允许我的好友观看或者输入视频密码才可以观看）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uploadInfo.put(&quot;public_type&quot;, &quot;all&quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 根据应用编号和应用Secret创建一个YoukuUploader对象以用于调用优酷SDK中的方法上传</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>uploader</em> = <strong>new</strong> YoukuUploader(client_id, client_secret);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 调用YoukuUploader对象的upload()方法进行上传，如果成功会返回JSON格式的视频信息，如果失败则返回null</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = <em>uploader</em>.upload(params, uploadInfo, data, <strong>true</strong>);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 打印一下结果</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>out</em>.print(result);</p>\r\n\r\n<p>&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>运行之后的结果：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/c56a67ce-c8e0-40ea-894e-001f6cb103ff3.png\" style=\"height:209px; width:600px\" /></p>\r\n\r\n<h2><strong>使用HTML5技术Web直传</strong></h2>\r\n\r\n<p>这种方法比较方便，所有操作都置于页面上，完全不需要写关于优酷上传的Java代码，使用优酷的官方Demo即可上传视频。</p>\r\n\r\n<p>首先到开发者中心的优酷Web直传站点下载Demo：</p>\r\n\r\n<p><a href=\"http://cloud.youku.com/docs?id=113\">http://cloud.youku.com/docs?id=113</a></p>\r\n\r\n<p><br />\r\n解压后得到如下三个文件：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/6794c65c-1600-4aa6-8f9d-cb45522ef3002.png\" style=\"height:287px; width:579px\" /></p>\r\n\r\n<p><img src=\"file://localhost/Users/wangjing/Library/Group%20Containers/UBF8T346G9.Office/msoclip1/01/clip_image012.png\" style=\"height:197px; width:524px\" /><br />\r\n打开upload.html文件后看到这里：<img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/235c2810-41f3-421f-ab17-3602e90db3398.png\" style=\"height:225px; width:600px\" />注意：</p>\r\n\r\n<p>第 1 处是需要改成自己优酷账号下创建的应用编号；</p>\r\n\r\n<p>第 2 处是需要改成自己优酷账号下已创建应用的client secret</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>改好之后就可以打开这个页面直接上传视频了。<br />\r\n上传状态图示：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/0c93a418-efa5-4bf0-9fba-00d2c22111792.png\" style=\"height:221px; width:600px\" />这是刚才使用两种不同的方式上传的视频，已经上传成功了，等待审核后就可以看到视频了：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/0d7080c2-95fd-4608-a157-10353845550a2.png\" style=\"height:314px; width:600px\" /></p>\r\n\r\n<h2><strong>注意点</strong></h2>\r\n\r\n<p>在向优酷上传视频的时候要保证授权可用，即access_token和refresh_token要保证不在失<br />\r\n效期，这个可以在http://cloud.youku.com/tools站点手动去获取：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/7fa3ce14-ffba-49ef-8846-b040c46bcd592.png\" style=\"height:338px; width:600px\" />当然，这只是作为一种开发时使用的临时办法，为了开发方便，采用这种方式。优酷还提供了自动获取token进行授权的方式，通过请求某些携带参数的地址即可通过验证。也就是当令牌失效时让用户重新在页面上登录一下就可以了。</p>\r\n\r\n<p>详情见优酷视频云：</p>\r\n\r\n<p><a href=\"http://cloud.youku.com/docs\">http://cloud.youku.com/docs</a></p>\r\n',NULL,'官网上有三种视频上传方案:使用优酷PC客户端、使用优酷Java SDK和使用HTML5直接Web上传，这里仅介绍使用Java SDK和使用Web直传两种方案。\r\n','Chrome 50','Mac'),(3,'配置.gitignore文件个性化提交代码到GitHub',3,1,'2016-09-17 14:54:18','120.76.131.230',NULL,2,0,'正常','Github','<p>本次使用GitHub for Windows桌面客户端做演示。</p>\r\n\r\n<p>在项目的根路径（或设置的GitHub的本地路径）下新建一个.gitignore文件，并在其中输入：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>#忽略.class文件</p>\r\n\r\n<p>*.class</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#忽略Eclipse生成的settings文件夹</p>\r\n\r\n<p>.settings/</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>忽略Eclipse生成的externalToolBuilders文件夹</p>\r\n\r\n<p>.externalToolBuilders/</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#忽略lib目录下的jar包</p>\r\n\r\n<p>WebRoot/WEB-INF/lib/</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#忽略编译文件夹</p>\r\n\r\n<p>classes/</p>\r\n</div>\r\n\r\n<p>这里都是使用通配符来过滤那些需要提交，哪些需要忽略。</p>\r\n\r\n<p>写好之后保存，然后当你改变了本地仓库的代码之后再次提交以后，这些设置过滤的文件或文件夹就不会再同代码一起提交了。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>未设置之前：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/582f8436-b2b8-4c05-9b6a-2e25d415e26b5.png\" style=\"height:312px; width:600px\" /></p>\r\n\r\n<p>此时未设置配置文件，那么<br />\r\n.externalToolBuilders文件夹、.settings文件夹等这些都还存在。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/629fb92f-8f0d-458f-9403-bf99bb00de736.png\" style=\"height:324px; width:600px\" /></p>\r\n\r\n<p>最可怕的是jar包也被同步上去了。。。这个根本不需要提交的，既浪费容量又耗网速。<br />\r\n设置并重新提交之后：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/26b75dcd-acbc-40b2-b26a-f32f366bb7188.png\" style=\"height:277px; width:600px\" /></p>\r\n',NULL,'在使用SVN提交代码时，常常会有一些无用的文件同代码文件一并提交上去。但这些文件往往没有用处，并不希望继续跟踪。那么就需要配置.gitignore配置文件来对某些文件或者文件路径进行忽略，有选择的提交。\r\n','Chrome 50','Mac'),(4,'使用CSS样式强制分页打印',4,1,'2016-09-17 14:58:16','120.76.131.230',NULL,4,0,'正常','CSS3','<p>使用 page-break-after: always; 即可对某些内容进行强制分页打印。</p>\r\n\r\n<h2><strong>搭建开发环境</strong></h2>\r\n\r\n<p>在MyEclipse下创建一个Web项目，并导入jQuery运行库：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/b31018c2-9928-41ff-8b80-5797ba2ee0e61.png\" style=\"height:286px; width:389px\" /></p>\r\n\r\n<h2><strong>业务处理</strong></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>编写JSP页面：</p>\r\n\r\n<p>Index.jsp:</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;%@ page language=<em>&quot;java&quot;</em> import=<em>&quot;java.util.*&quot;</em> pageEncoding=<em>&quot;UTF-8&quot;</em>%&gt;</p>\r\n\r\n<p>&lt;%</p>\r\n\r\n<p>String path = request.getContextPath();</p>\r\n\r\n<p>String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</p>\r\n\r\n<p>%&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&lt;!DOCTYPE&gt;</p>\r\n\r\n<p>&lt;html&gt;</p>\r\n\r\n<p>&nbsp; &lt;head&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;base href=<em>&quot;</em>&lt;%=basePath%&gt;<em>&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;title&gt;分页打印示例&lt;/title&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;pragma&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;cache-control&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;expires&quot;</em> content=<em>&quot;0&quot;</em>&gt;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;keywords&quot;</em> content=<em>&quot;keyword1,keyword2,keyword3&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;description&quot;</em> content=<em>&quot;This is my page&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;style type=<em>&quot;text/css&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>.split</em>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page-break-after:<em>always</em>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;/style&gt;</p>\r\n\r\n<p>&nbsp; &lt;/head&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;body&gt;</p>\r\n\r\n<p>&nbsp; &nbsp; &lt;button onclick=&quot;window.print();&quot;&gt;打印&lt;/button&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;div class=<em>&quot;split&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; 页面1，我要单独成一页！</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/div&gt;</p>\r\n\r\n<p>&nbsp; &nbsp; 我是剩下的内容！！！</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;script type=<em>&quot;text/javascript&quot;</em> src=<em>&quot;jquery.js&quot;</em>&gt;&lt;/script&gt;</p>\r\n\r\n<p>&nbsp; &lt;/body&gt;</p>\r\n\r\n<p>&lt;/html&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>使用360浏览器的极速模式（WebKit Core）打印预览时的效果，分成了两页，且内容也按照预期的显示：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/e2caf9bd-cb58-4e3b-8047-5bf773f61c458.png\" style=\"height:274px; width:600px\" /></p>\r\n\r\n<p>另存为PDF模拟打印效果：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/bc2ef6fb-d5ce-4b11-953e-7dc23645051d6.png\" style=\"height:287px; width:600px\" /></p>\r\n',NULL,'在Web打印中有时需要强制把某些内容单独放到一个页面中，比如商品的销售合同和商品的订单。\r\n','Chrome 50','Mac'),(5,'使用Spring MVC发送图文混排的邮件',1,1,'2016-09-17 15:02:53','120.76.131.230',NULL,5,0,'正常','Spring MVC','<h2><strong>搭建Spring MVC开发环境</strong></h2>\r\n\r\n<p>在Eclipse中建立项目并导入如下几个jar包：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/a8d51de5-efd6-40a7-8c54-5918740573642.png\" style=\"height:405px; width:600px\" /></p>\r\n\r\n<h1>&nbsp;</h1>\r\n\r\n<h2><strong>处理业务</strong></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>编写测试类：</p>\r\n\r\n<p>Test.java:</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p><strong>package</strong> com.sendemail.test;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> java.io.File;</p>\r\n\r\n<p><strong>import</strong> java.security.Security;</p>\r\n\r\n<p><strong>import</strong> java.text.SimpleDateFormat;</p>\r\n\r\n<p><strong>import</strong> java.util.Date;</p>\r\n\r\n<p><strong>import</strong> java.util.Properties;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> javax.mail.MessagingException;</p>\r\n\r\n<p><strong>import</strong> javax.mail.internet.MimeMessage;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> org.springframework.mail.javamail.JavaMailSender;</p>\r\n\r\n<p><strong>import</strong> org.springframework.mail.javamail.JavaMailSenderImpl;</p>\r\n\r\n<p><strong>import</strong> org.springframework.mail.javamail.MimeMessageHelper;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> com.sun.net.ssl.internal.ssl.Provider;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>public</strong> <strong>class</strong> Test {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* JavaMailSender邮件发送对象</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp; <strong>private</strong> <strong>static</strong> JavaMailSender <em>javaMailSender</em>;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@param</strong> args</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@throws</strong> MessagingException</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@throws</strong> IllegalAccessException</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@throws</strong> InstantiationException</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp; <strong>public</strong> <strong>static</strong> <strong>void</strong> main(String[] args) <strong>throws</strong> MessagingException,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InstantiationException, IllegalAccessException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>javaMailSender</em> = JavaMailSenderImpl.<strong>class</strong>.newInstance();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 设定QQ Mail</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // server（smtp.exmail.qq.com是企业QQ邮箱的发送服务器；smtp.qq.com是普通QQ邮箱的发送服务器）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JavaMailSenderImpl) <em>javaMailSender</em>).setHost(&quot;smtp.qq.com&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 建立邮件消息,发送简单邮件和<u>html</u>邮件的区别</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MimeMessage mailMessage = <em>javaMailSender</em>.createMimeMessage();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 注意这里的boolean,等于真的时候才能嵌套图片，在构建MimeMessageHelper时候，所给定的值是true表示启用，</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MimeMessageHelper messageHelper = <strong>new</strong> MimeMessageHelper(mailMessage,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>true</strong>, &quot;GBK&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 接收者邮箱</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; messageHelper.setTo(&quot;wangjing4568@hotmail.com&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 发送者邮箱</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; messageHelper.setFrom(&quot;1554052208@qq.com&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 邮件标题</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; messageHelper.setSubject(&quot;你好 James&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 邮件内容</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; messageHelper.setText(</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;今天是&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + <strong>new</strong> SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(<strong>new</strong> Date(</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>currentTimeMillis</em>()))</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + &quot;，我是James，向您问候！\\n&nbsp;&nbsp; &lt;img src=\\&quot;cid:simileFace\\&quot;/&gt;&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>true</strong>);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 从本地读取一张图片</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File smileFaceFile = <strong>new</strong> File(</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;C://Users//Steve Jrong//Workspaces//MyEclipse 10//SendEmailDemo//src//smile.jpg&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 把图片加入到邮件内容当中</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; messageHelper.addInline(&quot;simileFace&quot;, smileFaceFile);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 发送者的邮箱用户名</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JavaMailSenderImpl) <em>javaMailSender</em>).setUsername(&quot;1554052208@qq.com&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 发送者的邮箱密码（注意：腾讯升级了QQ邮箱服务，以前使用密码的方式已经不再可用，而是需要使用其内部生成的授权码才可以操作，否则会报未授权或授权失败的错）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JavaMailSenderImpl) <em>javaMailSender</em>).setPassword(&quot;kamddrppxgqchdei&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Properties prop = <strong>new</strong> Properties();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 将这个参数设为true，让服务器进行认证,认证用户名和密码是否正确</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prop.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prop.put(&quot;mail.smtp.timeout&quot;, &quot;25000&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Security.<em>addProvider</em>(<strong>new</strong> Provider());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prop.setProperty(&quot;mail.smtp.socketFactory.class&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;javax.net.ssl.SSLSocketFactory&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prop.setProperty(&quot;mail.smtp.port&quot;, &quot;465&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prop.setProperty(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JavaMailSenderImpl) <em>javaMailSender</em>).setJavaMailProperties(prop);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 发送邮件</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>javaMailSender</em>.send(mailMessage);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>out</em>.println(&quot;邮件发送成功！&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>运行之后控制台显示邮件发送成功：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/49ff74c8-0862-45f1-a354-79bdec59578c9.png\" style=\"height:181px; width:600px\" /></p>\r\n\r\n<p>邮件的发送者是我的QQ邮箱，发到了我的Hotmail邮箱里：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/d30de792-b48d-466a-8088-57cab5f6705e5.png\" style=\"height:181px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>总结</strong></h2>\r\n\r\n<p><br />\r\n要注意QQ邮箱升级之后之前使用密码验证的方式已经失效了，需要登录邮箱之后转到&ldquo;账户&rdquo; &ndash; &ldquo;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务&ldquo;功能区中进行设置：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/7c701da9-f4f9-4fc5-978a-3c5cf5cad5801.png\" style=\"height:181px; width:600px\" /><br />\r\n点击&rdquo;生成授权码&rdquo;之后发送一条短信到指定号码后就会生成授权码，这个授权吗其实就是原来的密码，使用它就可以成功授权了。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/c9d823ab-fe75-47d7-b95d-7b2b324f83002.png\" style=\"height:397px; width:600px\" /></p>\r\n',NULL,'使用Spring MVC框架可以很方便的发送电子邮件。\r\n','Chrome 50','Mac'),(6,'使用Uploadify插件基于Spring MVC异步单次上传多文件',5,1,'2016-09-17 15:08:49','120.76.131.230',NULL,6,0,'正常','Ajax文件上传','<h2><strong>搭建Spring MVC项目环境</strong></h2>\r\n\r\n<p>在MyEclipse中建立Java Web项目，并导入Spring MVC框架必要的包。并建立各种类文件和JSP文件：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/7f04c446-f9dc-41b6-805d-6b962d424c0c2.png\" style=\"height:687px; width:432px\" /></p>\r\n\r\n<p>配置web.xml文件：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;?xml version=<em>&quot;1.0&quot;</em> encoding=<em>&quot;UTF-8&quot;</em>?&gt;</p>\r\n\r\n<p>&lt;web-app&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;display-name&gt;UploadDemo&lt;/display-name&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;welcome-file-list&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;/welcome-file-list&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;!-- Spring前置控制器 --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;servlet&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;servlet-name&gt;spring&lt;/servlet-name&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;/servlet&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;!-- Spring请求拦截的后缀 --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;servlet-mapping&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;servlet-name&gt;spring&lt;/servlet-name&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url-pattern&gt;*.<u>jhtml</u>&lt;/url-pattern&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;/servlet-mapping&gt;</p>\r\n\r\n<p>&lt;/web-app&gt;</p>\r\n</div>\r\n\r\n<p>配置applicationContext.xml文件：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;?xml version=<em>&quot;1.0&quot;</em> encoding=<em>&quot;UTF-8&quot;</em>?&gt;</p>\r\n\r\n<p>&lt;beans xmlns=<em>&quot;http://www.springframework.org/schema/beans&quot;</em> xmlns:xsi=<em>&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</em></p>\r\n\r\n<p>&nbsp;&nbsp; xmlns:context=<em>&quot;http://www.springframework.org/schema/context&quot;</em> xmlns:tx=<em>&quot;http://www.springframework.org/schema/tx&quot;</em></p>\r\n\r\n<p>&nbsp;&nbsp; xmlns:aop=<em>&quot;http://www.springframework.org/schema/aop&quot;</em></p>\r\n\r\n<p>&nbsp;&nbsp; xsi:schemaLocation=<em>&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</em></p>\r\n\r\n<p><em>&nbsp;&nbsp; http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</em></p>\r\n\r\n<p><em>&nbsp;&nbsp; http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</em></p>\r\n\r\n<p><em>&nbsp;&nbsp; http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;!-- 注解扫描包 --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;context:component-scan base-package=<em>&quot;com.upload.controller&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;context:exclude-filter type=<em>&quot;annotation&quot;</em> expression=<em>&quot;org.springframework.stereotype.Controller&quot;</em> /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;/context:component-scan&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;!-- 适用于JSP的视图 --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;bean id=<em>&quot;jspViewResolver&quot;</em> class=<em>&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name=<em>&quot;viewClass&quot;</em> value=<em>&quot;org.springframework.web.servlet.view.JstlView&quot;</em>/&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name=<em>&quot;prefix&quot;</em> value=<em>&quot;/&quot;</em>/&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name=<em>&quot;suffix&quot;</em> value=<em>&quot;.jsp&quot;</em>/&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/bean&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- 配置上传文件Bean --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;bean id=<em>&quot;multipartResolver&quot;</em>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class=<em>&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</em>&gt;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 设置上传文件的最大大小 --&gt;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name=<em>&quot;maxUploadSize&quot;</em>&gt;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1024000&lt;/value&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 设置在文件上传时允许写到内存中的最大值 --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property name=<em>&quot;maxInMemorySize&quot;</em>&gt;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;4096&lt;/value&gt;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/bean&gt;</p>\r\n\r\n<p>&lt;/beans&gt;</p>\r\n</div>\r\n\r\n<h1>&nbsp;</h1>\r\n\r\n<h2><strong>处理业务</strong></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>创建上传文件的Controller：</p>\r\n\r\n<p>UploadFileController.java：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p><strong>package</strong> com.upload.controller;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> java.io.IOException;</p>\r\n\r\n<p><strong>import</strong> java.util.HashMap;</p>\r\n\r\n<p><strong>import</strong> java.util.Map;</p>\r\n\r\n<p><strong>import</strong> java.util.UUID;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> javax.servlet.http.HttpServletRequest;</p>\r\n\r\n<p><strong>import</strong> javax.servlet.http.HttpServletResponse;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> org.springframework.stereotype.Controller;</p>\r\n\r\n<p><strong>import</strong> org.springframework.web.bind.annotation.RequestMapping;</p>\r\n\r\n<p><strong>import</strong> org.springframework.web.bind.annotation.RequestMethod;</p>\r\n\r\n<p><strong>import</strong> org.springframework.web.bind.annotation.RequestParam;</p>\r\n\r\n<p><strong>import</strong> org.springframework.web.bind.annotation.ResponseBody;</p>\r\n\r\n<p><strong>import</strong> org.springframework.web.multipart.commons.CommonsMultipartFile;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> com.google.gson.Gson;</p>\r\n\r\n<p><strong>import</strong> com.sun.jmx.snmp.Timestamp;</p>\r\n\r\n<p><strong>import</strong> com.upload.util.FileUtil;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>@Controller(&quot;uploadFileController&quot;)</p>\r\n\r\n<p><strong>public</strong> <strong>class</strong> UploadFileController {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; // <u>Gson</u>对象，用于操作JSON</p>\r\n\r\n<p>&nbsp;&nbsp; <strong>private</strong> <strong>static</strong> Gson <em>gson</em> = <strong>new</strong> Gson();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* 上传文件的方法</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@param</strong> anyFile</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 上传页面上<u>uploadify</u>组件的&ldquo;fileObjName&rdquo;属性</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@param</strong> request</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HttpServletRequest对象</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@param</strong> response</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HttpServletResponse对象</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@return</strong> 返回JSON字符串形式的结果集</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@throws</strong> IOException</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp; @RequestMapping(value = &quot;/uploadFile&quot;, method = RequestMethod.<em>POST</em>)</p>\r\n\r\n<p>&nbsp;&nbsp; @ResponseBody</p>\r\n\r\n<p>&nbsp;&nbsp; <strong>public</strong> String upload(@RequestParam(&quot;anyFile&quot;) CommonsMultipartFile anyFile,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; HttpServletRequest request, HttpServletResponse response)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>throws</strong> IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map&lt;String, Object&gt; map = <strong>new</strong> HashMap&lt;String, Object&gt;();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 获取服务器上传文件的路径（事先要创建好，否则会报错，这里为了演示就直接在<u>Tomcat</u>目录下手动创建了一个名为upload的文件夹）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String filePath = request.getSession().getServletContext()</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .getRealPath(&quot;/upload/&quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 避免文件重名或者有中文导致意料之外的错误，将文件名统一设置为【UUID + 当前时间的时间戳】格式</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String uuid = UUID.<em>randomUUID</em>().toString().replace(&quot;-&quot;, &quot;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String uuidFileName = uuid</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + <strong>new</strong> Timestamp(System.<em>currentTimeMillis</em>()).getDateTime();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>try</strong> {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 将文件保存到服务器</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileUtil.<em>upFile</em>(anyFile.getInputStream(), uuidFileName, filePath);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <strong>catch</strong> (Exception e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 如果发生异常则表示上传失败，给出提示</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; map.put(&quot;result&quot;, &quot;failed&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 上传成功，给出提示</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; map.put(&quot;result&quot;, &quot;success&quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 打印一下便于查看结果</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<em>out</em>.println(<em>gson</em>.toJson(map));</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 将HashMap键值对结果集利用<u>Gson</u>对象进行转换，返回一个String类型的结果集</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return</strong> <em>gson</em>.toJson(map);</p>\r\n\r\n<p>&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>创建上传文件的工具类：</p>\r\n\r\n<p>FileUtil.java：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p><strong>package</strong> com.upload.util;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>import</strong> java.io.BufferedInputStream;</p>\r\n\r\n<p><strong>import</strong> java.io.BufferedOutputStream;</p>\r\n\r\n<p><strong>import</strong> java.io.File;</p>\r\n\r\n<p><strong>import</strong> java.io.FileOutputStream;</p>\r\n\r\n<p><strong>import</strong> java.io.InputStream;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 文件上传的工具类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* <strong>@author</strong> <u>Steve</u> <u>Jrong</u></p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p><strong>public</strong> <strong>class</strong> FileUtil {</p>\r\n\r\n<p>&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* 上传文件的方法</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@param</strong> is</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@param</strong> fileName</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;* <strong>@param</strong> filePath</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp; <strong>public</strong> <strong>static</strong> <strong>void</strong> upFile(InputStream is, String fileName, String filePath) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileOutputStream fos = <strong>null</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BufferedOutputStream bos = <strong>null</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BufferedInputStream bis = <strong>null</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File file = <strong>new</strong> File(filePath);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong> (!file.exists()) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file.mkdirs();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File f = <strong>new</strong> File(filePath + &quot;/&quot; + fileName);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>try</strong> {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bis = <strong>new</strong> BufferedInputStream(is);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos = <strong>new</strong> FileOutputStream(f);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bos = <strong>new</strong> BufferedOutputStream(fos);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>byte</strong>[] bt = <strong>new</strong> <strong>byte</strong>[4096];</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>int</strong> len;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>while</strong> ((len = bis.read(bt)) &gt; 0) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bos.write(bt, 0, len);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <strong>catch</strong> (Exception e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <strong>finally</strong> {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>try</strong> {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong> (<strong>null</strong> != bos) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bos.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bos = <strong>null</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong> (<strong>null</strong> != fos) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fos = <strong>null</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong> (<strong>null</strong> != is) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is = <strong>null</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong> (<strong>null</strong> != bis) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bis.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bis = <strong>null</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <strong>catch</strong> (Exception e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>编写index.jsp页面：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;%@ page language=<em>&quot;java&quot;</em> import=<em>&quot;java.util.*&quot;</em> pageEncoding=<em>&quot;UTF-8&quot;</em>%&gt;</p>\r\n\r\n<p>&lt;%</p>\r\n\r\n<p>String path = request.getContextPath();</p>\r\n\r\n<p>String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</p>\r\n\r\n<p>%&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</p>\r\n\r\n<p>&lt;html&gt;</p>\r\n\r\n<p>&nbsp; &lt;head&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;base href=<em>&quot;</em>&lt;%=basePath%&gt;<em>&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;title&gt;文件上传页面&lt;/title&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;pragma&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;cache-control&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;expires&quot;</em> content=<em>&quot;0&quot;</em>&gt;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;keywords&quot;</em> content=<em>&quot;keyword1,keyword2,keyword3&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;description&quot;</em> content=<em>&quot;This is my page&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;link rel=<em>&quot;stylesheet&quot;</em> href=<em>&quot;uploadify/uploadify.css&quot;</em> type=<em>&quot;text/css&quot;</em>&gt;&lt;/link&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;script type=<em>&quot;text/javascript&quot;</em> src=<em>&quot;uploadify/jquery.js&quot;</em>&gt;&lt;/script&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;script type=<em>&quot;text/javascript&quot;</em> src=<em>&quot;uploadify/jquery.uploadify.js&quot;</em>&gt;&lt;/script&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;script type=<em>&quot;text/javascript&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; $(<strong>function</strong>() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(&#39;#file_upload&#39;).uploadify({</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置不自动上传</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;auto&#39;:<strong>false</strong>,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //swf文件位置</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;swf&#39;:&#39;uploadify/uploadify.swf&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //文件上传地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;uploader&#39;:&#39;uploadFile.jhtml&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&ldquo;浏览&rdquo;按钮的宽度</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;height&#39;:32,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&ldquo;浏览&rdquo;按钮的高度</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;width&#39;:50,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将要上传的文件对象的名称 必须与后台controller中抓取的文件名保持一致&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;fileObjName&#39;:&#39;anyFile&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //允许上传的文件后缀</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;fileTypeExts&#39;:&#39;*.jpg;*.jpeg;*.gif;*.png;&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //允许上传的最大容量限制</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&#39;fileSizeLimit&#39;:&#39;100KB&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //允许上传的最大数量限制</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&#39;queueSizeLimit&#39; : 3,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //返回一个错误，选择文件的时候触发</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;onSelectError&#39;:<strong>function</strong>(file, errorCode, errorMsg){</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;<strong>switch</strong>(errorCode) {</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>case </strong>-100:</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;上传的文件数量已经超出系统限制的&quot;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +$(&#39;#file_upload&#39;).uploadify(&#39;settings&#39;,&#39;queueSizeLimit&#39;)+&quot;个文件！&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>break</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>case </strong>-110:</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;文件 [&quot;+file.name+&quot;] 大小超出系统限制的&quot;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +$(&#39;#file_upload&#39;).uploadify(&#39;settings&#39;,&#39;fileSizeLimit&#39;)+&quot;大小！&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>break</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>case </strong>-120:</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;文件 [&quot;+file.name+&quot;] 大小异常！&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>break</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>case </strong>-130:</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;文件 [&quot;+file.name+&quot;] 类型不正确！&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>break</strong>;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //上传到服务器，服务器返回相应信息到data里</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;onUploadSuccess&#39; : <strong>function</strong>(file, data, response) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>var </strong>result = jQuery.parseJSON(data);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if </strong>(result.result === &quot;success&quot;) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(&quot;#resultArea&quot;).append(&quot;&lt;p style=&#39;color:darkgreen;&#39;&gt;您选择的文件\\t&quot;+file.name+&quot;\\t现已成功上传至服务器。&quot;+&quot;&lt;/p&gt;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<strong>else </strong>{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(&quot;#resultArea&quot;).append(&quot;&lt;p style=&#39;color:red; font-weight:bold;&#39;&gt;您选择的文件\\t&quot;+file.name+&quot;\\t未能成功上传至服务器，请重试！&quot;+&quot;&lt;/p&gt;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //当单个文件上传出错时触发</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;onUploadError&#39; : <strong>function</strong>(file, errorCode, errorMsg,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errorString) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;上传失败&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;/script&gt;</p>\r\n\r\n<p>&nbsp; &lt;/head&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;body&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;input type=<em>&quot;file&quot;</em> id=<em>&quot;file_upload&quot;</em> /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;input type=<em>&quot;button&quot;</em> value=<em>&quot;</em><em>上传</em><em>&quot;</em> onclick=&quot;javascript:$(&#39;#file_upload&#39;).uploadify(&#39;upload&#39;,&#39;*&#39;);&quot; /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;input type=<em>&quot;button&quot;</em> value=<em>&quot;</em><em>取消上传</em><em>&quot;</em> onclick=&quot;javascript:$(&#39;#file_upload&#39;).uploadify(&#39;cancel&#39;,&#39;*&#39;);&quot; /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;div id=<em>&quot;resultArea&quot;</em>&gt;&lt;/div&gt;</p>\r\n\r\n<p>&nbsp; &lt;/body&gt;</p>\r\n\r\n<p>&lt;/html&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>准备上传：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/f5c939ad-6d96-4d8e-8143-605e51d4a7993.png\" style=\"height:438px; width:600px\" /><br />\r\n上传成功：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/1aa23db0-8753-4548-88e1-13ec7214915c5.png\" style=\"height:526px; width:600px\" /></p>\r\n\r\n<h2><strong>总结</strong></h2>\r\n\r\n<p>Input=&rdquo;file&rdquo;表单元素目前只有Internet Explorer全版本和Microsoft Edge浏览器下可以显示出客户端文件的全路径，诸如新版本的Google Chrome、Mozilla FireFox等浏览器处于安全考虑已经无法显示文件的全路径（显示出全路径会对客户端电脑造成一定的安全隐患），只能显示文件名了。但是这样是不是就没有办法再上传文件了？答案是否定的。</p>\r\n\r\n<p>在Spring MVC中可以使用CommonsMultipartFile的对象和页面上的表单进行绑定，然后会上传到服务器的临时文件缓存区中，最后将缓存写入到指定位置。</p>\r\n',NULL,'使用基于jQuery的插件 – Uploadify可以无刷新单次上传多个文件。\r\n本例总结基于Spring MVC使用Uploadify插件Ajax无刷新单次多文件上传。','Chrome 50','Mac'),(7,'Nginx+Tomcat部署并发布Java Web应用',1,1,'2016-09-17 16:52:26','120.76.131.230',NULL,5,0,'正常','Web Server','<h1>搭建项目部署的环境</h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>购买服务器</strong></h2>\r\n\r\n<p>首先需要去阿里云购买服务器。本人购买的是Windows Server 2008，刚开始购买了基于Linux的各种系统（Ubuntu、CentOS、AliyunLinx、Debian），由于没有Linux操作基础，最后都没有鼓捣成功，还是先用Windows Server练练手，等了解了大体流程之后在迁移到Linux上。<br />\r\n这是我购买的阿里云ECS实例：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/98e4aae4-626a-43d5-bc73-17d06fccf6071.png\" style=\"height:196px; width:600px\" />之后使用Windows操作系统自带的&ldquo;远程桌面连接&rdquo;工具直接连接到远程服务器：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/8de1eb6f-930a-4ba5-928a-6f8c6fedc7f48.png\" style=\"height:771px; width:600px\" />连接成功之后就会进入到熟悉的Windows操作系统的桌面了，之后就可以安装各种部署的软件，如JDK、MySQL Database、Tomcat等常用的工具，和在本机上操作并无不同。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>购买域名</strong></h2>\r\n\r\n<p>服务器可以正常访问了，那么接下来就需要购置一个域名，通过域名即可跳转到相应的服务器IP，进而让所有的人都可以访问。</p>\r\n\r\n<p>由于我的服务器是在阿里云购买的，阿里云和万网合并了，那么直接在阿里云中就可以一站式搞定。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/0ecf29cd-ab2b-4127-8e39-2436db49d4f51.png\" style=\"height:264px; width:600px\" /></p>\r\n\r\n<p>stevejrong.top即我购买的域名。</p>\r\n\r\n<p>选择一个域名后，点击&ldquo;解析&rdquo;以将域名映射到刚才开通的服务器上：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/7caa90a6-f0a9-4562-91dd-4840f607f4d94.png\" style=\"height:271px; width:600px\" />这里万网做了详细的介绍，在此就不多讲如何映射了。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>域名备案</strong></h2>\r\n\r\n<p>要想真正让所有人都能访问网站，那么就需要备案。由于服务器是在阿里云购置的，而阿里云和万网的服务现在已经合并，所以可以轻松申请备案。</p>\r\n\r\n<p>转到<a href=\"http://aliyun.gein.cn\">http://aliyun.gein.cn</a>站点进行域名备案，由于我是博客类型的网站，那么属于个人网站备案，提交之后先由阿里云的工作人员进行审核，审核通过之后再交由你选择的备案地点所在的省电信局审核。一般来说一线城市的审核速度比较快，我选在了我老家所在的省份，审核时间花费了半个月多。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>部署项目</strong></h2>\r\n\r\n<p>域名和服务器都准备好了，那么现在可以发布项目了。</p>\r\n\r\n<p>这里我采用了Nginx反向代理服务器和Tomcat容器组合共同来支撑整个网站的运行。Nginx负责拦截并转发客户端发来的请求，它并不做页面的解析等工作，这些工作都交给Tomcat去处理，因为Nginx擅长处理请求，是一个高性能的反向代理服务器，它几乎没有处理Servlet请求的能力，所以要配合一个能够处理Servlet的容器共同协作，当然，Servlet容器有很多，如Resin、JBoss、Tomcat、GlassFish等等，选择Servlet容器就因人而异了，看自己喜欢用什么，还有一些适应的场景和环境。没有最好的，只有最适合的。Tomcat也未必最垃圾，只是看操作者的水平，能否合理优化是一个难题。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>安装和配置Nginx</strong></h2>\r\n\r\n<p>转到<a href=\"http://nginx.org\">http://nginx.org</a> 站点下载最新版本的Nginx服务器，这里采用1.9.15版本的：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/ac2cf447-82ff-4424-a341-56e6e14b2ad57.png\" style=\"height:240px; width:600px\" />解压后得到如下几个文件和文件夹：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/a86a2494-68b0-4a43-a73f-de677aaa93a78.png\" style=\"height:206px; width:600px\" />打开conf目录下的nginx.conf文件，这个文件是Nginx服务器的配置文件：</p>\r\n\r\n<p>配置代码和解释如下：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>#user&nbsp; nobody;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#工作进程数</p>\r\n\r\n<p>worker_processes&nbsp; 2;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#错误日志</p>\r\n\r\n<p>#error_log&nbsp; logs/error.log;</p>\r\n\r\n<p>#error_log&nbsp; logs/error.log&nbsp; notice;</p>\r\n\r\n<p>#error_log&nbsp; logs/error.log&nbsp; info;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#进程保存文件</p>\r\n\r\n<p>#pid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; logs/nginx.pid;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#等待事件</p>\r\n\r\n<p>events {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #每个进程的最大连接数（最大连接数=连接数 * 进程数）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; worker_connections&nbsp; 2048;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>http {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #文件扩展名和文件类型映射</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mime.types;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #默认文件类型</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; default_type&nbsp; application/octet-stream;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #日志的输出格式</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #log_format&nbsp; main&nbsp; &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #请求日志的保存位置</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #access_log&nbsp; logs/access.log&nbsp; main;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #是否开启发送文件支持</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; sendfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp; on;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #活动连接超时时间</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #keepalive_timeout&nbsp; 0;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; keepalive_timeout&nbsp; 65;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; #是否开启gzip压缩支持</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #gzip&nbsp; on;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #第一个虚拟主机</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; server {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #监听到的端口</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #主机名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server_name&nbsp; www.stevejrong.top;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #设置字符编码格式</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #charset koi8-r;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #本地虚拟主机的访问日志</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #access_log&nbsp; logs/host.access.log&nbsp; main;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server_name_in_redirect off;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header Host $host:$server_port;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Real-IP $remote_addr;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header REMOTE-HOST $remote_addr;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location / {&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://www.stevejrong.top:8888/;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #error_page&nbsp; 404&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /404.html;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # redirect server error pages to the static page /50x.html</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error_page&nbsp;&nbsp; 500 502 503 504&nbsp; /50x.html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location = /50x.html {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;root&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # proxy the PHP scripts to Apache listening on 127.0.0.1:80</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #location ~ \\.php$ {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; proxy_pass&nbsp;&nbsp; http://127.0.0.1;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #location ~ \\.php$ {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; fastcgi_pass&nbsp;&nbsp; 127.0.0.1:9000;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; fastcgi_index&nbsp; index.php;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; fastcgi_param&nbsp; SCRIPT_FILENAME&nbsp; /scripts$fastcgi_script_name;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fastcgi_params;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # deny access to .htaccess files, if Apache&#39;s document root</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # concurs with nginx&#39;s one</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #location ~ /\\.ht {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; deny&nbsp; all;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; # another virtual host using mix of IP-, name-, and port-based configuration</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #server {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8000;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; somename:8080;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; server_name&nbsp; somename&nbsp; alias&nbsp; another.alias;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; location / {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index&nbsp; index.html index.htm;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; # HTTPS server</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #server {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 443 ssl;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; server_name&nbsp; localhost;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_certificate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cert.pem;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_certificate_key&nbsp; cert.key;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_session_cache&nbsp;&nbsp;&nbsp; shared:SSL:1m;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_session_timeout&nbsp; 5m;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_ciphers&nbsp; HIGH:!aNULL:!MD5;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_prefer_server_ciphers&nbsp; on;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; location / {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index&nbsp; index.html index.htm;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;#}</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>注意：如果是普通HTTP普通协议则配置HTTP节点，如果是HTTPS安全加密协议则配置HTTPS节点；</p>\r\n\r\n<p>HTTP节点中，监听的端口填写80，80是缺省端口，如果你的应用发布在80端口，那么请求的时候直接写IP地址就会自动转到你应用的访问路径，即默认格式为【IP地址+80端口】；还有一种是你把应用发布到了其他端口上，即格式为【IP地址+自定义的端口】，那么此时直接访问IP地址就不能自动转到你应用的访问路径，需要带端口才能访问；</p>\r\n\r\n<p>server_name（主机名称）可以填写IP地址或者域名；</p>\r\n\r\n<p>有如下格式：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>location / {&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://www.stevejrong.top:8888/;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n</div>\r\n\r\n<p>其中location写法固定；紧跟其后的斜杠表示拦截所有请求（还有更多的正则表达式匹配的语法，不同的正则可以拦截不同的请求，这里不再过多赘述）；proxy_pass并表示Nginx要转发到的路径。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>配置好之后测试一下是否成功：</p>\r\n\r\n<p>Windows + R键输入cmd打开命令提示符，转到Nginx的安装目录并输入以下命令：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>start nginx.exe</p>\r\n</div>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/990ba72e-cd7d-47dd-949d-360c9737aabb7.png\" style=\"height:352px; width:600px\" />看到一闪而过的cmd窗口之后且当前cmd窗口中没有报错，则表示启动成功：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/b20d8198-63d4-4006-a033-638c423382b85.png\" style=\"height:89px; width:600px\" />此时在任务管理器中可以看到已经启动的服务器进程，一共有三个进程。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>如何测试Nginx是否正常工作？</p>\r\n\r\n<p>将nginx.conf配置文件作如下改动：</p>\r\n\r\n<p>server_name改为localhost</p>\r\n\r\n<p>将转发的配置去掉，即将location那三行全部注释掉</p>\r\n\r\n<p>之后在cmd中转到Nginx的安装目录并输入以下命令：</p>\r\n\r\n<p>nginx &ndash;s reload （这条命令表示重新加载Nginx的所有资源，包括项目文件、配置文件等，而不必关闭再开启）</p>\r\n\r\n<p><br />\r\n在浏览器地址栏中输入<a href=\"http://localhost\">http://localhost</a> ，出现如下页面表示Nginx已正常运行并工作了：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/80e4c7c7-0491-4d30-ba0b-f7edebec550b9.png\" style=\"height:240px; width:600px\" /></p>\r\n\r\n<h2><strong>项目打包并上传</strong></h2>\r\n\r\n<p>在Eclipse或MyEclipse中，在要发布的项目上点右键 &ndash; 属性，在Java Build Path中的Source选项卡下底部的Default Output Folder中将输出目录设置为当前项目的classes编译目录，确保可以正常的将项目依赖的所有文件资源都打包进去。如果此目录就是在classes下那么则不用理会：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/557317f4-849e-4d76-8fbe-0573feeee28e9.png\" style=\"height:453px; width:600px\" />然后在项目上右键 &ndash; Export，在弹出的对话框中搜索War，导出为war包即可。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>安装和配置Tomcat</strong></h2>\r\n\r\n<p>转到<a href=\"http://tomcat.apache.org/\">http://tomcat.apache.org/</a>站点下载Tomcat组件并解压，配置好环境变量之后点击startup.bat即可运行。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>实战</strong></h2>\r\n\r\n<p>使用HTTP协议基于Nginx+Tomcat的组合部署并发布Java Web应用</p>\r\n\r\n<p>为了方便在本地测试，以记事本打开C:\\Windows\\System32\\drivers\\etc目录下的hosts文件，进行如下修改：</p>\r\n\r\n<p>hosts文件源码：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p># Copyright (c) 1993-2009 Microsoft Corp.</p>\r\n\r\n<p>#</p>\r\n\r\n<p># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</p>\r\n\r\n<p>#</p>\r\n\r\n<p># This file contains the mappings of IP addresses to host names. Each</p>\r\n\r\n<p># entry should be kept on an individual line. The IP address should</p>\r\n\r\n<p># be placed in the first column followed by the corresponding host name.</p>\r\n\r\n<p># The IP address and the host name should be separated by at least one</p>\r\n\r\n<p># space.</p>\r\n\r\n<p>#</p>\r\n\r\n<p># Additionally, comments (such as these) may be inserted on individual</p>\r\n\r\n<p># lines or following the machine name denoted by a &#39;#&#39; symbol.</p>\r\n\r\n<p>#</p>\r\n\r\n<p># For example:</p>\r\n\r\n<p>#</p>\r\n\r\n<p>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 102.54.94.97&nbsp;&nbsp;&nbsp;&nbsp; rhino.acme.com&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # source server</p>\r\n\r\n<p>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 38.25.63.10&nbsp;&nbsp;&nbsp;&nbsp; x.acme.com&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # x client host</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># localhost name resolution is handled within DNS itself.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 127.0.0.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"http://www.stevejrong.top\">www.stevejrong.top</a>&nbsp;&nbsp;</p>\r\n\r\n<p>#前面的IP地址表示要映射到的IP，后面的域名表示输入这个虚拟域名就会转到全面对应的IP地址</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ::1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; localhost</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Nginx配置文件源码：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>#user&nbsp; nobody;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#工作进程数</p>\r\n\r\n<p>worker_processes&nbsp; 2;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#错误日志</p>\r\n\r\n<p>#error_log&nbsp; logs/error.log;</p>\r\n\r\n<p>#error_log&nbsp; logs/error.log&nbsp; notice;</p>\r\n\r\n<p>#error_log&nbsp; logs/error.log&nbsp; info;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#进程保存文件</p>\r\n\r\n<p>#pid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; logs/nginx.pid;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>#等待事件</p>\r\n\r\n<p>events {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #每个进程的最大连接数（最大连接数=连接数 * 进程数）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; worker_connections&nbsp; 2048;</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>http {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #文件扩展名和文件类型映射</p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mime.types;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #默认文件类型</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; default_type&nbsp; application/octet-stream;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #日志的输出格式</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #log_format&nbsp; main&nbsp; &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #请求日志的保存位置</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #access_log&nbsp; logs/access.log&nbsp; main;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #是否开启发送文件支持</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; sendfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #tcp_nopush&nbsp;&nbsp;&nbsp;&nbsp; on;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #活动连接超时时间</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #keepalive_timeout&nbsp; 0;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; keepalive_timeout&nbsp; 65;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; #是否开启gzip压缩支持</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #gzip&nbsp; on;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #第一个虚拟主机</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; server {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #监听到的端口</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #主机名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server_name&nbsp; www.stevejrong.top;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #设置字符编码格式</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #charset koi8-r;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #本地虚拟主机的访问日志</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #access_log&nbsp; logs/host.access.log&nbsp; main;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server_name_in_redirect off;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header Host $host:$server_port;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Real-IP $remote_addr;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header REMOTE-HOST $remote_addr;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location / {&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://www.stevejrong.top:8888/;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #error_page&nbsp; 404&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /404.html;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # redirect server error pages to the static page /50x.html</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error_page&nbsp;&nbsp; 500 502 503 504&nbsp; /50x.html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location = /50x.html {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # proxy the PHP scripts to Apache listening on 127.0.0.1:80</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #location ~ \\.php$ {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; proxy_pass&nbsp;&nbsp; http://127.0.0.1;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #location ~ \\.php$ {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; fastcgi_pass&nbsp;&nbsp; 127.0.0.1:9000;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; fastcgi_index&nbsp; index.php;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; fastcgi_param&nbsp; SCRIPT_FILENAME&nbsp; /scripts$fastcgi_script_name;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; include&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fastcgi_params;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # deny access to .htaccess files, if Apache&#39;s document root</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # concurs with nginx&#39;s one</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #location ~ /\\.ht {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; deny&nbsp; all;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; # another virtual host using mix of IP-, name-, and port-based configuration</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #server {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8000;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; somename:8080;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; server_name&nbsp; somename&nbsp; alias&nbsp; another.alias;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; location / {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index&nbsp; index.html index.htm;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; # HTTPS server</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #server {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 443 ssl;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; server_name&nbsp; localhost;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_certificate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cert.pem;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_certificate_key&nbsp; cert.key;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_session_cache&nbsp;&nbsp;&nbsp; shared:SSL:1m;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_session_timeout&nbsp; 5m;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_ciphers&nbsp; HIGH:!aNULL:!MD5;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; ssl_prefer_server_ciphers&nbsp; on;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; location / {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; root&nbsp;&nbsp; html;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index&nbsp; index.html index.htm;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #}</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>Tomcat服务器server.xml配置文件源码：</p>\r\n\r\n<p>&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt;</p>\r\n\r\n<p>&lt;!--</p>\r\n\r\n<p>&nbsp; Licensed to the Apache Software Foundation (ASF) under one or more</p>\r\n\r\n<p>&nbsp; contributor license agreements.&nbsp; See the NOTICE file distributed with</p>\r\n\r\n<p>&nbsp; this work for additional information regarding copyright ownership.</p>\r\n\r\n<p>&nbsp; The ASF licenses this file to You under the Apache License, Version 2.0</p>\r\n\r\n<p>&nbsp; (the &quot;License&quot;); you may not use this file except in compliance with</p>\r\n\r\n<p>&nbsp; the License.&nbsp; You may obtain a copy of the License at</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; http://www.apache.org/licenses/LICENSE-2.0</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; Unless required by applicable law or agreed to in writing, software</p>\r\n\r\n<p>&nbsp; distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</p>\r\n\r\n<p>&nbsp; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</p>\r\n\r\n<p>&nbsp; See the License for the specific language governing permissions and</p>\r\n\r\n<p>&nbsp; limitations under the License.</p>\r\n\r\n<p>--&gt;</p>\r\n\r\n<p>&lt;!-- Note:&nbsp; A &quot;Server&quot; is not itself a &quot;Container&quot;, so you may not</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; define subcomponents such as &quot;Valves&quot; at this level.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; Documentation at /docs/config/server.html</p>\r\n\r\n<p>&nbsp;--&gt;</p>\r\n\r\n<p>&lt;Server port=&quot;8025&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</p>\r\n\r\n<p>&nbsp; &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</p>\r\n\r\n<p>&nbsp; &lt;!-- Security listener. Documentation at /docs/config/listeners.html</p>\r\n\r\n<p>&nbsp; &lt;Listener className=&quot;org.apache.catalina.security.SecurityListener&quot; /&gt;</p>\r\n\r\n<p>&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp; &lt;!--APR library loader. Documentation at /docs/apr.html --&gt;</p>\r\n\r\n<p>&nbsp; &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</p>\r\n\r\n<p>&nbsp; &lt;!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html --&gt;</p>\r\n\r\n<p>&nbsp; &lt;Listener className=&quot;org.apache.catalina.core.JasperListener&quot; /&gt;</p>\r\n\r\n<p>&nbsp; &lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&gt;</p>\r\n\r\n<p>&nbsp; &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</p>\r\n\r\n<p>&nbsp; &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</p>\r\n\r\n<p>&nbsp; &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;!-- Global JNDI resources</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Documentation at /docs/jndi-resources-howto.html</p>\r\n\r\n<p>&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp; &lt;GlobalNamingResources&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- Editable user database that can also be used by</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UserDatabaseRealm to authenticate users</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type=&quot;org.apache.catalina.UserDatabase&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description=&quot;User database that can be updated and saved&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</p>\r\n\r\n<p>&nbsp; &lt;/GlobalNamingResources&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;!-- A &quot;Service&quot; is a collection of one or more &quot;Connectors&quot; that share</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a single &quot;Container&quot; Note:&nbsp; A &quot;Service&quot; is not itself a &quot;Container&quot;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; so you may not define subcomponents such as &quot;Valves&quot; at this level.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Documentation at /docs/config/service.html</p>\r\n\r\n<p>&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp; &lt;Service name=&quot;Catalina&quot;&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!--</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxThreads=&quot;150&quot; minSpareThreads=&quot;4&quot;/&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- A &quot;Connector&quot; represents an endpoint by which requests are received</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and responses are returned. Documentation at :</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Java HTTP Connector: /docs/config/http.html (blocking &amp; non-blocking)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Java AJP&nbsp; Connector: /docs/config/ajp.html</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; APR (HTTP/AJP) Connector: /docs/apr.html</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Define a non-SSL HTTP/1.1 Connector on port 8080</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connectionTimeout=&quot;20000&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;redirectPort=&quot;8443&quot; /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!--</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Connector executor=&quot;tomcatThreadPool&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connectionTimeout=&quot;20000&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; redirectPort=&quot;8443&quot; /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- Define a SSL HTTP/1.1 Connector on port 8443</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This connector uses the BIO implementation that requires the JSSE</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; style configuration. When using the APR/native implementation, the</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OpenSSL style configuration is required as described in the APR/native</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; documentation --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!--</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Connector port=&quot;8029&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- An Engine represents the entry point (within Catalina) that processes</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; every request.&nbsp; The Engine implementation for Tomcat stand alone</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; analyzes the HTTP headers included with the request, and passes them</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on to the appropriate Host (virtual host).</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Documentation at /docs/config/engine.html --&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;!-- You should set jvmRoute to support load-balancing via AJP ie :</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;jvm1&quot;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--For clustering, please take a look at documentation at:</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /docs/cluster-howto.html&nbsp; (simple how to)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /docs/config/cluster.html (reference documentation) --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; via a brute-force attack --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- This Realm uses the UserDatabase configured in the global JNDI</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;resources under the key &quot;UserDatabase&quot;.&nbsp; Any edits</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; that are performed against this UserDatabase are immediately</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; available for use by the Realm.&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resourceName=&quot;UserDatabase&quot;/&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Realm&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Host name=&quot;www.stevejrong.top&quot;&nbsp; appBase=&quot;webapps&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!&mdash;在Host节点中加入Context节点，设置docBase为项目的根目录 --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Context path=&quot;&quot; docBase=&quot;D:/TestEnvironment/testtomcat7/apache-tomcat-7.0.68/webapps/SJBlog&quot;/&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- SingleSignOn valve, share authentication between web applications</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Documentation at: /docs/config/valve.html --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Access log processes all example.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Documentation at: /docs/config/valve.html</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Host&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/Engine&gt;</p>\r\n\r\n<p>&nbsp; &lt;/Service&gt;</p>\r\n\r\n<p>&lt;/Server&gt;</p>\r\n</div>\r\n\r\n<p>注意：</p>\r\n\r\n<p>在设置Tomcat的配置文件时，Host节点下的Context节点中的docBase要设置为项目的根目录，且这个目录要直接可以转到项目的主页。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/c34d3353-0c9a-4813-b6e3-e4cb4450dfad1.png\" style=\"height:71px; width:316px\" /><br />\r\n在这里有一个坑：由于项目中使用了UrlRewrite组件，所以在这里直接写伪地址是不管用的，目前的解决方法是在项目中新建一个JSP页面专门用于引导转向这个伪地址然后达到打开主页的目的：</p>\r\n\r\n<p>在项目中建立了二级目录和一个页面。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/84619cda-ed81-490a-a69b-0076babb0b7f5.png\" style=\"height:114px; width:600px\" />然后在页面中编写重定向的代码。</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/82ea13f1-3be3-4071-979d-f20dc177ea381.png\" style=\"height:94px; width:600px\" />最后在web.xml中配置默认的页面即可。</p>\r\n\r\n<p>之后将导出的war包直接丢进Tomcat目录下的webapps中即可，Tomcat启动时即会自动将war包解压并部署。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>都启动好之后，访问地址：<a href=\"http://www.stevejrong.top\">http://www.stevejrong.top</a> :</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/e75e5f6c-27d3-49d3-8891-9414c64d7d1a5.png\" style=\"height:211px; width:600px\" /><br />\r\n之后会自动重定向到<a href=\"http://www.stevejrong.top/home\">http://www.stevejrong.top/home</a>地址：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/91dd9b35-9dc3-4f0d-8452-9a58e8f9ec489.png\" style=\"height:288px; width:600px\" /></p>\r\n\r\n<h1><strong>总结</strong></h1>\r\n\r\n<p>在搞这个的时候遇到很多坑，尤其是Nginx正则表达式和静态资源那里。由于现在的项目静态资源分布的很散，导致目前无法使用Nginx处理静态资源，只是把它作为HTTP代理使用了。</p>\r\n',NULL,'将自己的博客发布到阿里云服务器上是一件多么令人激动的事情。但是由于新手们对于实际的生产环境不是很熟悉或者根本没有接触过服务器，对于一个项目如何发布并让全世界的人能够访问这一问题无从下手。\r\n\r\n最近有时间研究了这些问题，虽然只是皮毛，但感觉比较有用，还是总结一下。\r\n','Chrome 50','Mac'),(8,'iFrame页面向父页面传值',4,1,'2016-09-17 16:58:08','120.76.131.230',NULL,13,0,'正常','iFrame','<h2><strong>搭建开发环境</strong></h2>\r\n\r\n<p>在MyEclipse中创建一个Java Web项目，并导入jQuery运行库：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/bb0f0e8d-70b0-4408-9de2-01ed4d7ef0a24.png\" style=\"height:317px; width:411px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>处理业务</strong></h2>\r\n\r\n<p>创建一个子页面：</p>\r\n\r\n<p>children_page.jsp:</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;%@ page language=<em>&quot;java&quot;</em> import=<em>&quot;java.util.*&quot;</em> pageEncoding=<em>&quot;UTF-8&quot;</em>%&gt;</p>\r\n\r\n<p>&lt;%</p>\r\n\r\n<p>String path = request.getContextPath();</p>\r\n\r\n<p>String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</p>\r\n\r\n<p>%&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</p>\r\n\r\n<p>&lt;html&gt;</p>\r\n\r\n<p>&nbsp; &lt;head&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;base href=<em>&quot;</em>&lt;%=basePath%&gt;<em>&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;title&gt;子页面&lt;/title&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;pragma&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;cache-control&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;expires&quot;</em> content=<em>&quot;0&quot;</em>&gt;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;keywords&quot;</em> content=<em>&quot;keyword1,keyword2,keyword3&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;description&quot;</em> content=<em>&quot;This is my page&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp; &lt;/head&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;body&gt;</p>\r\n\r\n<p>&nbsp; &nbsp; &lt;p&gt;嵌套的iFrame页面&lt;/p&gt;</p>\r\n\r\n<p>&nbsp; &nbsp; 请输入一些值：&lt;input type=<em>&quot;text&quot;</em> id=<em>&quot;someValue&quot;</em> /&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;button onclick=&quot;transfer();&quot;&gt;开始传值&lt;/button&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;script type=<em>&quot;text/javascript&quot;</em> src=<em>&quot;jquery.js&quot;</em>&gt;&lt;/script&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;script type=<em>&quot;text/javascript&quot;</em>&gt;</p>\r\n\r\n<p><strong>&nbsp;&nbsp;&nbsp; function </strong>transfer(){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; $(&#39;#transferValue&#39;, parent.document).attr(&quot;value&quot;,$(&quot;#someValue&quot;).val());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/script&gt;</p>\r\n\r\n<p>&nbsp; &lt;/body&gt;</p>\r\n\r\n<p>&lt;/html&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>创建一个父页面：</p>\r\n\r\n<p>Index.jsp:</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;%@ page language=<em>&quot;java&quot;</em> import=<em>&quot;java.util.*&quot;</em> pageEncoding=<em>&quot;UTF-8&quot;</em>%&gt;</p>\r\n\r\n<p>&lt;%</p>\r\n\r\n<p>String path = request.getContextPath();</p>\r\n\r\n<p>String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</p>\r\n\r\n<p>%&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</p>\r\n\r\n<p>&lt;html&gt;</p>\r\n\r\n<p>&nbsp; &lt;head&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;base href=<em>&quot;</em>&lt;%=basePath%&gt;<em>&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;title&gt;iFrame子父页传值页面&lt;/title&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;pragma&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;cache-control&quot;</em> content=<em>&quot;no-cache&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;expires&quot;</em> content=<em>&quot;0&quot;</em>&gt;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;keywords&quot;</em> content=<em>&quot;keyword1,keyword2,keyword3&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &lt;meta http-equiv=<em>&quot;description&quot;</em> content=<em>&quot;This is my page&quot;</em>&gt;</p>\r\n\r\n<p>&nbsp; &lt;/head&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &lt;body&gt;</p>\r\n\r\n<p>&nbsp; &nbsp; &lt;div style=&quot;margin:<em>0px auto</em>; width:<em>300px</em>;&quot;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iFrame传过来的值：&lt;input id=<em>&quot;transferValue&quot;</em>/&gt;</p>\r\n\r\n<p>&nbsp; &nbsp; &lt;/div&gt;</p>\r\n\r\n<p>&nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &lt;div style=&quot;margin:<em>20px auto</em>; width:<em>300px</em>;&quot;&gt;</p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;iframe src=<em>&quot;children_page.jsp&quot;</em> width=<em>&quot;300&quot;</em> height=<em>&quot;100&quot;</em> frameborder=<em>&quot;1&quot;</em> scrolling=<em>&quot;auto&quot;</em>&gt;&lt;/iframe&gt;</p>\r\n\r\n<p>&nbsp; &nbsp; &lt;/div&gt;</p>\r\n\r\n<p>&nbsp; &lt;/body&gt;</p>\r\n\r\n<p>&lt;/html&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>注意：</p>\r\n\r\n<p>关键点在这里：</p>\r\n\r\n<p>$(&#39;#transferValue&#39;, parent.document).attr(&quot;value&quot;,$(&quot;#someValue&quot;).val());</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p># transferValue 表示父页面中传值的目标，即要把值传到哪一个元素上面；</p>\r\n\r\n<p>parent.document()指定了要操作的document对象，这里指定为当前页面的父页面；</p>\r\n\r\n<p>attr()中的参数1 表示父页面中传值目标的属性，这里传值目标元素是文本框，所以直接设置它的value属性就可以赋值；</p>\r\n\r\n<p>attr()中的参数2表示子页面要传的值的来源，即要把什么值传递到父页面。如果子页面使用Ajax操作业务逻辑，那么就特别适用于这样的场景。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h1>效果展示</h1>\r\n\r\n<p>未传值:</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/fadd89af-eacd-4712-89d2-17aca08b0f9c8.png\" style=\"height:282px; width:558px\" /></p>\r\n\r\n<p>在iFrame中填写了&ldquo;Hello，Steve Jong!&rdquo;后，点击按钮，把值传递到了父页面的文本框中：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201609/11d8aea6-49c0-4a54-a5b1-5453fd9385166.png\" style=\"height:292px; width:584px\" /></p>\r\n',NULL,'有时候需要在父页面中嵌套一个子页面对业务进行处理，子页面处理完成之后将处理的结果返回到父页面上供业务使用，这时就需要此类技术来解决这类问题了。','Chrome 50','Mac'),(10,'Angular JS学习笔记（一）',5,1,'2016-09-17 17:14:55','120.76.131.230',NULL,15,0,'正常','Angular JS','<p><strong>使用 ng-init 初始化数据：</strong></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-init=&quot;myFullName=&#39;Steve Jrong&#39;&quot;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; Default name:&lt;span ng-bind=&quot;myFullName&quot; &gt;&lt;/span&gt;</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*g-bind 指令将数据绑定到HTML视图。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>支持直接计算：</strong></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;p&gt;算术：1+1={{1+1}}&lt;/p&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>支持绑定实体并轻松遍历：</strong></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-init=&quot;HomeObject={address:&#39;山西省太原市尖草坪区&#39;,number:&#39;1-4-65&#39;}&quot;&gt;</p>\r\n\r\n<p>地址：{{HomeObject.address}}&amp;nbsp;&amp;nbsp;门牌号：{{HomeObject.number}}</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*HomeObject是一个对象，里面有两个属性，分别为&ldquo;address&rdquo;和&ldquo;number&rdquo;；初始化过后在作用域范围内直接使用面向对象的写法即可遍历</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>直接获取数据元素：</strong></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-init=&quot;arr=[1,3,5,7,9]&quot;&gt;</p>\r\n\r\n<p>奇数数组的第三个元素为：{{arr[3]}}</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>示例：简易计算器：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-init=&quot;singlePrice=1;count=1&quot;&gt;</p>\r\n\r\n<p>价格计算器</p>\r\n\r\n<p>单价：&lt;input ng-model=&quot;singlePrice&quot; /&gt;</p>\r\n\r\n<p>数量：&lt;input ng-model=&quot;count&quot; /&gt;</p>\r\n\r\n<p>小计：&lt;span&gt;{{singlePrice*count}}&lt;/span&gt;</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>示例：循环对象数组：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-init=&quot;names=[Person={name:&#39;张三&#39;,age:&#39;22&#39;,weight:&#39;80&#39;},Person={name:&#39;李四&#39;,age:&#39;21&#39;,weight:&#39;37&#39;},Person={name:&#39;王五&#39;,age:&#39;32&#39;,weight:&#39;80&#39;},Person={name:&#39;赵六&#39;,age:&#39;26&#39;,weight:&#39;50&#39;}]&quot;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;循环数组&lt;/p&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所有人员名单：</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;span ng-repeat=&quot;item in names&quot;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 姓名-{{item.name}}&amp;nbsp;年龄-{{item.age}}</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/span&gt;</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>更少的代码来验证邮箱地址的合法性：</strong></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;form name=&quot;myForm&quot;&gt;</p>\r\n\r\n<p>验证邮箱地址</p>\r\n\r\n<p>&lt;input type=&quot;email&quot; name=&quot;address&quot; ng-model=&quot;text&quot; /&gt;</p>\r\n\r\n<p>&lt;span ng-show=&quot;myForm.address.$error.email&quot;&gt;不合法的邮箱地址&lt;/span&gt;</p>\r\n\r\n<p>&lt;/form&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>input.ng-invalid {</p>\r\n\r\n<p>background-color: red;</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*这里要配合一个样式，如果邮箱地址输入不合法则文本框背景变为红色。</span></p>\r\n\r\n<p><span style=\"color:#B22222\">*这里在样式上使用了ng-invalid后缀，表示字段内容非法时应用此样式。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>使用代码操作：</strong></p>\r\n\r\n<p>DOM：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myApp1&quot;&gt;</p>\r\n\r\n<p>&lt;input ng-model=&quot;province&quot; /&gt;省</p>\r\n\r\n<p>&lt;input ng-model=&quot;city&quot; /&gt;市</p>\r\n\r\n<p>&lt;span&gt;结果：{{province}}{{city}}&lt;/span&gt;</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>JS：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;script type=&rdquo;text/javascript&rdquo;&gt;</p>\r\n\r\n<p>var myApplication = angular.module(&#39;myApp&#39;,[]);</p>\r\n\r\n<p style=\"margin-left:21.0pt\">myApplication.controller(&#39;myApp1&#39;,function ($scope){</p>\r\n\r\n<p style=\"margin-left:21.0pt\">$scope.province = &quot;山西&quot;;</p>\r\n\r\n<p style=\"margin-left:21.0pt\">$scope.city = &quot;太原&quot;;</p>\r\n\r\n<p>});</p>\r\n\r\n<p>&lt;/script&gt;</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*ng-app表示当前应用的名称，一个页面上可以有多个ng-app，但是默认只会初始化第一个ng-app，后续的ng-app需要使用angular.bootstrap来手动加载；</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#B22222\">ng-controller 表示控制域，一个ng-app钟可以有多个控制域，在这些控制域中存在着各种变量；</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#B22222\">ng-model 表示将输入域（文本框）的值和变量绑定；</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#B22222\">angular.module()方法用于加载一个模块，第一个参数表示模块名称，第二个参数表示此模块依赖的其他模块列表；</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#B22222\">.controller()方法用于指定当前应用中的控制域，第一个参数表示这个app中的控制域名称以定位到正确的域内进行各种操作，第二个参数是一个函数，表示要操作一些什么。在这个函数中默认有一个$scope参数，表示在指定控制域内的局部变量范围，即仅限于指定域内；默认还有一个$rootScope参数，表示这个应用中全局变量范围，即整个应用都能访问到且都能操作的域。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>使用管道符号和 currency 来格式化金额：</strong></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div&gt;</p>\r\n\r\n<p>格式化金额：</p>\r\n\r\n<p>&nbsp;单价：&lt;input ng-model=&quot;singlePrice&quot; /&gt;</p>\r\n\r\n<p>数量：&lt;input ng-model=&quot;smallCount&quot; /&gt;</p>\r\n\r\n<p>总价：{{ (singlePrice*smallCount) | currency }}</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*singlePrice（单价） 乘以 smallCount （数量） 等于 小计。直接计算之后在外面包裹 {{ [金额数] | currency}} 即可格式化金额。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>获取本页的URL地址：</strong></p>\r\n\r\n<p>DOM：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-app=&quot;applicationOne&quot; ng-controller=&quot;applicaionOneController&quot;&gt;</p>\r\n\r\n<p>本页的URL地址：{{urlAddress}}</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>JS：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;script type=&rdquo;text/javascript&rdquo;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var appOne = angular.module(&#39;applicationOne&#39;,[]);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; appOne.controller(&#39;applicaionOneController&#39;,function ($scope,$rootScope,$location){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $scope.allFloor = 100;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $rootScope.innerFloor = 50;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $scope.floors = [1,2,3,4,5,6,7,8,9,10];</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //要使用URL则要将$location作为参数传入</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $scope.urlAddress = $location.absUrl();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; });</p>\r\n\r\n<p>&lt;/script&gt;</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*控制域中的函数中默认也带有一个$location参数，使用此参数的asbUrl()即可获取当前页面的URL路径。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>快速过滤集合：</strong></p>\r\n\r\n<p>DOM：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div ng-controller=&quot;filterController&quot; ng-app=&rdquo; applicationOne&rdquo;&gt;</p>\r\n\r\n<p>筛选：&lt;input ng-model=&quot;test&quot; /&gt;</p>\r\n\r\n<p>&lt;ul ng-repeat=&quot;filterItem in AllItems | filter:test&quot;&gt;</p>\r\n\r\n<p style=\"margin-left:21.0pt\">&lt;li&gt;{{filterItem}}&lt;/li&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/ul&gt;</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>JS:</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;script type=&rdquo;text/javascript&rdquo;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var appOne = angular.module(&#39;applicationOne&#39;,[]);</p>\r\n\r\n<p>appOne.controller(&#39;filterController&#39;,function ($scope){</p>\r\n\r\n<p style=\"margin-left:10.5pt\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scope.AllItems = [&#39;New York&#39;,&#39;Bei Jing&#39;,&#39;Australia&#39;,&#39;Russian&#39;,&#39;Europe&#39;];</p>\r\n\r\n<p style=\"margin-left:10.5pt\">});</p>\r\n\r\n<p>&lt;/script&gt;</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*DOM中的AllItems定义了一个集合变量，并根据filterItem临时迭代变量进行迭代。然后使用管道符号| 和filter关键字进行过滤，filter关键字后面可以填写一个绑定了的文本域的变量，以让用户填写要搜索的词然后进行过滤；</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#B22222\">ng-repeat指示此对象是一个集合。</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>使用AngularJS无刷新异步和服务器交互</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>DOM：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;div id=&quot;httpApp&quot; ng-controller=&quot;httpController&quot;&gt;</p>\r\n\r\n<p>异步GET请求返回的数据：{{responseDataByGet}}</p>\r\n\r\n<p>&lt;button ng-click=&quot;getBtn()&quot;&gt;点我发送GET请求&lt;/button&gt;</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&lt;div id=&quot;httpApp2&quot; ng-controller=&quot;httpController&quot;&gt;</p>\r\n\r\n<p>异步POST请求返回的数据：{{responseDataByPost}}</p>\r\n\r\n<p>&lt;button ng-click=&quot;postBtn()&quot;&gt;点我发送POST请求&lt;/button&gt;</p>\r\n\r\n<p>&lt;span ng-click=&quot;open()&quot;&gt;&lt;/span&gt;</p>\r\n\r\n<p>&lt;/div&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>JS：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;script type=&quot;text/javascript&quot;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; angular.module(&quot;httpApp&quot;,[]).controller(&#39;httpController&#39;,function ($scope,$http){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $scope.getBtn = function(){</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //使用快速get()方法向服务器发送get请求</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $http.get(&#39;index/getReqTest.php&#39;).then(function (response){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $scope.responseDataByGet = response.data.result;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; angular.module(&quot;httpApp2&quot;,[]).controller(&#39;httpController&#39;,function ($scope,$http){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $scope.postBtn = function (){</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //向服务器发送post请求</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $http({</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url : &quot;index/postReqTest.php&quot;, //请求路径</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; method : &quot;POST&quot;, //请求方式</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data : { userName : &quot;张三&quot; , password : &quot;123456&quot;} //要发送到服务器的数据</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }).success(function (data){ //成功之后执行的code</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $scope.responseDataByPost = data.result;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }).error(function (){ //失败之后执行的code</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(&quot;failed&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; angular.bootstrap(document.getElementById(&quot;httpApp&quot;),[&quot;httpApp&quot;]);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp; angular.bootstrap(document.getElementById(&quot;httpApp2&quot;),[&quot;httpApp2&quot;]);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &lt;/script&gt;</p>\r\n</div>\r\n\r\n<p><span style=\"color:#B22222\">*在这里需要特别注意的是：</span></p>\r\n\r\n<p><span style=\"color:#B22222\">因为目前单页存在两个ng-app，那么AngularJS在页面加载时只会默认启动第一个ng-app，后面的ng-app就需要手动去加载了。注意到内部脚本区域的最后两行，这里采用了angular.bootstrap()方法来手动启动两个app，此方法的第一个参数表示这个app是哪一个div，换句话说是指定这个App的区域；此方法的第二个参数是加载的这个模块的名称；</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"color:#B22222\">注意get请求和post请求回发数据的函数中默认的参数：</span></p>\r\n\r\n<p><span style=\"color:#B22222\">$http.get()方法中，服务器向客户端回发数据的形参为response；</span></p>\r\n\r\n<p><span style=\"color:#B22222\">$http.post()方法中，服务器向客户端回发数据的形参为data，和jQuery一样。</span></p>\r\n',NULL,'Angular JS学习笔记','Chrome 50','Mac'),(14,'2016国庆有感',6,1,'2016-10-02 11:14:28','120.76.131.230',NULL,33,0,'正常','个人日记','<p>&nbsp; &nbsp;现在是2016年10月1日，前天刚刚坐飞机回太原。想想我在杭已经待了半年有余了，真不敢想象我居然会在一个陌生的南方大城市待这么久。当初准备离开太原的时候，我妈妈就很反对，在本地找一个工作就不行吗？非要跑那么大老远，很不放心啊&hellip;&hellip;诸如此类的话，我已经听了N多遍，但最后我还是坚持了我的选择，去沿海城市去发展。自己还小，希望自己多接触一些新事物，遇见一些新机遇，世界那么大，为什么不出去走走而非要恋家待在家乡呢？</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;我和大多数95后一样，在家是小皇帝，父母惯着宠着，含在嘴里怕化了，捧在手里怕碎了，我又是家里唯一的男丁，所以这种无形的溺爱在我很小的时候就形成了。我爸还好，尤其是我妈，小时候就算是出门和楼下的小孩子玩，到下午五六点的时候都要打开窗户叫我的名字，喊我回家吃饭，如果我没有应答，我妈会直接拿着棍子冲到楼下，找到我之后跟我算账&hellip;&hellip;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;所以刚离开家到一个陌生城市的时候，心里总会有莫名的空虚和慌张，感觉这里的一切都不属于我，一切都是灰色的，没有街坊邻里的那种温情。有时候真的很喜欢北京四合院胡同里的那种氛围，这家做好菜了感觉不错，送给那家对门一点尝尝；没事的时候互相串串门，唠唠家常，邻里之间非常和谐融洽。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;不过要明确的一点是，既然选择了远离家乡远赴他乡工作，那么就是来受苦的，来学习的，不是来享受甚至不是来养老的。心理问题必须要克服，这是成长必须要过的一道坎。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;来杭州之后，没有顾得上休息，赶紧约各种面试。当时还是2月多，刚过完春节不久，还没过元宵节，这个时间上班的公司都还不太多，HR还都没有大批量的招人，所以只能是自己上各种招聘网站寻找招聘源，整整跑了一星期，在我印象中都去过留下、沈半路、滨江、文二路、九堡、紫金港路、杭州湾信息港等这些地方。当时就想着自己没有什么经验，如果有公司能留下我那我就去，也没有其他要求了。然后找了一家还不错的公司，一直到现在。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;平时工作不忙的话我会搞一些&ldquo;副业&rdquo;，比如做个网站什么的，巩固并提升一下自己的技术水平。光是买书干巴巴的看却没有立即把这些理论知识放到代码中实现一下，是没有多大用处的。有时候看书或者看视频的时候连连点头，一到自己操作的时候就问题百出，其实蛮头痛的。说到底还是自己解决问题的能力不够强，知识之间的断层比较严重。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;有时候自己也会偷懒，或者是生活上有各种事情导致心里很烦无心看书学习，其实时间就这样过去了，真的希望把这些时间都利用起来，让自己提升的快一点。另外，我还是不太喜欢工作占据生活内容太多。如果能有余下的时间来学习自己安排的新知识，那就太好了。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;对于工作中遇到的一些问题也在及时的记录和总结，千万别小看了这些东西，这要比你在学校里学的宝贵的多。从实习生到老码农的转变是痛苦的，是漫长的。在转变过程中，你会遇到各种奇葩的问题，这些问题有可能连工作了很多年的老鸟都解决不了，但如果这个问题最终都解决之后，那么你就成长了很多，所以说经验和阅历比钱还值钱，因为它们本身就是一种无形的巨资，这笔巨资需要你在年轻的时候慢慢积攒，到一定时机的时候取出来用，你将会受益无穷。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;比如我遇到的经典奇葩问题就是Cache（缓存），有时候真的是被这哥们折腾的体无完肤的。明明就是没有问题，然后效果就是出不来，清理工具缓存也不行，最后逼的我没辙了，用360清理电脑后重启，一切正常了。这种问题也说不上来，只能怪现代操作系统的体系结构太庞杂了，然后JVM又是一个与Windows NT毫不相关的更为复杂的体系结构，发生这种问题的可能性也不是一定为0。</p>\r\n',NULL,'国庆节个人有感，抒发情感篇～','Chrome 50','Mac'),(16,'使用jQuery解析XML文件',5,1,'2016-10-31 15:23:35','120.76.131.230',NULL,7,0,'正常','jQuery XML','<h2><span style=\"font-family:arial,helvetica,sans-serif\"><strong>搭建开发环境</strong></span></h2>\r\n\r\n<p>建立一个Web Project、引入jQuery基础类库并建立一个XML文件，内容如下：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>\r\n\r\n<p>&lt;Students&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Student&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Name&gt;Steve Jrong&lt;/Name&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Age&gt;20&lt;/Age&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Height&gt;171&lt;/Height&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Weight&gt;50&lt;/Weight&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;NickName&gt;Cute Baby&lt;/NickName&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tags&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tag&gt;Fat&lt;/Tag&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tag&gt;Beautiful&lt;/Tag&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tag&gt;Smile&lt;/Tag&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Tags&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Student&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Student&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Name&gt;San Zhang&lt;/Name&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Age&gt;23&lt;/Age&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Height&gt;182&lt;/Height&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Weight&gt;65&lt;/Weight&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;NickName&gt;Bad Son&lt;/NickName&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tags&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tag&gt;Thin&lt;/Tag&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tag&gt;Ugly&lt;/Tag&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Tag&gt;Broken Heart&lt;/Tag&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Tags&gt;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Student&gt;</p>\r\n\r\n<p>&lt;/Students&gt;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>内容表示为：学生集合中有两个学生，它们都有Name、Age、Height、Weight、NickName和Tags这些属性，并且Tags属性下有多个子节点。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>关键代码</strong></h2>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>$.get(&quot;&lt;%=basePath%&gt;demo.xml&quot;,function (data){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //从根节点的下一级节点查找遍历</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(data).find(&quot;Student&quot;).each(function (){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var result = &quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //姓名。使用find()方法查找这个节点下的子节点，然后使用text()方法获取这个节点的值</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var userName = $(this).find(&quot;Name&quot;).text();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //身高</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var userHeight = $(this).find(&quot;Height&quot;).text();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //体重</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var userWeight = $(this).find(&quot;Weight&quot;).text();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //昵称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var userNickName = $(this).find(&quot;NickName&quot;).text();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = &quot;姓名：&quot;+userName+&quot;\\n身高：&quot;+userHeight+&quot;\\n体重：&quot;+userWeight+&quot;\\n昵称：&quot;+userNickName+&quot;\\n个人标签：&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //如果节点下还有子节点，那么以这个节点为基准向下遍历</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(this).find(&quot;Tags&quot;).each(function (){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //个人标签</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var userTag = $(this).find(&quot;Tag&quot;).text();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result+=userTag;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(&quot;#parisedResult&quot;).append(result);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201610/0721d190-7d02-4b10-bc7a-4cd1e8f885e27.jpg\" style=\"height:173px; width:500px\" /></p>\r\n',NULL,'前些天有朋友在做微信相关的开发，短信验证时遇到了问题，服务器返回了XML格式的字串，使用jQuery却怎么也无法解析。今天写个小示例记录一下。','Chrome 45','Microsoft Windows 10'),(17,'Require JS学习笔记（一）',5,1,'2016-11-01 18:19:37','60.177.185.55',NULL,14,0,'正常','Require JS','<h2><strong>搭建开发环境</strong></h2>\r\n\r\n<p>MyEclipse中建立一个Web Project：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/f296779a-0427-4179-b49f-bb623dc9c38c0.png\" style=\"height:361px; width:264px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>然后到Require JS官网下载require.js文件（下载地址：http://requirejs.org/docs/release/2.3.2/minified/require.js）并引用到页面中。引入方式：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;script data-main=&quot;resources/js/main&quot; src=&quot;resources/js/require.js&quot;&gt;&lt;/script&gt;</p>\r\n</div>\r\n\r\n<p>*data-main表示当加载完require.js文件后立即加载的文件。这里我定义了一个main.js文件，用于公共定义所有模块的JS文件；</p>\r\n\r\n<p>data-main后引用JS文件时，可以省略文件的.js后缀，require.js已默认加载js文件。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>另一种引入方式：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>&lt;script data-main=&quot;resources/js/main&quot; src=&quot;resources/js/require.js&quot; defer async=&quot;true&quot;&gt;&lt;/script&gt;</p>\r\n</div>\r\n\r\n<p>*defer async = true表示以异步的方式加载文件。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立a.js、b.js、c.js、index.js和main.js三个文件。内容分别如下：</p>\r\n\r\n<p>a.js内容：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>define(function(){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;This is a!&quot;);</p>\r\n\r\n<p>});</p>\r\n</div>\r\n\r\n<p>此文件定义了一个弹框，内容为&ldquo;This is a!&rdquo;。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>b.js内容：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>define(function(){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; calcB = function (b1,b2){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return b1*b2;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>});</p>\r\n</div>\r\n\r\n<p>此文件定义了一个带两个参数的乘法函数，根据两个参数求积并返回结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>c.js内容：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>define(function(){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; calcC = function (c1,c2){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return c1+c2;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>});</p>\r\n</div>\r\n\r\n<p>此文件定义了一个带两个参数的加法函数，根据两个参数求合并返回结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>index.js内容：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>require([&#39;jquery.min&#39;,&#39;b&#39;,&#39;c&#39;],function (){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(&quot;#result&quot;).text(5+&quot; x &quot; + 8 + &quot; = &quot; + calcB(5, 8));</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(&quot;#result&quot;).append(&quot;&lt;br/&gt;&lt;span&gt;&quot;+5+&quot; + &quot; + 8 + &quot; = &quot; + calcC(5, 8) +&quot;&lt;/span&gt;&quot;);</p>\r\n\r\n<p>});</p>\r\n</div>\r\n\r\n<p>此文件定义了主页的个性化js文件，调用b.js和c.js两个文件中的函数进行计算，返回结果并显示在DOM上。</p>\r\n\r\n<p><strong>* require()</strong><strong>函数接受两个参数，前一个参数为数组，用于声明此函数所依赖的模块。如果此文件上面未定义require.config()</strong><strong>而只是一个单独引用的文件，那么模块名称应该写根路径下的文件名。比如本例中根路径为resources/js/</strong><strong>，那么我想加载jquery</strong><strong>模块，就应该写jquery.min</strong><strong>（仍可省略.js</strong><strong>后缀名）；</strong></p>\r\n\r\n<p><strong>如果此文件上面已定义require.config()</strong><strong>函数，那么这里的模块名直接写paths</strong><strong>中Key</strong><strong>的名称就可以了。</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>详细讲解</strong></h2>\r\n\r\n<p>main.js文件内容：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>require.config({</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baseUrl : &#39; resources/js&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; paths:{</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;jquery&#39;:&#39;jquery.min&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;zhangsan&#39;:&#39;a&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;lisi&#39;:&#39;b&#39;,</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;wangwu&#39;:&#39;c&#39;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>});</p>\r\n</div>\r\n\r\n<p>*这里使用require.config配置了模块和文件所在的位置；</p>\r\n\r\n<p>*baseUrl表示所有文件的基目录，配置了这个目录，那么查找所有文件都从这个目录下开始查找；</p>\r\n\r\n<p>*paths下面是定义每一个模块和文件的位置，Key（如&#39;jQuery&rsquo;）表示这个模块的名称，可以随便定义为你想要的名字，当然越简短越好；Value（如&rsquo;jquery.min&rsquo;）表示这个模块所在的文件位置，可以省略.js，因为require.js已经默认加载js后缀的文件了。</p>\r\n\r\n<p><br />\r\n总体执行流程：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/f9ecb864-b8ef-49e0-a863-c04a8b10de9d5.png\" style=\"height:122px; width:500px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/4caa276f-21e2-48a6-aa7f-5b0eb3711b868.png\" style=\"height:292px; width:600px\" /></p>\r\n',NULL,'随着项目越来越大，界面特效越来越绚丽，体验也越来越好的同时，带来的困扰就是Java Script文件也越来越多了。传统的方式是页面上直接引用外部Java Script文件，但文件一旦多起来以后会带来很多问题：它们必须按照一定的顺序从上到下依次加载；如果其中有一个JS出现问题那么之后的Java Script文件都无法正常加载；文件越来越多，加载速度越来越慢，长时间的加载进程导致页面变白假死，体验非常差。那么今天就小结一下Require JS这一利器的使用。','Chrome 45','Microsoft Windows 10'),(21,'notify()、notifyAll()和wait()方法详解',7,1,'2016-11-26 14:24:21','219.82.212.170','2016-11-26 14:26:32',21,0,'正常','多线程','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>notify()方法只会唤醒一个等待当前对象的线程，并使得这个处于等待中的线程开始执行。如果这个对象有多个需要唤醒的线程，那么调用此方法也只会唤醒其中一个线程，不会唤醒多个。当然，具体是唤醒其中哪一个，这个是取决于当前操作系统对线程的管理机制的。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>notifyAll()方法正好了notify()方法相反，如果这个对象有多个需要唤醒的线程，调用notifyAll()方法会唤醒等待当前对象的所有待唤醒的线程。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>wait()方法是用于使得某一对象进入等待状态的方法。wait()方法有三个重载的方法：wait()无限期等待；wait(long timeout)当前线程被唤醒的等待时间；wait(long timeout,int nanos)。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>这里我们形象的比喻一下：把处于等待状态的线程比喻成消费者（他们需要被别人唤醒，需要一个触发点，属于被动方），把发送通知的线程比喻成生产者（消费者需要发送通知之后才能被唤醒，属于主动方）。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码实现</strong></h2>\r\n\r\n<p>建立一个消息Bean：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 消息Bean</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Message {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private String msg;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String getMsg() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return msg;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void setMsg(String msg) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.msg = msg;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Message(String msg) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.msg = msg;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立一个消费者类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 等待者类（消费者）</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Waiter implements Runnable {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Message msg;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Waiter(Message msg) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.msg = msg;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String currentThreadName = Thread.currentThread().getName();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; synchronized (msg) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 开始等待！[&quot; + currentThreadName + &quot;][&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + new SimpleDateFormat().format(new Date(System.currentTimeMillis())) + &quot;] -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg.wait();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 消息内容：&quot; + msg.getMsg() + &quot; -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立一个生产者类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 通知者类（生产者）</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Notifier implements Runnable {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Message msg;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Notifier(Message msg) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.msg = msg;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String currentThreadName = Thread.currentThread().getName();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(5000);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; synchronized (msg) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 通知！[&quot; + currentThreadName + &quot;][&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + new SimpleDateFormat().format(new Date(System.currentTimeMillis())) + &quot;] -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg.notify();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立一个测试类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 测试类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Test {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Message msgOfZhangSan = new Message(&quot;你好，我是张三！&quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 张三这名消费者</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Waiter waiterOfZhangsan = new Waiter(msgOfZhangSan);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Thread(waiterOfZhangsan, &quot;消费者张三&quot;).start();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //张三又作为第二个消费者</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Waiter waiterOfZhangsan2 = new Waiter(msgOfZhangSan);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Thread(waiterOfZhangsan2, &quot;消费者张三&quot;).start();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 适用于张三这名消费者的生产者</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Notifier notifier = new Notifier(msgOfZhangSan);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Thread(notifier, &quot;适用于张三的生产者&quot;).start();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n先在Notifier类中使用notify()方法，控制台输出如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/43ceebc6-3db4-42ec-bb6e-b86363742ddd2.png\" style=\"height:137px; width:616px\" /></p>\r\n\r\n<p>那么现在要注意Test类中，实例化了两个张三这个消费者对象他们共同持有一个Message对象，实例化了一个张三的生产者，控制台只打印出了一个消息内容，这说明拥有两个同一对象的待唤醒的线程，程序只唤醒了一个，另一个还未被唤醒。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>现在改一下Notifier类中的notify()方法，改成notifyAll()方法，控制台输出如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/bdeb4b28-3ee2-4b48-89c2-79a0a0600e1c5.png\" style=\"height:137px; width:709px\" /></p>\r\n\r\n<p>改用了notifyAll()方法之后，唤醒了两个处于等待状态的线程，输出了两条消息内容。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>要注意的是：</p>\r\n\r\n<ol>\r\n	<li>必须是持有同一个对象，才能看的出区别，即在本例中必须持有同一个Message对象才可以；</li>\r\n	<li>生产者对于此对象，必须要使用synchronized关键字来获取到当前对象的监视器：</li>\r\n</ol>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p><strong>synchronized</strong> (msg) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; System.<strong><em>out</em></strong>.println(&quot; -- 通知！[&quot; + currentThreadName + &quot;]</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; [&quot;+ <strong>new</strong> SimpleDateFormat().format(<strong>new</strong> Date(System.<em>currentTimeMillis</em>())) + &quot;] -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// msg.notify();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg.notifyAll();</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>如果这里不使用synchronized关键字，则会抛出IllegalMonitorStateException异常：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/5d48414b-8abc-4752-9b77-13c936c7978a0.png\" style=\"height:198px; width:659px\" /></p>\r\n',NULL,'最近在看多线程，notify()、notifyAll()和wait()方法正好都是Object类的方法，平时虽说用不到他们，但是只要研究多线程，他们三个必须要明白。今天写了Demo，顺便在这里总结一下。','Chrome 45','Microsoft Windows 10'),(24,'多线程设计模式之Future模式',7,1,'2016-11-29 21:22:31','58.100.182.144',NULL,9,0,'正常','多线程设计模式','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>多线程环境，两个线程，其中一个线程依赖于另一个线程，串行执行才能达到目的，那么一个线程要等待另一个线程执行完毕后这个线程才能继续执行。Future模式在于后一个线程无需等待前一个线程的结果，这个时间可以去做其他的任务，同时给出一个Future，直到前一个线程有结果了再去取实际的结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>核心思想</strong></h2>\r\n\r\n<p>线程的执行无需互相等待，先给出一个虚拟的值，然后去执行其他任务，当有了实际值后再取实际的值。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>应用场景</strong></h2>\r\n\r\n<p>例如下订单。下订单之后先返回到客户端一个订单号（构造很快），然后服务器去处理其他的任务，同时开始一个新线程去处理订单内的商品（构造很慢），等商品都构造好之后再返回给客户端或者直接进行后续的处理。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码实现</strong></h2>\r\n\r\n<h3><strong>使用自定义类自实现</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Client类，模拟客户端：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* Client客户端类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Client {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 客户端的请求方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param str</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字符串</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Data request(final String str) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 实例化一个虚拟数据类的对象</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final FutureData fData = new FutureData();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 关键之处在这里：我们实例化一个虚拟数据对象是给客户端造成一种类似的&ldquo;假象&rdquo;，表示服务端在处理，但至于什么时候处理完并不清楚</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 此时就新开一个线程去真正的处理真实的数据</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 新创建一个线程去处理真实的数据</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Thread() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 实例化真实数据类的对象，并将字符串参数传入</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RealData rData = new RealData(str);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这一步，虚拟数据对象会携带已经获得的真实数据来判断（notify()、wait()）什么时候开始唤醒线程来返回结果</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fData.setrData(rData);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }.start();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 虽然实例化了一个虚拟数据类的对象，但不需要做任何操作，直接返回</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return fData;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Data接口，用于输出数据而用：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 通用数据输出接口</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public interface Data {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 通用获取结果的方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String getResult();</p>\r\n\r\n<p>}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立FutureData虚拟数据类。它是对RealData的一个包装，封装了获取真实数据的等待过程。实现了数据输出接口：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* FutureData虚拟数据类，是对RealData的一个包装，封装了获取真实数据的等待过程。实现了数据输出接口</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class FutureData implements Data {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 真实数据对象</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected RealData rData = null;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 是否准备好的标识符</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 说明：为什么要用这个标识符？</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* isReady默认赋值为false，表示默认未准备好，getResult()中已经判断过如果状态为false就一直等待，且同步方法setrData</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* ()中也是同样条件，为false才执行后面赋值和通知唤醒的代码。如果为true了说明不是&ldquo;等待-通知&rdquo;的情况，所以要排除为true的情况。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected boolean isReady = Boolean.FALSE;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 设置真实数据的方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param rData</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public synchronized void setrData(RealData rData) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 如果isReady为true，不执行</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (isReady) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 否则isReady为false，设置当前类的真实数据为已经获取到的真实数据；设置isReady为true并通知唤醒所有等待此对象的线程</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.rData = rData;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isReady = Boolean.TRUE;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyAll();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 获取结果的方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String getResult() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 如果isReady为false，那么就一直等待其准备好之后返回最终结果</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (isReady == false) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 等待，直到唤醒后才执行return rData.result;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wait();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return rData.result;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立RealData真实数据类，实现了数据输出接口：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* FutureData真实数据类，实现了数据输出接口</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class RealData implements Data {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 结果变量</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected String result;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 真实数据构造函数，用于处理实际业务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param para</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public RealData(String para) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringBuffer sb = new StringBuffer();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sb.append(para);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(100);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = sb.toString();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 无参构造函数</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public RealData() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 获取结果的方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String getResult() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Main类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 请求入口类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Main {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 方法入口，用于调用Client客户端来发起请求</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param args</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 实例化一个客户端对象</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Client client = new Client();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 发起请求，参数为&ldquo;name&rdquo;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data data = client.request(&quot;name&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 请求完毕。 -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里使用线程休眠2000ms来模拟其他任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(2000);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 输出上一个未完成任务的结果</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 后期返回的真实数据： &quot; + data.getResult() + &quot;-- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>效果展示</strong></h3>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/2d17d599-a48e-4f70-bb85-7f7233d7bb6a9.png\" style=\"height:90px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>使用系统框架自实现</strong></h2>\r\n\r\n<p>建立RealData真实数据类，实现了Callable接口：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 真实数据类。实现了Callable接口</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class RealData implements Callable&lt;String&gt; {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private String para;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 单参构造函数，将para传入以便在call()方法中处理业务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param para</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public RealData(String para) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.para = para;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String call() throws Exception {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里模拟真实的业务逻辑</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringBuffer sb = new StringBuffer();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sb.append(para);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(500);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sb.toString();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Main类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 入口类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Main {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 方法入口</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param args</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @throws ExecutionException</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @throws InterruptedException</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws InterruptedException, ExecutionException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 构造FutureTask，构造函数的参数必须是实现了Callable&lt;&gt;接口的类</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FutureTask&lt;String&gt; futureTask = new FutureTask&lt;String&gt;(new RealData(&quot;a&quot;));</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 建立一个容量固定为5的线程池</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExecutorService executorService = Executors.newFixedThreadPool(5);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 提交请求[&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(System.currentTimeMillis())) + &quot;] -- &quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 将任务提交给FutureTask去执行</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; executorService.submit(futureTask);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 请求完毕[&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(System.currentTimeMillis())) + &quot;] -- &quot;);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里休眠线程模拟执行其他任务的过程</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 去执行其他任务 -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里使线程休眠2000ms来模拟处理其他任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(2000);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里就是最开始的futureTask变量最终返回的真实数据，如果call()方法没有执行完成，这里会一直等待它执行完成后才会输出这里的真实数据</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 请求返回的数据[&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(System.currentTimeMillis())) + &quot;]：&quot;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + futureTask.get() + &quot; -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<h3><br />\r\n<strong>效果展示</strong></h3>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/9f1d1a14-cd05-4f9a-849a-8f3d1c5793512.png\" style=\"height:115px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n',NULL,'今天来总结一下多线程设计模式的另一种模式：Future模式。','Chrome 50','Microsoft Windows 10'),(25,'多线程设计模式之Guarded Suspension模式',7,1,'2016-11-29 21:28:34','58.100.182.144',NULL,20,0,'正常','多线程设计模式','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>顾名思义，Guarded Suspension即&ldquo;保护悬挂&rdquo;，程序中一般称为&ldquo;保护暂停&rdquo;。当服务器的处理能力小于客户端请求数量时，需要考虑采用此模式来缓解服务器瞬时处理压力，达到&ldquo;有请求处理请求，无法处理先暂存，可以处理了再继续处理剩余&rdquo;的目的。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>核心思想</strong></h2>\r\n\r\n<p>对于超出服务器处理能力外的线程，先挂起暂存，处理完当前的有空再去处理其他的。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>应用场景</strong></h2>\r\n\r\n<p>Guarded Suspension模式一般用于服务端处理能力有限，但是客户端请求数量又有可能在同一时间段内激增的情况下。如果只是按照普通方式来处理，要么丢失了客户端的请求，要么严重的会让服务器不堪压力宕机。这时候，我们就使用一个请求队列，来存放服务端暂时处理不了的请求，等待服务端有空闲线程之后，再从这个暂存队列中依次取出处理。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码实现</strong></h2>\r\n\r\n<p>建立RequestQueue类，用于维护客户端发出的请求的列表集合：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 维护Request请求列表的类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class RequestQueue {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private LinkedList queue = new LinkedList&lt;&gt;();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 获得队列中请求的方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 使用synchronized是要锁住queue队列中的每一个实例，因为要wait()、notifyAll()和notify()</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 等多线程操作是需要获取到当前对象的监听器的， 必须要使用synchronized关键字</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public synchronized Request getRequest() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (queue.size() == 0) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 如果队列里一直没有请求，那么一直等待，直到有新的请求加入进来</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wait();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 返回Request队列中的第一个请求（LinkedList的remove()方法返回列表的头，即第一个元素，获取到同时删除）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (Request) queue.remove();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 将请求添加到请求队列当中去</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 使用synchronized是要锁住queue队列中的每一个实例，因为要wait()、notifyAll()和notify()</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 等多线程操作是需要获取到当前对象的监听器的， 必须要使用synchronized关键字</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param request</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public synchronized void addRequest(Request request) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 添加一个新请求到请求队列中</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; queue.add(request);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 通知到等待这个对象的所有处于wait()状态的线程</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyAll();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立ClientThread类，模拟客户端：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 客户端进程类，用于发出请求</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ClientThread extends Thread {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private RequestQueue requestQueue;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ClientThread(RequestQueue requestQueue, String name) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(name);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.requestQueue = requestQueue;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 重写的run()方法，客户端处理实际业务的地方</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Request request = new Request(&quot;客户端请求编号:&quot; + i + &quot;\\t线程名称:&quot; + Thread.currentThread().getName());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- &quot; + Thread.currentThread().getName() + &quot; requests &quot; + request + &quot; -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requestQueue.addRequest(request);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里模拟客户端的线程休眠10ms，明显要比服务端的100ms要快，服务器要在短时间之内接受比自身处理峰值还要多和快的请求</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(10);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- ClientThread名称:&quot; + Thread.currentThread().getName() + &quot; -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- &quot; + Thread.currentThread().getName() + &quot; 请求完毕。 -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立ServerThread类，模拟服务器：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 服务器端进程类，用于接受请求</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ServerThread extends Thread {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private RequestQueue requestQueue;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ServerThread(RequestQueue requestQueue, String name) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(name);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.requestQueue = requestQueue;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 重写的run()方法，服务端处理实际业务的地方</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这个while循环怎么跳出？其实完全不需要。因为requestQueue对象里的getRequest()方法中，最后返回的值是requestQueue队列中的第一个元素，同时删除这个元素。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 当这个队列里都处理完，也就是都删除完之后，队列里就没有任何元素了，那么再调用requestQueue对象里的getRequest()方法时，会走if判断，没有元素又继续进入了等待状态，所以这里的while条件写Boolean为true这个永远成立的条件。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (Boolean.TRUE) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 从队列中得到请求</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final Request request = requestQueue.getRequest();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里模拟服务端的线程休眠100ms，明显要比客户端的10ms要慢，所以有可能一下子服务器不能处理的完</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(100);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- [&quot; + Thread.currentThread().getName() + &quot; 进行处理 &quot; + request + &quot;] -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Request类，用于封装所携带的请求：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* Request类，是一个POJO对象，封装了请求的内容</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Request {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private String name;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String getName() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return name;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Request(String name) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String toString() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;[请求名称:&quot; + name + &quot;]&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Main类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 入口类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 说明：多线程设计模式之保护暂停模式：客户端发起了多于服务器处理峰值的请求，这时候会造成服务器短期内接受很多请求，如果不作处理，轻者丢失请求，</p>\r\n\r\n<p>&nbsp;* 重者服务器直接宕机。</p>\r\n\r\n<p>&nbsp;* 使用这种设计模式是为了缓解请求过多的问题。如果请求过多，多余未能及时处理的请求先暂存于请求队列（RequestQueue）中，等服务器有空闲线程了，</p>\r\n\r\n<p>&nbsp;* 再从队列中逐个取出进行处理。 这样做的好处是既不用担心丢失请求，又不用在同一时刻内服务器接受海量请求而发生异常的问题。</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Main {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 方法入口</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param args</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RequestQueue requestQueue = new RequestQueue();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ServerThread(requestQueue, &quot;ServerThread请求&quot; + i).start();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ClientThread(requestQueue, &quot;ClientThread请求&quot; + i).start();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<h2>&nbsp;</h2>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>刚开始，客户端向服务器发起了10个请求，控制台部分内容打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/017fee13-7052-48bc-815a-c59b493366d82.png\" style=\"height:331px; width:600px\" /></p>\r\n\r\n<p><br />\r\n执行一会后，服务端开始处理客户端发来的请求，控制台部分内容打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/1d5f43c5-9ae8-4025-ad69-1b5e17803cb94.png\" style=\"height:314px; width:600px\" /></p>\r\n\r\n<p>红线以下的位置就表示服务器已开始处理请求（图片受限，红线上半部分也有处理）。因为多线程环境下无法保证执行顺序，所以请求的执行顺序也是不唯一的。</p>\r\n\r\n<p>&nbsp;</p>\r\n',NULL,'顾名思义，Guarded Suspension即“保护悬挂”，程序中一般称为“保护暂停”。今天来总结一下Guarded Suspension模式。','Chrome 50','Microsoft Windows 10'),(27,'多线程设计模式之Master-Worker模式',7,1,'2016-11-29 21:40:34','58.100.182.144',NULL,24,0,'正常','多线程设计模式','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>Master意为&ldquo;主管&rdquo;，在这里形象比喻为&ldquo;管理者&rdquo;，他并不做实际的事情，主要的职责是分配任务，汇总结果；Worker意为&ldquo;工作者&rdquo;，他来做实际的事情，主要的职责是处理实际业务，解决实际问题。Master将大任务划分为一个个小任务，Worker多线程处理完小任务之后Master汇总得到最终结果并返回。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>核心思想</strong></h2>\r\n\r\n<p>利用多线程，将任务划分为一个个子任务，异步处理并返回结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>应用场景</strong></h2>\r\n\r\n<p>要执行很庞大的运算或者处理很庞大的任务，如计算1~100的立方和。我们可以把这个庞大的任务应用Master-Worker模式，计算1~100每一个数字的立方，计算出来一个就马上去汇总一个，最后得出最终结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码实现</strong></h2>\r\n\r\n<p>建立Master类，用于子任务分配和结果合成：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* Master类，用于任务分配和处理结果合成</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Master {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 所有任务队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected Queue&lt;Object&gt; workQueue = new ConcurrentLinkedQueue&lt;Object&gt;();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Worker进程队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected Map&lt;String, Thread&gt; threadMap = new HashMap&lt;String, Thread&gt;();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 子任务处理结果集</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected Map&lt;String, Object&gt; resultMap = new ConcurrentHashMap&lt;String, Object&gt;();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 判断是否所有的子任务都处理完成了</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public boolean isComplete() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (Map.Entry&lt;String, Thread&gt; entry : threadMap.entrySet()) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (entry.getValue().getState() != Thread.State.TERMINATED) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Boolean.FALSE;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Boolean.TRUE;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Master类初始化方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param worker</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param countWorker</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Master(Worker worker, int countWorker) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worker.setWorkQueue(workQueue);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worker.setResultMap(resultMap);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 传入的参数countWorker用来控制需要用几个线程分解这个大任务来进行计算</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; countWorker; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; threadMap.put(Integer.toString(i), new Thread(worker, Integer.toString(i)));</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 提交任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param job</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void submit(Object job) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; workQueue.add(job);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 返回子任务处理结果集</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Map&lt;String, Object&gt; getResultMap() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return resultMap;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 开始运行所有worker队列中的任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void execute() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (Map.Entry&lt;String, Thread&gt; entry : threadMap.entrySet()) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; entry.getValue().start();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Worker类，处理子任务：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* Worker类，用于实际处理任务</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Worker implements Runnable {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 任务队列，用于取得子任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected Queue&lt;Object&gt; workQueue;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 子任务处理结果集</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected Map&lt;String, Object&gt; resultMap;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void setWorkQueue(Queue&lt;Object&gt; workQueue) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.workQueue = workQueue;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void setResultMap(Map&lt;String, Object&gt; resultMap) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.resultMap = resultMap;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 子任务处理逻辑，在子类中实现具体的逻辑</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param input</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Object handle(Object input) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return input;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (Boolean.TRUE) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- [&quot; + Thread.currentThread().getId() + &quot;] -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 使用poll方法遍历集合中最顶端的元素，且删除这个元素</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object input = workQueue.poll();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 如果从集合中拿到的元素为空，即无法继续再拿到有效元素，则跳出循环结束执行</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null == input) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 会调用PlusWorker类中重写的handle()方法去计算m&sup3;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object re = handle(input);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 计算完成之后将结果填入子任务结果集中</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultMap.put(Integer.toString(input.hashCode()), re);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立PlusWorker类，来实现具体子任务的业务：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* Worker任务基类的扩展类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class PlusWorker extends Worker {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 任务，求一个数的m&sup3;。此方法重写了Worker类中的handle()方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Object handle(Object input) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer i = (Integer) input;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return i * i * i;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>建立Main类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 入口类</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 说明：多线程设计模式之Master-Worker模式：Master角色负责子任务的分配和最终结果的汇总，</p>\r\n\r\n<p>&nbsp;* Worker角色负责处理Master分配的一个个子任务。</p>\r\n\r\n<p>&nbsp;* 此模式的好处就是可以将一个庞大的任务分成一个个很小的子任务，同时利用多线程这个功能并发执行，提高系统性能。</p>\r\n\r\n<p>&nbsp;* Master和Worker的处理同时都是异步执行的，也就是说两者并不会因为互相等待而阻塞执行，两者的执行是互不干扰的。</p>\r\n\r\n<p>&nbsp;* 客户端一旦有请求过来，服务器的Master马上分配子任务（利用多线程）并立即返回（当然，这里的返回不是说立即返回给客户端，因为客户端需要的是最终汇总的结果</p>\r\n\r\n<p>&nbsp;* ），不会等到处理完全部再返回。你请求一个我马上就计算然后返回一个。</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Main {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 方法入口</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param args</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 这里使用5个独立线程处理计算</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Master master = new Master(new PlusWorker(), 5);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 分别提交100个子任务，分配给5个线程去处理</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 100; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 提交任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; master.submit(i);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 开始处理</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; master.execute();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 最终结果变量</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int re = 0;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 子任务处理的结果集</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map&lt;String, Object&gt; resultMap = master.getResultMap();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 当子任务计算的结果集里面有至少一个元素，不必等待全部子任务都完成，就可以开始汇总结果了</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 也就是说，一旦开始了子任务，那么worker也同时开始，两者同时工作，边计算子任务的同时边汇总结果</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (resultMap.size() &gt; 0 || !master.isComplete()) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set&lt;String&gt; keys = resultMap.keySet();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String key = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (String k : keys) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key = k;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer i = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null != key) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = (Integer) resultMap.get(key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 累加结果</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null != i) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; re += i;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 汇总完之后从集合中移除掉</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null != key) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultMap.remove(key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- 最终结果：&quot; + re + &quot; -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>计算结果控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201611/9c1c736e-2d9d-4a2a-9215-0bd3544cb56b8.png\" style=\"height:75px; width:600px\" /></p>\r\n',NULL,'今天来总结一下多线程设计模式的另一种模式：Master-Worker模式。','Chrome 50','Microsoft Windows 10'),(28,'RabbitMQ探险记（一）- 安装配置RabbitMQ',8,1,'2016-12-11 19:32:25','58.100.157.238',NULL,25,0,'正常','消息队列','<h2><strong>安装部署</strong></h2>\r\n\r\n<h3>Erlang：</h3>\r\n\r\n<p>由于RabbitMQ是基于Erlang语言开发的，所以需要去下载Erlang的运行环境。类似于Java的JVM一样。可以在Erlang官网下载到最新的版本（目前是19.1）：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>http://www.erlang.org/downloads</p>\r\n</div>\r\n\r\n<p>下载之后傻瓜安装完成即可。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>RabbitMQ Server：</h3>\r\n\r\n<p>Erlang环境安装完成之后就需要安装RabbitMQ服务器了。可以在其官网下载到最新的版本（目前是3.6.6）：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p><a href=\"http://www.rabbitmq.com/download.html\">http://www.rabbitmq.com/download.html</a></p>\r\n</div>\r\n\r\n<p>下载之后同样傻瓜安装完成后即可。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>配置环境</strong></h2>\r\n\r\n<p>系统环境变量中添加变量<strong>ERLANG_HOME</strong>，值为Erlang的安装目录，如：<strong>C:\\Program Files\\erl8.1</strong>。</p>\r\n\r\n<p>同时系统变量Path后追加：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>%ERLANG_HOME%\\bin;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>系统环境变量中添加变量<strong>RABBITMQ_SERVER</strong>，值为Erlang的安装目录，如：<strong>C:\\Program Files\\RabbitMQServer\\rabbitmq_server-3.6.6</strong>。</p>\r\n\r\n<p>同时系统变量Path后追加：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>%RABBITMQ_SERVER%\\sbin;</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>这里需要注意的是RabbitMQ的<strong>安装路径最好不要带有空格、中文或者其他特殊字符</strong>，否则在启动服务或者关闭服务时会出现错误。</p>\r\n\r\n<p>其中，<strong>ERLANG_HOME变量是必须配置</strong>的，否则在启动管理功能的时候会出现未定义ERLANG_HOME的异常信息而无法继续。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>配置RabbitMQ</strong></h2>\r\n\r\n<p>转到RabbitMQ安装目录下的sbin文件夹（例如我本机的路径为C:\\Program Files\\RabbitMQServer\\rabbitmq_server-3.6.6\\sbin），看到如下几个文件：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/b38fa93f-f699-48a0-986c-c5fd9a50c1f84.png\" style=\"height:205px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>此时以管理员的身份运行rabbitmq-server.bat文件来启动RabbitMQ的服务。启动成功后显示如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/c4005795-de2a-4f01-bd3c-1fab15f342770.png\" style=\"height:409px; width:600px\" /></p>\r\n\r\n<p>提示加载完成6个插件，代理也启动成功。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>打开命令提示符，转到RabbitMQ安装目录下的sbin文件夹（例如我本机的路径为C:\\Program Files\\RabbitMQServer\\rabbitmq_server-3.6.6\\sbin），使用如下命令安装管理功能：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>rabbitmq-plugins enable rabbitmq_management</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/8f4d498a-4294-4e84-93da-bfbedb27c88c2.png\" style=\"height:271px; width:600px\" /></p>\r\n\r\n<p>输入命令并回车后没有出现异常提示，则表示安装成功。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>此时在浏览器地址栏内输入以下地址即可看到RabbitMQ的网页端管理页面：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p><a href=\"http://localhost:15672/\">http://localhost:15672/</a></p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/cb516f5b-cfd3-4aa3-87d0-a3eb1734dd804.png\" style=\"height:452px; width:588px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>RabbitMQ的默认端口为15672，初始用户名和密码都为guest，登录后看到如下界面：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/75da7832-3095-4f71-95cc-2381972ce6137.png\" style=\"height:320px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>到此，RabbitMQ就已经安装并配置完成了。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>总结</strong></h2>\r\n\r\n<p>身为读者，觉得这篇博文没多少东西，很简单，就是安装然后简单的配置一下环境变量。但我在其中遇到的坑也要在这里记录一下。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>刚开始到Erlang官网下载64位Windows版本的OTP，速度奇慢，然后就百度了一个旧版本的DTP下载安装了，可能是因为我的RabbitMQ Server版本是最新的，版本过高，在配置环境的时候控制台报错说Erlang version too old，好在有提示，赶紧卸载了旧版本的OTP，去下载了一个新版本的，问题解决。</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>在使用rabbitmq-plugins enable rabbitmq_management命令安装管理功能的时候，控制台一直报如下的错：</li>\r\n</ul>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>Applying plugin configuration to rabbit@ DESKTOP-23PP4G5... failed.</p>\r\n\r\n<p>&nbsp;* Could not contact node rabbit@ DESKTOP-23PP4G5.</p>\r\n\r\n<p>&nbsp;&nbsp; Changes will take effect at broker restart.</p>\r\n\r\n<p>&nbsp;* Options: --online&nbsp; - fail if broker cannot be contacted.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --offline - do not try to contact broker.</p>\r\n</div>\r\n\r\n<p>然后去百度了，有人说是需要同步cookie，即把C:\\Windows目录下的.erlang.cookie文件和当前登录到的用户文件夹（例如我本机的是C:\\Users\\Steve Jrong）下的文件保持一致。然后去拷贝粘贴，发现问题依旧。</p>\r\n\r\n<p>后来有人说是路径问题，不能出现空格，然后发现安装路径里确实有一个目录带有空格。改掉之后卸载并重新安装了RabbitMQ的服务（services.msc），重启电脑后再使用命令一切正常，问题解决。</p>\r\n',NULL,'RabbitMQ是一个优秀的MQ（Message Queue）框架，虽然数据吞吐量不及KafKa，但是RabbitMQ支持事务和消息确认机制，适用于消息及时度高和高数据一致性的场景。他两者的设计初衷就不同，其实比没多大意义的。今天入门了一下RabbitMQ，在这里总结一下。','Chrome 45','Microsoft Windows 10'),(29,'RabbitMQ探险记（二）- Hello World',8,1,'2016-12-16 22:02:16','58.100.157.187','2016-12-16 22:03:43',2,0,'正常','消息队列','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>简单的生产者和消费者的数据操作大致如下：</p>\r\n\r\n<p>消息生产者（服务器端）创建连接工厂，根据连接工厂创建一个连接，再根据此连接创建一个频道，然后使用频道的queueDeclare()方法根据自定义的队列名创建一个队列，然后把自定义好的消息使用频道的basicPublish()方法发布到此频道中，最后关闭频道和连接，释放资源。</p>\r\n\r\n<p>消息消费者（客户端）创建连接工厂，根据连接工厂创建一个连接，再根据此连接创建一个频道，然后使用频道的queueDeclare()方法根据自定义的队列名关注一个已存在的队列，然后创建一个Consumer对象用来监听队列中的消息。一旦有消息在队列中，且队列名称是消费者关注的队列，那么这个消息就属于此消费者的，那么此消费者就应该接收到服务器端发来的这条消息。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码示例</strong></h2>\r\n\r\n<p>Constumer（消息消费者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 消息消费者类</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Constumer {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private final static String QUEUE_NAME = &quot;hello_world_queue&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] argv) throws Exception {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建一个新的连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明要关注的队列 -- 在RabbitMQ中，队列声明是幂等性的（一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同），也就是说，如果不存在，就创建，如果存在，不会对已经存在的队列产生任何影响。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueDeclare(QUEUE_NAME, false, false, false, null);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;] 消费者等待消息传入&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //DefaultConsumer类实现了Consumer接口，通过传入一个频道，告诉服务器我们需要那个频道的消息，如果频道中有消息，就会执行回调函数handleDelivery</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body, &quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]消费者接收到消息，消息内容为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自动回复队列应答 -- RabbitMQ中的消息确认机制，后面章节会详细讲解</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(QUEUE_NAME, true, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Producer（消息生产者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 消息生产者类</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class Producer {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private final static String QUEUE_NAME = &quot;hello_world_queue&quot;;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] argv) throws Exception {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建一个新的连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明一个队列 -- 在RabbitMQ中，队列声明是幂等性的（一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同），也就是说，如果不存在，就创建，如果存在，不会对已经存在的队列产生任何影响。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueDeclare(QUEUE_NAME, false, false, false, null);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = &quot;Hello World！&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //发送消息到队列中</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* basicPublish是发布消息的方法，第一个参数这里写成了&quot;&quot;（空字符串），表明使用了RabbitMQ的默认的匿名交换器；第二个参数是路由线索，表示将此消息发送到路由线索所对应的队列当中去</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes(&quot;UTF-8&quot;));</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]生产者发送消息，消息内容为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭频道和连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>先运行客户端类，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/57f13394-5b4a-4de0-b5dc-e043aca3a4f63.png\" style=\"height:151px; width:600px\" /></p>\r\n\r\n<p>客户端显示正在等待消息传入。如果服务端一直不发送消息，那么将会一直阻塞下去。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>再运行服务端类，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/1a7fdf28-450f-44a7-8c1e-9621616ed4487.png\" style=\"height:161px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>此时再切换到客户端类控制台下，打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/f2b148a3-d4bb-4671-9bba-e2d8d4b4490e3.png\" style=\"height:190px; width:574px\" /></p>\r\n\r\n<p>可以看到当服务端向队列里发送消息时，客户端立即接收到了消息。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>总结</strong></h2>\r\n\r\n<p>项目依赖的Jar包：</p>\r\n\r\n<p>RabbitMQ：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>amqp-client-4.0.0.jar</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>日志：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>log4j-1.2.16.jar</p>\r\n\r\n<p>slf4j-api-1.6.6.jar</p>\r\n\r\n<p>slf4j-log4j12-1.6.6.jar</p>\r\n\r\n<p>slf4j-simple-1.6.1.jar</p>\r\n</div>\r\n',NULL,'使用RabbitMQ框架模拟服务端和客户端收发消息的示例。以服务端发送“Hello World”文本消息和客户端接收“Hello World”文本消息为例。','Chrome 45','Microsoft Windows 10'),(30,'RabbitMQ探险记（三）- 发布和订阅',8,1,'2016-12-16 22:08:22','58.100.157.187',NULL,4,0,'正常','消息队列','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>一个消息生产者发布消息，这成为消息的&ldquo;发布&rdquo;；多个消费者都接收到这条消息，这条消息被多个消费者所消费，这便称为消息的&ldquo;订阅&rdquo;。</p>\r\n\r\n<p>此示例中我们创建一个日志消息的生产者，两个日志消息的消费者，日志生产者发布一条消息后会被两个日志消息消费者所消费掉。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码展示</strong></h2>\r\n\r\n<p>ProduceLog（生产日志信息，负责发送日志，是消息的生产者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 生产日志信息的类【负责发送日志】【生产者】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ProduceLog {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final Logger LOGGER = LoggerFactory.getLogger(ProduceLog.class);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的交换器名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;myExchange&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据自定义的队列名称创建一个分发类型的队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 第一个参数表示交换器的名称，第二个参数表示交换器规则，规则有4种，分别是direct直连、topic主题、header标题和fanout分发</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.FANOUT.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //开始分发消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 5; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = &quot;Atom &quot;+i+&quot;say: &ldquo;Hello World！&rdquo;&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(EXCHANGE_NAME, &quot;&quot;,null, message.getBytes());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]服务端开始分发消息，消息内容为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>ReceiveLogOne（消费日志信息）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 消费日志信息的类【消费者1】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ReceiveLogOne {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的交换器名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;myExchange&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关注一个自定义队列名称的分发类型的队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.FANOUT.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //从系统中随机获取一个队列的名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String queueName = channel.queueDeclare().getQueue();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将队列和分发器进行绑定</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueBind(queueName, EXCHANGE_NAME, &quot;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]日志消费者1 正在等待日志消息传入&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body,&quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]日志消费者1 接收到服务器发来的日志消息，消息内容为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消息确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(queueName, true, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>ReceiveLogTwo（消费日志信息）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 消费日志信息的类【消费者2】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ReceiveLogTwo {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的交换器名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;myExchange&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关注一个自定义队列名称的分发类型的队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.FANOUT.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //从系统中随机获取一个队列的名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String queueName = channel.queueDeclare().getQueue();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将队列和分发器进行绑定</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueBind(queueName, EXCHANGE_NAME, &quot;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]日志消费者2 正在等待日志消息传入&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body,&quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]日志消费者2 接收到服务器发来的日志消息，消息内容为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消息确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(queueName, true, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>先运行消费者1，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/f3a1bbe2-24b9-4f06-a762-2b86104e59ad9.png\" style=\"height:148px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>再运行消费者2，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/26c6349d-ca37-44d5-a7a6-81c3079b0d169.png\" style=\"height:155px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>接着在运行生产者，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/13aadbc4-5aec-4cae-ad67-dd37740081f30.png\" style=\"height:232px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>此时再转到消息消费者1的控制台下，显示：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/aa76a38a-9ac2-4a30-9f00-1367fb382d969.png\" style=\"height:228px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>此时在转到消息消费者2的控制台下，显示：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/93a0bbc3-9f7e-4e1c-aeea-0deb5ddbfecd6.png\" style=\"height:224px; width:600px\" /></p>\r\n\r\n<p>可以清楚的看到，刚开始开启了两个消费者，但队列里都没有对应的消息进来，所以一直在等待。当继续再运行生产者之后，两个消费者同时都接收到了5条一致的消息。</p>\r\n',NULL,'和上一节“Hello World”一样的，一个消息生产者发送一条消息，然后消息消费者接收这条消息，这是最基本的消息传递过程。现在我们来看生产者发布一条消息让多个消费者接收的例子。','Chrome 45','Microsoft Windows 10'),(31,'RabbitMQ探险记（四）- 工作队列',8,1,'2016-12-16 22:14:21','58.100.157.187',NULL,4,0,'正常','消息队列','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>主服务器将一个比较耗时的任务分摊给众多小服务器去处理，达到负载均衡的目的。如果小服务器不够，还可以继续增加2个、3个&hellip;&hellip;这样不仅不需要一直等待这个任务完成，分配完任务之后主服务器还可以处理更多的任务。而且由于分摊给诸多服务器共同处理，增加了任务处理速度和效率。</p>\r\n\r\n<p>此例中，我们创建一个工厂任务安排者类用于给子服务器分配任务，建立两个工人类来模拟子服务器。工厂任务类安排五个不同的任务分给这两个子服务器去执行。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码展示</strong></h2>\r\n\r\n<p>NewTask（工厂任务安排者，生产者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 工厂任务安排者类【生产者】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class NewTask {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String TASK_QUEUE_NAME = &quot;task_queue&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明一个持久化、非私有且非自动删除的队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 此种方式用于多个客户端共享指定队列名称的场景。此写法声明了一个已知名称、持久化、非私有且非自动删除的队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //开始给工人们分发任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 5; i++) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = &quot;Atom &quot;+i+&quot; make &ldquo;Move a big stone！&rdquo;&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(&quot;&quot;, TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]服务端为工人派发任务，任务为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>工人WorkerOne（消费者）类1：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 工人类【消费者1】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class WorkerOne {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String TASK_QUEUE_NAME = &quot;task_queue&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关注一个多客户端共享的自定义名称的队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]工人类1 正在等待任务派发者安排任务&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //每次从队列中获取数量，用于限制没有返回Ack成功消息的数目，避免在这个消费者身上积压过多未返回成功消息的任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicQos(1);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body, &quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]工人类1 已接收到任务，任务为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doWork(message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (Exception e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }finally {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消息处理完成后确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicAck(envelope.getDeliveryTag(), false);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]工人类1 已完成任务并已确认&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消息消费完成确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(TASK_QUEUE_NAME, false,consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 任务处理方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param message</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static void doWork(String message) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //这里暂停2.5秒钟模拟任务处理耗时</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(2500);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.currentThread().interrupt();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>工人WorkerTwo（消费者）类2：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 工人类【消费者2】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class WorkerTwo {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String TASK_QUEUE_NAME = &quot;task_queue&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关注一个多客户端共享的自定义名称的队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueDeclare(TASK_QUEUE_NAME, true, false, false, null);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]工人类2 正在等待任务派发者安排任务&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //每次从队列中获取数量，用于限制没有返回Ack成功消息的数目，避免在这个消费者身上积压过多未返回成功消息的任务</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicQos(1);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body, &quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]工人类2 已接收到任务，任务为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doWork(message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (Exception e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }finally {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消息处理完成后确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicAck(envelope.getDeliveryTag(), false);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+CommonUtil.getNowDate()+&quot;]工人类2 已完成任务并已确认&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消息消费完成确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(TASK_QUEUE_NAME, false,consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static void doWork(String message) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //这里暂停2.5秒钟模拟任务处理耗时</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(2500);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.currentThread().interrupt();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>先运行工人类1，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/5737c39a-b604-4072-9b71-b5d3f9bf12044.png\" style=\"height:131px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>再运行工人类2，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/7dd71298-3b55-439b-a892-24a82d4d7d918.png\" style=\"height:134px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>之后启动工厂任务安排者类，给这两个目前&ldquo;很闲&rdquo;的工人派发任务，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/cc3eb56b-b43c-4c4b-88ac-2d882a29492b7.png\" style=\"height:197px; width:600px\" /></p>\r\n\r\n<p>可以看到，工厂任务安排者一共有5个任务，启动之后将这5个任务放到了工作队列中。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>同时回过头来，切换到工人类1控制台，内容打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/434b98c2-dce9-4940-bf03-6300cc0f15c53.png\" style=\"height:259px; width:600px\" /></p>\r\n\r\n<p>此工人从队列中拿到了属于自己的任务，并进行了处理。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>切换到工人类2控制台，内容打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/e6a966b0-c719-43f1-897f-4fb3130fa7842.png\" style=\"height:227px; width:600px\" /></p>\r\n\r\n<p>此工人从队列中拿到了属于自己的任务，并进行了处理。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>当然，此例子中任务的分配是随机的，是不固定的，所以会导致这种结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>总结</strong></h2>\r\n\r\n<p>大家注意到当每一个消费者处理完自己的任务之后都要执行Channel类的basicConsume()方法了吗？这就是RabbitMQ的消息确认机制。当服务器发送消息给消费者的过程中出现了诸如网络断开或其他意外，那么RabbitMQ就会认为这个消息没有安全送达消费者手中，会马上退回到队列中。等到下次对应的消费者一旦在线时马上又会推送过去。</p>\r\n\r\n<p>这种机制保证了在消费者服务器故障的时候，能不丢失任何消息和任务。</p>\r\n\r\n<p>如果消费者一直不回复，那么这条消息会永远存在于队列中，永不会删除。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>我们可以这样做一个测试：</p>\r\n\r\n<p>启动两个消费者（工人类），然后再启动生产者（工厂任务安排者类），3秒之后立即结束掉其中一个消费者的进程。然后将所有进程都全部结束，独开一个消费者，你会看到那条被结束的消息（即还未被消费的消息）此时又会被这个消费者所接收到。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>以上操作就是模拟了消费者向队列中写入一个ACK消息时突然宕掉了，这种情况就是典型的消息未被消费者正确消费的情况，那么这条未被消费的消息会立即退回的队列中，等待下次符合条件的消费者过来取。这就保证了每一条消息都不会因为这种原因而丢失。</p>\r\n',NULL,'本节我们来看RabbitMQ的工作队列。将一个大任务分配给多台服务器分开处理，达到分担服务器压力的目的。','Chrome 45','Microsoft Windows 10'),(32,'RabbitMQ探险记（五）- 消息路由',8,1,'2016-12-16 22:19:00','58.100.157.187',NULL,1,0,'正常','消息队列','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>一个消息生产者在队列中放入了很多很多的任务，那么消费者都一个个的接收并处理了任务。可现在有一个问题，我只想固定某些消费者处理某些类型的任务，比如我只想让消费者1、消费者2接收到服务器日志警告级别为error的日志。此时就需要用到消息路由了。消费者通过将队列和路由关键字进行绑定，即可接收到包含路由关键字的任务。</p>\r\n\r\n<p>这里要注意：</p>\r\n\r\n<p><strong>如果定义的分发器是直连类型的，才会收到指定路由关键字的任务，如果定义为分发类型的，那么会收到所有类型的任务。</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码展示</strong></h2>\r\n\r\n<p>RoutingSendDirect（路由发送，生产者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 路由发送类【生产者】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class RoutingSendDirect {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;direct_logs&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //路由关键字</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String[] routingKeys = new String[]{&quot;info&quot;,&quot;warning&quot;,&quot;error&quot;};</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据自定义的队列名称创建一个直连类型的交换器队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.DIRECT.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //发送消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (String key : routingKeys) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = &quot;此消息等级为：&quot;+key;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(EXCHANGE_NAME, key, null, message.getBytes());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;路由发送者发送消息，消息等级：&quot;+key+&quot;，消息内容：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>ReceiveLogsDirectOne（路由接收，消费者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 路由接收者1【消费者1】</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* 此接收者只接收路由为info、warning和error类型的消息，其他消息不接收</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ReceiveLogsDirectOne {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;direct_logs&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //定义路由关键字，只接收路由为info、warning和error类型的消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String[] routingKeys = new String[]{&quot;info&quot;,&quot;warning&quot;,&quot;error&quot;};</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关注一个自定义队列名称的直连类型的交换器队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.DIRECT.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //从系统中获取到匿名队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String queueName = channel.queueDeclare().getQueue();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据上面声明的routingKeys数组将交换器、队列和路由三者进行多重绑定</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (String key : routingKeys) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将自定义的路由关键字集合中的每一个路由值取出来，依次进行绑定</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueBind(queueName, EXCHANGE_NAME, key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;路由接收者1 开始将队列和关键字进行绑定。\\n\\t绑定的自定义队列名：&quot;+EXCHANGE_NAME+&quot;，绑定到的匿名队列名称：&quot;+queueName+&quot;，绑定的路由关键字：&quot; + key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;路由接收者1 等待消息传入&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body, &quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;路由接收者1 接收到路由消息。此消息的路由关键字：&quot; + envelope.getRoutingKey() + &quot;，此消息的内容：&quot; + message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //确认消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(queueName, true, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>ReceiveLogsDirectTwo（路由接收，消费者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 路由接收者2【消费者2】</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* 此接收者只接收路由为error类型的消息，其他消息不接收</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ReceiveLogsDirectTwo {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;direct_logs&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //定义路由关键字，只接收路由为error类型的消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String[] routingKeys = new String[]{&quot;error&quot;};</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据创建的连接来创建一个频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关注一个自定义队列名称的直连类型的交换器队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.DIRECT.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //从系统中获取到匿名队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String queueName = channel.queueDeclare().getQueue();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据上面声明的routingKeys数组将交换器、队列和路由三者进行多重绑定</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (String key : routingKeys) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将自定义的路由关键字集合中的每一个路由值取出来，依次进行绑定</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueBind(queueName, EXCHANGE_NAME, key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;路由接收者2 开始将队列和关键字进行绑定。\\n\\t绑定的自定义队列名：&quot;+EXCHANGE_NAME+&quot;，绑定到的匿名队列名称：&quot;+queueName+&quot;，绑定的路由关键字：&quot; + key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;路由接收者2 等待消息传入&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body, &quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;路由接收者2 接收到路由消息。此消息的路由关键字：&quot; + envelope.getRoutingKey() + &quot;，此消息的内容：&quot; + message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //确认消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(queueName, true, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h1>效果展示</h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>先运行路由接收者1，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/a184b9e6-7dc1-45c1-913f-9ddc3890e7df4.png\" style=\"height:185px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>再运行路由接收者2，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/a9c82798-676d-453c-ac99-9b438321d5521.png\" style=\"height:141px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>然后运行路由发送者，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/1d905d69-3a21-4ee3-9efb-385f9fd1957c9.png\" style=\"height:205px; width:579px\" /></p>\r\n\r\n<p>此时，服务器向队列中发送了三条信息，等级分别是info、warning和error。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>返回头来转到路由接收者1控制台，打印内容如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/d49d6b69-91c5-4eab-90c0-4cef6cdaa7697.png\" style=\"height:207px; width:600px\" /></p>\r\n\r\n<p>路由接收者1定义的是接收三种级别类型的信息，结果在我们的预期范围内，全都正确接收到了。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>返回头来转到路由接收者2控制台，打印内容如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/51bef016-88b6-4788-a32f-b664158686ba1.png\" style=\"height:154px; width:600px\" /></p>\r\n\r\n<p>路由接收者2定义的是接收一种级别类型的信息，结果在我们的预期范围内，接收到了一个error级别的消息。</p>\r\n\r\n<p>此时我们可以把生产者和两个消费者的交换器类型全都改为分发类型的再去运行，你会发现无论如何设置路由关键字，两个消费者都会接受到同样的消息。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>总结</strong></h2>\r\n\r\n<p><strong>概念：当使用分发类型的交换器且同时绑定了路由关键字时，会忽略路由关键字。</strong></p>\r\n',NULL,'本节我们来看RabbitMQ的消息路由。有时需要消费者只接受固定类型的任务或者执行带有固定标识的任务，而忽略标识以外的任务。','Chrome 45','Microsoft Windows 10'),(33,'RabbitMQ探险记（六）- RPC',8,1,'2016-12-16 22:23:12','58.100.157.187',NULL,4,0,'正常','消息队列','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>RPC（Remote Procedure Call）称之为&ldquo;远程过程调用&rdquo;。RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息；在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</p>\r\n\r\n<p>我们可以利用RabbitMQ的队列来轻松实现RPC。</p>\r\n\r\n<p>本例中我们建立一个RPC服务器，他可以用来计算裴波那契列数，建立一个RPC客户端，他有计算裴波那契列数的需求，需要调用RPC服务器来帮助计算以获得最终结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码展示</strong></h2>\r\n\r\n<p>RPCServer（RPC服务器）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* RPC服务器类</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>@SuppressWarnings(&quot;deprecation&quot;)</p>\r\n\r\n<p>public class RPCServer {</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的RPC队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String RPC_QUEUE_NAME = &quot;rpc_queue&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException, ShutdownSignalException, ConsumerCancelledException, InterruptedException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建并设置连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据工厂建立连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接创建一个通道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在通道中创建一个非持久化、使用完立即删除的临时队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueDeclare(RPC_QUEUE_NAME, false, false, false, null);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //限制每次取出的数量为1个</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicQos(1);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据通道建立队列消费者对象</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 关于QueueingConsumer类的官方释义：</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Convenience class: an implementation of Consumer with straightforward blocking semantics</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QueueingConsumer consumer = new QueueingConsumer(channel);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置消费者的消息确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(RPC_QUEUE_NAME, false, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (true) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String response = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(new Date(System.currentTimeMillis()))+&quot;]RPC服务器 正在等待 RPC客户端的响应&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Delivery是一个返回消息的封装，用来等待下一个消息的传递</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 关于QueueingConsumer.Delivery类的官方释义：</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Encapsulates an arbitrary message - simple &quot;bean&quot; holder structure.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Delivery delivery = consumer.nextDelivery();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;[&quot;+new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(new Date(System.currentTimeMillis()))+&quot;]RPC服务器已 成功接收 到RPC客户端的响应&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BasicProperties prop = delivery.getProperties();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BasicProperties replyProp = new BasicProperties().builder().correlationId(prop.getCorrelationId()).build();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(delivery.getBody(),&quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int n = Integer.valueOf(message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; response = &quot;&quot; + fib(n);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println(&quot;RPC服务端生成计算结果：&quot;+fib(n)+&quot;；RPC服务端汇总结果：&quot;+response);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //服务端将结果返回到客户端的队列当中去</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(&quot;&quot;, prop.getReplyTo(), replyProp, response.getBytes(&quot;UTF-8&quot;));</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //服务端向客户端发送确认消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Envelope类封装了一组参数用于AMQP的基本方法，形象的比喻为&ldquo;信封&rdquo;，它包含了此条消息的必要参数信息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Envelope类的官方释义：</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Encapsulates a group of parameters used for AMQP&#39;s Basic methods.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Envelope类中getDeliveryTag()方法的官方释义：</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* Get the delivery tag included in this parameter envelope.</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot; -- [&quot;+new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(new Date(System.currentTimeMillis()))+&quot;]服务端返回消息完成 -- &quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (Exception e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }finally {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null != channel) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null != connection) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 裴波那契递归</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param n</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static int fib(int n) {&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (n == 0)&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (n == 1)&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return fib(n - 1) + fib(n - 2);&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>RPCClient（RPC客户端）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* RPC客户端类</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>@SuppressWarnings(&quot;deprecation&quot;)</p>\r\n\r\n<p>public class RPCClient {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Connection connection;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Channel channel;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的RPC队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private String requestQueueName = &quot;rpc_queue&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明回复队列的名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private String replyQueueName;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明一个消费者对象</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private QueueingConsumer consumer;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public RPCClient() throws Exception {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建并设置连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建一个连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接来创建一个通道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //响应服务器端发送的响应</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; replyQueueName = channel.queueDeclare().getQueue();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据通道创建一个队列的消费者对象</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; consumer = new QueueingConsumer(channel);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置消费者的消息确认</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(replyQueueName, true, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 自定义的回调方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @param message</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @return</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @throws Exception</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public String call(String message) throws Exception {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String response = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //使用UUID工具类获取一个随机的UUID码</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String corrId = UUID.randomUUID().toString();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;生成UUID码：&quot;+corrId);</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //客户端的RPC请求时将同时设置两个属性值：replyTo设置为回调的队列；correlationId设置为每个请求的唯一值</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BasicProperties props = new BasicProperties.Builder().correlationId(corrId).replyTo(replyQueueName).build();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;RPC客户端在属性中塞入两个参数：唯一ID：&quot;+corrId+&quot;；回调队列名：&quot;+replyQueueName);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(&quot;&quot;, requestQueueName, props, message.getBytes(&quot;UTF-8&quot;));</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (true) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;RPC客户端收到请求&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QueueingConsumer.Delivery delivery = consumer.nextDelivery();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //如果队列中此响应的唯一标识符是当前客户端的唯一标识符，才去处理。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //因为目前是每一个RPC客户端对应一个队列而不是每一个请求对应一个队列，这样做可以极大地提高队列的效率。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //那么所有当前RPC客户端的任务都放在一个队列里，谁都分不清谁，那么此时这个UUID就是为了标识每一个唯一的任务请求用的</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (delivery.getProperties().getCorrelationId().equals(corrId)) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response = new String(delivery.getBody(), &quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return response;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* 关闭连接的方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* （为了测试类方便而建）</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;* @throws Exception</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;*/</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void close() throws Exception {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] argv) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //声明RPC客户端</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RPCClient fibonacciRpc = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String response = null;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //实例化一个RPC客户端</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fibonacciRpc = new RPCClient();</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;RPC客户端请求计算&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //调用RPC客户端的回调方法</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response = fibonacciRpc.call(&quot;30&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;RPC客户端计算完毕，获得结果：&quot;+response);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (Exception e) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } finally {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fibonacciRpc != null) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fibonacciRpc.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (Exception ignore) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>先运行RPC服务端，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/5565759f-6129-4009-be99-2625ab12cfb60.png\" style=\"height:153px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>再运行RPC客户端，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/6b9b3d16-ca48-468e-987c-38599d9f162a0.png\" style=\"height:187px; width:600px\" /></p>\r\n\r\n<p>可以看到RPC客户端将自己的请求数据放入了对应的队列中，然后服务器去计算，最后RPC返回给客户端结果。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>回过头来再转到RPC服务端的控制台，打印内容如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/4fcbed5f-1086-40e4-881a-1302fcaffd394.png\" style=\"height:212px; width:600px\" /></p>\r\n\r\n<p>当RPC客户端将请求数据塞入队列中后，RPC立即检测到客户端的队列请求，并调用计算函数进行计算，计算完成之后再调用Channel类的basicPublish()方法，传入对应参数，根据当前队列携带结果值再放入队列中，这样RPC客户端就可以队列中找到这个唯一的响应了。</p>\r\n\r\n<p>RPC服务端将结果返回给RPC客户端并发送ACK确认消息后，又开始进入等待状态，等待下一次RPC客户端再次发出请求，再做出响应。</p>\r\n',NULL,'本节我们来看RabbitMQ的RPC示例。RabbitMQ是一个分布式可伸缩的基于AMQP的队列，可以很方便的搭建RPC系统来处理更为庞大的任务。','Chrome 45','Microsoft Windows 10'),(34,'RabbitMQ探险记（七）- Topic路由',8,1,'2016-12-16 22:27:27','58.100.157.187',NULL,4,0,'正常','消息队列','<h2><strong>概念阐释</strong></h2>\r\n\r\n<p>前面所讲到的匹配模式是根据一个个的关键字来匹配的。试想一下，Java中类的管理是使用包来管理的。那么我怎么要一个消费者只关注某一关键字下，某一指定包路径下的消息呢？这时候Topic路由帮我们解决了这一问题，将其更细粒度的做匹配处理。</p>\r\n\r\n<p>此例中我们建立一个Topic消息发送者，用来发送消息，建立两个Topic消息接收者，并分别为这两个消息接收者定义不同的消息匹配表达式，用来接收不同的消息。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>代码展示</strong></h2>\r\n\r\n<p>ProduceTopic（Topic消息发送者，生产者）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* Topic消息发送者【生产者】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ProduceTopic {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;topic_logs&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的路由关键字数组</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String[] routingKeys = new String[]{&quot;quick.orange.rabbit&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;lazy.orange.elephant&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;quick.orange.fox&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;lazy.brown.fox&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;quick.brown.fox&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;quick.orange.male.rabbit&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;lazy.orange.male.rabbit&quot;};</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建一个连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接来创建一个通道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据自定义的队列名称创建一个主题类型的交换器队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.TOPIC.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //遍历路由关键字数组</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (String key : routingKeys) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = &quot;路由关键字：&quot;+key+&quot;。&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //发布到队列中</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(EXCHANGE_NAME, key, null, message.getBytes());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;消息发送者发送Key：&quot;+key+&quot;，消息内容为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>ReceiveTopicOne（消息匹配的接收者，消费者1）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* Topic消息发送者【生产者】</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ProduceTopic {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;topic_logs&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的路由关键字数组</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String[] routingKeys = new String[]{&quot;quick.orange.rabbit&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;lazy.orange.elephant&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;quick.orange.fox&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;lazy.brown.fox&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;quick.brown.fox&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;quick.orange.male.rabbit&quot;,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;lazy.orange.male.rabbit&quot;};</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建一个连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接来创建一个通道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据自定义的队列名称创建一个主题类型的交换器队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.TOPIC.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //遍历路由关键字数组</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (String key : routingKeys) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = &quot;路由关键字：&quot;+key+&quot;。&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //发布到队列中</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicPublish(EXCHANGE_NAME, key, null, message.getBytes());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;消息发送者发送Key：&quot;+key+&quot;，消息内容为：&quot;+message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭频道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关闭连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection.close();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>ReceiveTopicTwo（消息匹配的接收者，消费者2）类：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>/**</p>\r\n\r\n<p>&nbsp;* 消息匹配的接收者2【消费者2】</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* 只接收匹配模式为&nbsp; *.*.rabbit&nbsp; 和&nbsp; lazy.#&nbsp; 的消息，其他消息一律忽略。*号表示一个单词，#号表示一个或多个单词</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;* @author Steve Jrong</p>\r\n\r\n<p>&nbsp;*</p>\r\n\r\n<p>&nbsp;*/</p>\r\n\r\n<p>public class ReceiveTopicTwo {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String EXCHANGE_NAME = &quot;topic_logs&quot;;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义的路由关键字数组，用于匹配特定格式的消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static final String[] routingKeys = new String[]{&quot;*.*.rabbit&quot;, &quot;lazy.#&quot;};</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws IOException, TimeoutException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //创建连接工厂</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnectionFactory factory = new ConnectionFactory();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //设置RabbitMQ地址</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; factory.setHost(&quot;127.0.0.1&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接工厂创建一个连接</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection connection = factory.newConnection();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //根据连接来创建一个通道</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel channel = connection.createChannel();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //关注一个自定义队列名称的主题类型的交换器队列</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.exchangeDeclare(EXCHANGE_NAME, ExchangeRule.TOPIC.getRule());</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //从系统中获取一个队列名称</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String queueName = channel.queueDeclare().getQueue();</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //将队列、分发器和路由关键字进行绑定</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (String key : routingKeys) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.queueBind(queueName, EXCHANGE_NAME, key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;消息匹配的路由接收者2 开始将队列和关键字进行绑定。\\n\\t绑定的自定义队列名：&quot;+EXCHANGE_NAME+&quot;，绑定到的匿名队列名称：&quot;+queueName+&quot;，绑定的路由关键字：&quot; + key);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;消息匹配的路由接收者2 等待消息传入&hellip;&hellip;&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Consumer consumer = new DefaultConsumer(channel){</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body)</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IOException {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = new String(body, &quot;UTF-8&quot;);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;消息匹配的路由接收者2 接收到路由消息。此消息的路由关键字：&quot; + envelope.getRoutingKey() + &quot;，此消息的内容：&quot; + message);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //确认消息</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel.basicConsume(queueName, true, consumer);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>效果展示</strong></h2>\r\n\r\n<p>先运行Topic消息接收者1，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/a77ad1eb-5c5f-46d3-ae77-cf233ddfa7f50.png\" style=\"height:133px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>再运行Topic消息接收者2，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/5f042f3e-2f93-40d0-b42d-1e1881347bd69.png\" style=\"height:149px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>然后运行Topic消息发送者，控制台打印如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/674e1ee8-4f5b-4c3f-b4ad-32c38d6235c91.png\" style=\"height:216px; width:600px\" /></p>\r\n\r\n<p>可以看到，服务端发送了7条消息。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>转到Topic消息接收者1的控制台，打印内容如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/0ee71008-d991-43fc-befe-169c72cfa5c75.png\" style=\"height:166px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>再转到Topic消息接收者2的控制台，打印内容如下：</p>\r\n\r\n<p><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/46c6c543-768c-4c8f-9d81-03fad80a20b77.png\" style=\"height:185px; width:600px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>总结</strong></h2>\r\n\r\n<p>匹配符释义：</p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>* 一个星号表示一个单词；</p>\r\n\r\n<p># 一个井号表示零个或多个单词</p>\r\n</div>\r\n',NULL,'本节是此次探险记的最后一站了。我们一起来看RabbitMQ的高级路由匹配模式-Topic消息主题路由。它可以像Spring AOP中的匹配表达式那样，模糊匹配到符合表达式的队列请求。其实是属于前面所讲到的路由的一种扩展，一种高级模式。','Chrome 45','Microsoft Windows 10'),(35,'Windows和Mac局域网匿名共享设置',9,1,'2016-12-24 09:51:59','58.100.157.92',NULL,5,0,'正常','局域网共享','<h2><strong>设置步骤</strong></h2>\r\n\r\n<h3 style=\"text-align: center;\"><strong>Windows设置</strong></h3>\r\n\r\n<ul>\r\n	<li>按下Windows+R组合键，在&ldquo;运行&rdquo;对话框内输入以下字符以调起程序：</li>\r\n</ul>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<p>gpedit.msc</p>\r\n</div>\r\n\r\n<ul>\r\n	<li>上一步操作会打开&ldquo;本地组策略编辑器&rdquo;窗口，在其中找到&ldquo;计算机配置&rdquo;-&ldquo;Windows设置&rdquo;-&ldquo;安全设置&rdquo;-&ldquo;本地策略&rdquo;。</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>&ldquo;用户权限分配&rdquo;，在列表中找到&ldquo;拒绝从网络访问这台计算机&rdquo;，右键点击属性，然后从项目中删除&ldquo;Guest&rdquo;项，然后点击&ldquo;确定&rdquo;按钮即可。</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>继续返回左侧列表，找到并点击&ldquo;安全选项&rdquo;，在列表中找到&ldquo;网络访问：本地账户的共享和安全模型&rdquo;，选中此项并右键单击，在弹出的对话框中，下拉列表项更改为&ldquo;仅来宾-对本地用户进行验证，其身份为来宾&rdquo;。</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>到此，Windows的所有系统级别的设置都已经完成了。接下来就是自定义设置要分享的文件或者目录了。以分享目录来讲，直接在磁盘上右键单击&ldquo;属性&rdquo;，然后找到&ldquo;共享&rdquo;选项卡，进行共享即可。不过要注意，权限中要添加Guest账户，默认是只读，不过也只建议设为只读。如果是自己用倒是无所谓了，如果是在人多的场合下，最好不要设为完全更改。</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 style=\"text-align: center;\"><strong>Mac设置</strong></h3>\r\n\r\n<p>Mac系统其实并无太多设置项，操作步骤如下：</p>\r\n\r\n<ul>\r\n	<li>转到桌面并调出Finder程序菜单，点击&ldquo;连接服务器&rdquo;项：</li>\r\n</ul>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/dee3eecf-7ef2-4088-8088-de4f0c22e07a0.jpg\" style=\"height:249px; width:264px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>然后在弹出的&ldquo;连接服务器&rdquo;对话框中输入Windows电脑的IP地址即可。</li>\r\n</ul>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/ce741dbc-bd50-4b80-9d8a-523abc239a8b4.jpg\" style=\"height:197px; width:415px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>之后Mac会询问使用何种身份登录，这里选择&ldquo;客人&rdquo;即可。</li>\r\n</ul>\r\n\r\n<p style=\"margin-left:24.0pt\"><img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/d48be66d-f961-49ca-a191-7160a856db200.jpg\" style=\"height:162px; width:415px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>如果弹出远程服务器的宗卷列表，即表示访问成功。</li>\r\n</ul>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" src=\"https://www.stevejrong.top/resources/upload/pictures/201612/6121cf62-d8c7-43a2-b8ae-1723113982650.jpg\" style=\"height:348px; width:415px\" /></p>\r\n',NULL,'近期想把Windows电脑中的部分文件复制到Mac电脑中，但是由于文件过大，用什么方式都太耗时，决定使用局域网来解决这个问题。在此记录下设置方法，可以使得Mac电脑直接使用Guest账户登录到Windows电脑直接访问目录和文件。','Safari 10','Mac');

/*Data for the table `sj_articletypes` */

insert  into `sj_articletypes`(`T_ID`,`T_NAME`) values (1,'Java EE'),(2,'第三方服务'),(3,'SVN代码管理'),(4,'Web前端'),(5,'JavaScript'),(6,'个人日记'),(7,'多线程'),(8,'消息队列'),(9,'经验技巧');

/*Data for the table `sj_file_attachments` */

insert  into `sj_file_attachments`(`FA_ID`,`FA_A_ID`,`FA_FILE_PATH`,`FA_FILE_FORMAT`,`FA_CREATE_DATE`,`FA_MODIFY_DATE`,`FA_MD5_VAR`,`FA_DOWMLOAD_COUNT`,`FA_ENABLE_DOWNLOAD`) values (2,16,'resources/upload/file_attachments/201610/JQueryXMLDemo.rar','rar','2016-10-31 15:23:15',NULL,'82fd36f2c82558136771a9017d11ddef',0,''),(3,17,'resources/upload/file_attachments/201611/RequireJSDemo.rar','rar','2016-11-01 18:14:33',NULL,'a0a17a5d6cee22d0421774f33506b027',0,''),(5,21,'resources/upload/file_attachments/201611/NotifyAndWaitDemo.rar','rar','2016-11-26 14:24:14',NULL,'c981c6d4b2a0910c0094d8bb52eada19',0,''),(7,24,'resources/upload/file_attachments/201611/FutureModeDemo.rar','rar','2016-11-29 21:22:29',NULL,'f5b07b2ea67e14d9a7dc1fe8f937dfa1',0,''),(8,25,'resources/upload/file_attachments/201611/GuardedSuspensionDemo.rar','rar','2016-11-29 21:28:26',NULL,'c2cb101fc6b49a351ff0ec18ce8308a5',0,''),(11,27,'resources/upload/file_attachments/201611/MasterWorkerDemo.rar','rar','2016-11-29 21:40:24',NULL,'a829a5f4e9124f5794a3b52d08c96da0',0,''),(12,28,'resources/upload/file_attachments/201612/Eralng和RabbitMQ安装包.rar','rar','2016-12-11 19:33:40',NULL,'bc0d14e9db3a7a2d16d33faf4afa364c',0,''),(13,29,'resources/upload/file_attachments/201612/RabbitMQDemo.rar','rar','2016-12-16 22:02:11',NULL,'9f5e46edf8a5f4ffd31463726eb10ceb',0,''),(14,30,'resources/upload/file_attachments/201612/RabbitMQDemo.rar','rar','2016-12-16 22:08:13',NULL,'9f5e46edf8a5f4ffd31463726eb10ceb',0,''),(15,31,'resources/upload/file_attachments/201612/RabbitMQDemo.rar','rar','2016-12-16 22:14:15',NULL,'9f5e46edf8a5f4ffd31463726eb10ceb',0,''),(16,32,'resources/upload/file_attachments/201612/RabbitMQDemo.rar','rar','2016-12-16 22:18:57',NULL,'9f5e46edf8a5f4ffd31463726eb10ceb',0,''),(17,33,'resources/upload/file_attachments/201612/RabbitMQDemo.rar','rar','2016-12-16 22:23:08',NULL,'9f5e46edf8a5f4ffd31463726eb10ceb',0,''),(18,34,'resources/upload/file_attachments/201612/RabbitMQDemo.rar','rar','2016-12-16 22:27:24',NULL,'9f5e46edf8a5f4ffd31463726eb10ceb',0,'');

/*Data for the table `sj_guestsdatehistorydetail` */

insert  into `sj_guestsdatehistorydetail`(`GD_ID`,`GD_G_ID`,`GD_VISTEDDATETIME`) values (1,1,'2016-09-18 14:46:42'),(2,1,'2016-09-18 14:46:25'),(3,1,'2016-09-18 14:46:39'),(4,2,'2016-09-19 13:03:38'),(5,2,'2016-09-19 17:35:39'),(6,2,'2016-09-19 17:32:51'),(7,2,'2016-09-19 16:53:38'),(8,2,'2016-09-19 17:59:53'),(9,2,'2016-09-19 13:03:02'),(10,2,'2016-09-19 10:38:08'),(11,2,'2016-09-19 17:39:55'),(12,2,'2016-09-19 17:33:43'),(13,2,'2016-09-19 17:48:20'),(14,2,'2016-09-19 17:35:29'),(15,2,'2016-09-19 17:48:34'),(16,2,'2016-09-19 17:39:51'),(17,2,'2016-09-19 10:35:17'),(18,2,'2016-09-19 13:02:37'),(19,2,'2016-09-19 10:35:56'),(20,2,'2016-09-19 13:06:18'),(21,2,'2016-09-19 17:37:51'),(22,2,'2016-09-19 13:03:39'),(23,2,'2016-09-19 10:38:11'),(24,2,'2016-09-19 17:50:43'),(25,2,'2016-09-19 17:59:14'),(26,2,'2016-09-19 13:03:24'),(27,3,'2016-09-19 22:03:03'),(28,3,'2016-09-19 22:05:12'),(29,4,'2016-09-19 17:43:57'),(30,5,'2016-09-19 16:18:38'),(31,5,'2016-09-19 16:31:30'),(32,5,'2016-09-19 17:36:53'),(33,5,'2016-09-19 16:41:36'),(34,6,'2016-09-19 17:22:55'),(35,6,'2016-09-19 17:49:13'),(36,6,'2016-09-19 17:33:25'),(37,6,'2016-09-19 17:39:14'),(38,6,'2016-09-19 17:39:21'),(39,6,'2016-09-19 17:24:36'),(40,6,'2016-09-19 17:33:52'),(41,6,'2016-09-19 17:30:59'),(42,6,'2016-09-19 17:21:28'),(43,6,'2016-09-19 17:27:32'),(44,6,'2016-09-19 17:44:46'),(45,6,'2016-09-19 17:37:43'),(46,6,'2016-09-19 17:25:18'),(47,6,'2016-09-19 17:34:43'),(48,6,'2016-09-19 17:21:06'),(49,6,'2016-09-19 17:37:51'),(50,6,'2016-09-19 17:41:28'),(51,2,'2016-09-20 12:55:59'),(52,2,'2016-09-20 11:18:20'),(53,2,'2016-09-20 18:00:12'),(54,2,'2016-09-20 12:55:55'),(55,3,'2016-09-20 20:54:54'),(56,7,'2016-09-20 11:42:08'),(57,7,'2016-09-20 11:42:04'),(58,8,'2016-09-20 21:00:16'),(59,9,'2016-09-20 11:56:33'),(60,2,'2016-09-21 10:49:21'),(61,2,'2016-09-21 10:49:21'),(62,2,'2016-09-21 16:28:35'),(63,2,'2016-09-21 16:28:20'),(64,2,'2016-09-21 17:20:14'),(65,2,'2016-09-21 16:28:42'),(66,10,'2016-09-21 17:00:42'),(67,10,'2016-09-21 16:59:36'),(68,10,'2016-09-21 17:00:27'),(69,10,'2016-09-21 17:00:27'),(70,10,'2016-09-21 17:00:19'),(71,10,'2016-09-21 17:05:04'),(72,10,'2016-09-21 16:53:48'),(73,3,'2016-09-21 22:44:41'),(74,3,'2016-09-21 22:50:35'),(75,3,'2016-09-21 22:47:45'),(76,3,'2016-09-21 22:44:06'),(77,11,'2016-09-21 16:30:43'),(78,12,'2016-09-21 16:32:29'),(79,13,'2016-09-21 12:22:19'),(80,14,'2016-09-21 16:30:42'),(81,15,'2016-09-21 16:30:22'),(82,15,'2016-09-21 16:32:04'),(83,2,'2016-09-22 09:14:37'),(84,2,'2016-09-22 09:14:32'),(85,2,'2016-09-22 13:47:36'),(86,2,'2016-09-22 12:36:38'),(87,16,'2016-09-22 23:22:44'),(88,3,'2016-09-23 08:22:43'),(89,17,'2016-09-24 22:33:16'),(90,3,'2016-09-24 07:51:00'),(91,18,'2016-09-24 09:36:44'),(92,19,'2016-09-25 14:53:42'),(93,20,'2016-09-25 14:53:46'),(94,20,'2016-09-25 14:53:28'),(95,20,'2016-09-25 14:57:00'),(96,21,'2016-09-26 09:18:53'),(97,21,'2016-09-26 16:09:51'),(98,21,'2016-09-26 16:16:44'),(99,21,'2016-09-26 15:08:50'),(100,21,'2016-09-26 09:18:53'),(101,22,'2016-09-26 16:59:02'),(102,23,'2016-09-27 22:50:13'),(103,24,'2016-09-30 22:05:07'),(104,24,'2016-09-30 22:02:31'),(105,24,'2016-09-30 22:11:32'),(106,24,'2016-09-30 15:00:32'),(107,24,'2016-09-30 07:30:36'),(108,24,'2016-09-30 22:05:20'),(109,24,'2016-09-30 22:02:50'),(110,24,'2016-09-30 22:00:27'),(111,24,'2016-09-30 22:19:55'),(112,24,'2016-09-30 22:02:21'),(113,24,'2016-09-30 15:00:28'),(114,25,'2016-10-02 23:57:39'),(115,25,'2016-10-02 23:57:32'),(116,26,'2016-10-02 10:52:13'),(117,26,'2016-10-02 11:14:52'),(118,26,'2016-10-02 11:24:38'),(119,26,'2016-10-02 10:57:55'),(120,26,'2016-10-02 10:52:20'),(121,26,'2016-10-02 11:25:03'),(122,25,'2016-10-03 00:05:39'),(123,25,'2016-10-03 00:01:56'),(124,25,'2016-10-03 00:09:10'),(125,27,'2016-10-03 20:09:58'),(126,27,'2016-10-03 20:43:08'),(127,27,'2016-10-03 17:43:02'),(128,27,'2016-10-03 20:19:11'),(129,27,'2016-10-03 20:05:22'),(130,27,'2016-10-03 20:43:53'),(131,27,'2016-10-03 20:36:02'),(132,27,'2016-10-03 17:48:08'),(133,27,'2016-10-03 20:37:28'),(134,27,'2016-10-03 17:42:31'),(135,27,'2016-10-03 20:34:21'),(136,27,'2016-10-03 20:35:33'),(137,28,'2016-10-09 20:19:59'),(138,28,'2016-10-09 20:20:08'),(139,29,'2016-10-10 21:40:46'),(140,30,'2016-10-10 22:35:27'),(141,31,'2016-10-10 22:49:47'),(142,32,'2016-10-10 20:22:08'),(143,28,'2016-10-10 20:29:04'),(144,28,'2016-10-10 20:19:32'),(145,28,'2016-10-10 20:22:02'),(146,28,'2016-10-10 20:20:45'),(147,28,'2016-10-10 21:34:56'),(148,28,'2016-10-10 20:27:35'),(149,28,'2016-10-10 20:24:36'),(150,28,'2016-10-10 20:21:28'),(151,28,'2016-10-10 20:21:15'),(152,28,'2016-10-10 20:28:00'),(153,28,'2016-10-10 20:19:40'),(154,28,'2016-10-10 21:34:42'),(155,28,'2016-10-10 20:28:19'),(156,28,'2016-10-10 20:30:19'),(157,28,'2016-10-10 20:20:33'),(158,28,'2016-10-10 20:21:46'),(159,28,'2016-10-10 20:21:35'),(160,28,'2016-10-10 20:20:50'),(161,28,'2016-10-10 21:34:42'),(162,28,'2016-10-10 20:28:31'),(163,28,'2016-10-10 20:20:26'),(164,28,'2016-10-10 20:19:40'),(165,33,'2016-10-12 22:09:45'),(166,33,'2016-10-12 22:08:07'),(167,33,'2016-10-12 22:07:50'),(168,34,'2016-10-12 09:44:23'),(169,34,'2016-10-12 09:43:36'),(170,34,'2016-10-12 09:51:10'),(171,35,'2016-10-13 11:38:44'),(172,36,'2016-10-13 11:38:44'),(173,37,'2016-10-14 11:38:56'),(174,38,'2016-10-17 23:28:08'),(175,39,'2016-10-17 23:00:09'),(176,39,'2016-10-17 23:15:46'),(177,39,'2016-10-17 23:18:04'),(178,39,'2016-10-17 23:15:10'),(179,39,'2016-10-17 22:55:17'),(180,39,'2016-10-17 23:27:50'),(181,39,'2016-10-17 23:14:26'),(182,40,'2016-10-17 23:37:34'),(183,41,'2016-10-18 13:45:27'),(184,42,'2016-10-18 00:10:41'),(185,43,'2016-10-18 22:53:14'),(186,44,'2016-10-18 09:10:56'),(187,45,'2016-10-18 10:14:02'),(188,46,'2016-10-18 08:32:06'),(189,47,'2016-10-18 10:16:17'),(190,48,'2016-10-18 11:48:25'),(191,48,'2016-10-18 11:48:12'),(192,48,'2016-10-18 11:48:08'),(193,49,'2016-10-18 11:05:51'),(194,50,'2016-10-18 10:23:35'),(195,51,'2016-10-19 21:37:02'),(196,52,'2016-10-19 12:25:59'),(197,53,'2016-10-19 22:20:38'),(198,54,'2016-10-19 14:39:33'),(199,55,'2016-10-20 20:41:18'),(200,55,'2016-10-20 20:41:18'),(201,55,'2016-10-20 20:41:11'),(202,55,'2016-10-20 20:41:59'),(203,56,'2016-10-20 20:41:59'),(204,56,'2016-10-20 20:41:18'),(205,56,'2016-10-20 20:41:18'),(206,56,'2016-10-20 20:41:11'),(207,57,'2016-10-21 08:01:45'),(208,58,'2016-10-21 12:06:42'),(209,59,'2016-10-22 12:18:01'),(210,59,'2016-10-22 08:10:43'),(211,59,'2016-10-22 12:17:58'),(212,60,'2016-10-22 19:18:49'),(213,61,'2016-10-24 11:20:27'),(214,61,'2016-10-24 11:20:54'),(215,61,'2016-10-24 11:20:40'),(216,61,'2016-10-24 11:20:37'),(217,61,'2016-10-24 11:20:45'),(218,61,'2016-10-24 11:20:36'),(219,62,'2016-10-25 21:29:25'),(220,63,'2016-10-25 07:46:57'),(221,61,'2016-10-26 10:31:28'),(222,61,'2016-10-26 10:29:03'),(223,61,'2016-10-26 10:56:07'),(224,61,'2016-10-26 10:56:07'),(225,64,'2016-10-26 21:18:48'),(226,65,'2016-10-27 09:17:29'),(227,64,'2016-10-27 08:11:22'),(228,66,'2016-10-28 16:14:07'),(229,67,'2016-10-28 16:00:13'),(230,67,'2016-10-28 15:59:20'),(231,67,'2016-10-28 17:25:08'),(232,67,'2016-10-28 16:01:24'),(233,67,'2016-10-28 16:00:34'),(234,67,'2016-10-28 16:00:35'),(235,67,'2016-10-28 16:00:03'),(236,68,'2016-10-28 23:09:45'),(237,69,'2016-10-30 10:11:00'),(238,69,'2016-10-30 10:11:07'),(239,69,'2016-10-30 10:11:05'),(240,69,'2016-10-30 10:11:54'),(241,67,'2016-10-31 15:26:52'),(242,67,'2016-10-31 15:24:01'),(243,67,'2016-10-31 15:18:01'),(244,67,'2016-10-31 16:04:00'),(245,70,'2016-11-01 10:23:26'),(246,70,'2016-11-01 18:20:55'),(247,70,'2016-11-01 10:23:53'),(248,70,'2016-11-01 18:22:27'),(249,70,'2016-11-01 09:25:47'),(250,71,'2016-11-01 18:20:55'),(251,71,'2016-11-01 09:25:47'),(252,71,'2016-11-01 10:23:53'),(253,71,'2016-11-01 18:22:27'),(254,71,'2016-11-01 10:23:26'),(255,72,'2016-11-02 09:21:01'),(256,72,'2016-11-02 09:21:00'),(257,72,'2016-11-02 10:34:06'),(258,73,'2016-11-03 21:33:13'),(259,74,'2016-11-07 17:08:29'),(260,75,'2016-11-08 17:37:36'),(261,75,'2016-11-08 17:37:29'),(262,76,'2016-11-09 21:07:56'),(263,77,'2016-11-10 14:22:18'),(264,78,'2016-11-12 11:23:59'),(265,78,'2016-11-12 10:20:19'),(266,78,'2016-11-12 15:17:09'),(267,78,'2016-11-12 15:00:33'),(268,78,'2016-11-12 10:28:38'),(269,78,'2016-11-12 11:23:47'),(270,78,'2016-11-12 16:48:33'),(271,78,'2016-11-12 11:23:46'),(272,78,'2016-11-13 08:18:00'),(273,78,'2016-11-13 15:28:51'),(274,78,'2016-11-13 16:14:17'),(275,78,'2016-11-13 17:32:47'),(276,78,'2016-11-13 17:09:33'),(277,78,'2016-11-13 16:11:09'),(278,78,'2016-11-13 00:56:52'),(279,78,'2016-11-13 15:54:06'),(280,78,'2016-11-13 01:03:28'),(281,78,'2016-11-13 16:16:14'),(282,78,'2016-11-13 15:38:24'),(283,78,'2016-11-13 00:57:00'),(284,78,'2016-11-13 17:00:48'),(285,78,'2016-11-13 15:24:41'),(286,78,'2016-11-13 17:26:00'),(287,78,'2016-11-13 15:13:06'),(288,78,'2016-11-13 16:01:08'),(289,78,'2016-11-13 01:05:01'),(290,78,'2016-11-13 12:04:29'),(291,78,'2016-11-13 01:04:45'),(292,78,'2016-11-13 11:32:10'),(293,78,'2016-11-13 15:43:06'),(294,78,'2016-11-13 15:37:57'),(295,78,'2016-11-13 16:11:30'),(296,78,'2016-11-13 11:32:17'),(297,78,'2016-11-13 17:21:23'),(298,78,'2016-11-13 15:53:57'),(299,78,'2016-11-13 16:17:28'),(300,78,'2016-11-13 15:52:21'),(301,79,'2016-11-13 17:58:27'),(302,80,'2016-11-13 14:49:08'),(303,81,'2016-11-14 09:23:33'),(304,81,'2016-11-14 09:23:23'),(305,81,'2016-11-14 11:10:39'),(306,81,'2016-11-14 09:23:46'),(307,81,'2016-11-14 11:13:48'),(308,82,'2016-11-15 05:27:06'),(309,83,'2016-11-15 05:26:35'),(310,83,'2016-11-16 05:24:21'),(311,84,'2016-11-16 16:07:36'),(312,85,'2016-11-17 05:25:00'),(313,86,'2016-11-17 05:25:12'),(314,85,'2016-11-18 05:24:52'),(315,87,'2016-11-18 05:25:02'),(316,87,'2016-11-18 05:25:01'),(317,88,'2016-11-19 20:35:51'),(318,82,'2016-11-19 05:24:57'),(319,89,'2016-11-20 05:25:02'),(320,89,'2016-11-20 05:25:04'),(321,90,'2016-11-21 05:24:57'),(322,91,'2016-11-21 05:24:30'),(323,89,'2016-11-21 05:25:00'),(324,92,'2016-11-22 22:12:05'),(325,92,'2016-11-22 22:55:56'),(326,92,'2016-11-22 22:12:31'),(327,92,'2016-11-22 22:11:04'),(328,93,'2016-11-22 05:25:05'),(329,94,'2016-11-22 05:25:27'),(330,95,'2016-11-22 05:40:16'),(331,96,'2016-11-23 16:04:48'),(332,97,'2016-11-23 20:06:23'),(333,97,'2016-11-23 20:06:43'),(334,97,'2016-11-23 20:17:56'),(335,97,'2016-11-23 20:06:38'),(336,97,'2016-11-23 20:08:59'),(337,97,'2016-11-23 20:06:30'),(338,97,'2016-11-23 20:17:40'),(339,98,'2016-11-24 05:20:42'),(340,98,'2016-11-24 05:20:39'),(341,99,'2016-11-26 14:23:31'),(342,99,'2016-11-26 10:49:29'),(343,99,'2016-11-26 10:54:24'),(344,99,'2016-11-26 14:35:37'),(345,100,'2016-11-26 16:11:54'),(346,99,'2016-11-27 07:53:56'),(347,101,'2016-11-27 00:07:13'),(348,102,'2016-11-27 00:02:39'),(349,103,'2016-11-28 00:04:15'),(350,103,'2016-11-28 00:03:52'),(351,102,'2016-11-28 00:03:27'),(352,102,'2016-11-28 00:03:27'),(353,104,'2016-11-28 00:18:00'),(354,104,'2016-11-28 00:18:00'),(355,105,'2016-11-28 00:04:53'),(356,106,'2016-11-28 00:03:25'),(357,107,'2016-11-29 21:02:02'),(358,107,'2016-11-29 21:11:58'),(359,107,'2016-11-29 20:58:29'),(360,107,'2016-11-29 21:37:32'),(361,107,'2016-11-29 21:00:25'),(362,107,'2016-11-29 22:06:57'),(363,107,'2016-11-29 21:30:24'),(364,107,'2016-11-29 20:59:29'),(365,107,'2016-11-29 21:32:52'),(366,107,'2016-11-29 21:40:53'),(367,107,'2016-11-29 21:00:20'),(368,108,'2016-11-29 00:07:20'),(369,108,'2016-11-29 00:07:20'),(370,106,'2016-11-29 00:06:56'),(371,109,'2016-11-30 00:11:58'),(372,110,'2016-11-30 00:07:14'),(373,111,'2016-11-30 20:03:59'),(374,112,'2016-11-30 12:16:09'),(375,112,'2016-11-30 12:11:15'),(376,112,'2016-11-30 12:11:03'),(377,113,'2016-11-30 00:06:58'),(378,106,'2016-11-30 00:11:39'),(379,114,'2016-12-01 23:00:19'),(380,114,'2016-12-01 23:00:53'),(381,114,'2016-12-01 22:59:32'),(382,114,'2016-12-01 23:04:14'),(383,114,'2016-12-01 23:02:16'),(384,115,'2016-12-01 00:13:30'),(385,116,'2016-12-01 14:26:24'),(386,117,'2016-12-01 14:17:47'),(387,113,'2016-12-01 00:15:04'),(388,118,'2016-12-01 00:17:55'),(389,119,'2016-12-01 14:19:41'),(390,120,'2016-12-02 08:11:09'),(391,120,'2016-12-02 08:11:05'),(392,121,'2016-12-02 00:23:10'),(393,122,'2016-12-02 00:16:35'),(394,101,'2016-12-02 00:19:52'),(395,123,'2016-12-02 00:36:53'),(396,123,'2016-12-02 00:23:09'),(397,90,'2016-12-02 05:24:34'),(398,91,'2016-12-02 05:24:34'),(399,124,'2016-12-03 09:57:34'),(400,124,'2016-12-03 09:57:33'),(401,125,'2016-12-03 00:24:03'),(402,126,'2016-12-03 00:19:30'),(403,103,'2016-12-03 00:18:10'),(404,127,'2016-12-03 00:20:50'),(405,123,'2016-12-03 00:30:28'),(406,104,'2016-12-03 00:22:33'),(407,128,'2016-12-03 00:16:27'),(408,113,'2016-12-03 00:18:11'),(409,129,'2016-12-03 00:14:38'),(410,130,'2016-12-03 00:17:47'),(411,131,'2016-12-03 00:18:13'),(412,132,'2016-12-03 00:26:38'),(413,133,'2016-12-04 00:16:19'),(414,134,'2016-12-04 00:17:24'),(415,125,'2016-12-04 00:45:50'),(416,125,'2016-12-04 00:37:49'),(417,135,'2016-12-04 00:31:05'),(418,136,'2016-12-04 00:19:46'),(419,113,'2016-12-04 00:17:12'),(420,129,'2016-12-04 00:19:03'),(421,137,'2016-12-04 00:18:52'),(422,138,'2016-12-05 00:21:27'),(423,125,'2016-12-05 00:24:56'),(424,122,'2016-12-05 00:27:00'),(425,102,'2016-12-05 00:22:03'),(426,102,'2016-12-05 00:19:59'),(427,110,'2016-12-05 00:19:20'),(428,139,'2016-12-05 00:22:35'),(429,128,'2016-12-05 00:17:59'),(430,105,'2016-12-05 00:21:53'),(431,140,'2016-12-05 00:37:22'),(432,141,'2016-12-05 11:12:09'),(433,141,'2016-12-05 11:12:09'),(434,142,'2016-12-05 00:27:22'),(435,143,'2016-12-05 00:21:45'),(436,144,'2016-12-05 15:20:18'),(437,145,'2016-12-05 16:55:29'),(438,129,'2016-12-05 00:22:50'),(439,146,'2016-12-06 22:04:30'),(440,146,'2016-12-06 21:15:43'),(441,146,'2016-12-06 21:15:36'),(442,146,'2016-12-06 21:58:17'),(443,146,'2016-12-06 22:38:58'),(444,146,'2016-12-06 22:03:13'),(445,146,'2016-12-06 22:37:40'),(446,141,'2016-12-06 18:24:03'),(447,147,'2016-12-07 18:54:26'),(448,148,'2016-12-07 21:18:31'),(449,141,'2016-12-07 15:51:44'),(450,141,'2016-12-07 15:58:41'),(451,141,'2016-12-07 18:08:23'),(452,141,'2016-12-07 15:52:01'),(453,149,'2016-12-07 19:05:41'),(454,149,'2016-12-07 18:47:35'),(455,149,'2016-12-07 18:46:38'),(456,149,'2016-12-07 23:08:23'),(457,149,'2016-12-07 22:29:33'),(458,149,'2016-12-07 21:47:25'),(459,85,'2016-12-08 05:18:50'),(460,150,'2016-12-08 19:38:29'),(461,151,'2016-12-08 09:19:25'),(462,152,'2016-12-08 22:55:22'),(463,152,'2016-12-08 22:55:39'),(464,152,'2016-12-08 22:55:08'),(465,128,'2016-12-08 00:28:31'),(466,153,'2016-12-08 05:14:51'),(467,91,'2016-12-08 05:14:51'),(468,129,'2016-12-08 00:30:28'),(469,154,'2016-12-08 19:46:45'),(470,149,'2016-12-08 07:36:57'),(471,149,'2016-12-08 07:37:21'),(472,142,'2016-12-08 00:36:47'),(473,142,'2016-12-08 00:36:47'),(474,142,'2016-12-08 00:37:39'),(475,106,'2016-12-08 00:29:54'),(476,155,'2016-12-09 09:45:37'),(477,155,'2016-12-09 09:46:57'),(478,155,'2016-12-09 09:54:48'),(479,156,'2016-12-09 08:31:05'),(480,157,'2016-12-09 16:33:43'),(481,102,'2016-12-09 00:35:41'),(482,158,'2016-12-09 00:30:40'),(483,158,'2016-12-09 00:30:21'),(484,159,'2016-12-10 23:45:48'),(485,159,'2016-12-10 23:36:45'),(486,159,'2016-12-10 23:38:48'),(487,103,'2016-12-11 00:46:23'),(488,103,'2016-12-11 00:43:41'),(489,160,'2016-12-11 08:40:45'),(490,161,'2016-12-11 00:46:15'),(491,162,'2016-12-11 13:36:16'),(492,163,'2016-12-11 13:36:04'),(493,105,'2016-12-11 00:35:15'),(494,118,'2016-12-11 00:39:54'),(495,159,'2016-12-11 15:50:50'),(496,159,'2016-12-11 19:17:50'),(497,159,'2016-12-11 17:10:30'),(498,159,'2016-12-11 16:44:09'),(499,164,'2016-12-11 00:43:38'),(500,142,'2016-12-11 00:46:15'),(501,106,'2016-12-11 00:38:16'),(502,165,'2016-12-12 10:21:37'),(503,166,'2016-12-12 09:06:25'),(504,158,'2016-12-12 00:40:31'),(505,167,'2016-12-12 19:59:23'),(506,167,'2016-12-12 20:51:37'),(507,167,'2016-12-12 19:59:18'),(508,164,'2016-12-12 00:41:33'),(509,168,'2016-12-12 00:35:16'),(510,125,'2016-12-13 00:58:18'),(511,103,'2016-12-13 00:52:29'),(512,169,'2016-12-13 00:46:09'),(513,170,'2016-12-13 00:48:45'),(514,113,'2016-12-13 00:49:51'),(515,171,'2016-12-13 16:34:38'),(516,172,'2016-12-14 14:51:29'),(517,173,'2016-12-14 21:56:44'),(518,173,'2016-12-14 21:56:28'),(519,174,'2016-12-14 13:19:52'),(520,175,'2016-12-14 15:43:01'),(521,175,'2016-12-14 11:24:12'),(522,175,'2016-12-14 13:41:18'),(523,175,'2016-12-14 11:24:24'),(524,85,'2016-12-15 05:05:43'),(525,176,'2016-12-15 16:36:13'),(526,101,'2016-12-15 02:10:49'),(527,161,'2016-12-15 00:59:13'),(528,177,'2016-12-15 08:37:47'),(529,110,'2016-12-15 00:45:10'),(530,178,'2016-12-15 00:41:53'),(531,90,'2016-12-15 05:05:43'),(532,105,'2016-12-15 00:41:40'),(533,91,'2016-12-15 05:05:39'),(534,118,'2016-12-15 01:16:42'),(535,179,'2016-12-15 22:45:14'),(536,179,'2016-12-15 22:01:27'),(537,122,'2016-12-16 01:03:42'),(538,83,'2016-12-16 05:05:42'),(539,180,'2016-12-16 05:05:02'),(540,181,'2016-12-16 10:54:11'),(541,113,'2016-12-16 00:52:14'),(542,105,'2016-12-16 00:48:39'),(543,172,'2016-12-16 00:50:02'),(544,182,'2016-12-16 22:33:05'),(545,94,'2016-12-16 05:04:59'),(546,183,'2016-12-16 16:38:30'),(547,184,'2016-12-16 21:30:11'),(548,184,'2016-12-16 21:56:37'),(549,184,'2016-12-16 22:30:50'),(550,184,'2016-12-16 22:02:41'),(551,185,'2016-12-16 08:32:30'),(552,106,'2016-12-16 00:49:41'),(553,106,'2016-12-16 00:52:17'),(554,186,'2016-12-17 16:35:22'),(555,172,'2016-12-17 01:02:46'),(556,187,'2016-12-17 16:40:57'),(557,188,'2016-12-17 08:37:48'),(558,189,'2016-12-17 00:48:51'),(559,190,'2016-12-17 05:04:43'),(560,190,'2016-12-17 05:04:42'),(561,191,'2016-12-17 21:19:17'),(562,191,'2016-12-17 21:17:59'),(563,184,'2016-12-17 08:59:34'),(564,184,'2016-12-17 08:59:33'),(565,192,'2016-12-17 16:05:44'),(566,193,'2016-12-17 05:04:42'),(567,194,'2016-12-17 00:36:12'),(568,101,'2016-12-18 01:09:33'),(569,102,'2016-12-18 01:38:42'),(570,195,'2016-12-18 01:15:28'),(571,128,'2016-12-18 00:56:03'),(572,196,'2016-12-18 01:11:03'),(573,191,'2016-12-18 13:42:23'),(574,191,'2016-12-18 11:37:12'),(575,191,'2016-12-18 13:42:24'),(576,94,'2016-12-18 05:02:32'),(577,108,'2016-12-18 01:01:58'),(578,193,'2016-12-18 05:02:31'),(579,197,'2016-12-18 00:36:01'),(580,161,'2016-12-19 01:09:08'),(581,198,'2016-12-19 18:23:03'),(582,199,'2016-12-19 00:14:17'),(583,108,'2016-12-19 01:14:50'),(584,129,'2016-12-19 00:59:52'),(585,200,'2016-12-19 09:23:02'),(586,82,'2016-12-20 04:58:39'),(587,201,'2016-12-20 08:34:34'),(588,189,'2016-12-20 00:58:15'),(589,202,'2016-12-20 04:59:29'),(590,203,'2016-12-20 00:41:59'),(591,204,'2016-12-20 09:22:16'),(592,137,'2016-12-20 01:14:30'),(593,205,'2016-12-20 02:09:57'),(594,206,'2016-12-20 16:06:33'),(595,103,'2016-12-20 01:21:53'),(596,169,'2016-12-20 01:13:31'),(597,170,'2016-12-20 01:46:24'),(598,158,'2016-12-20 01:01:05'),(599,98,'2016-12-20 04:59:30'),(600,207,'2016-12-20 20:02:07'),(601,129,'2016-12-20 01:04:05'),(602,106,'2016-12-20 01:06:19'),(603,208,'2016-12-20 01:21:08'),(604,209,'2016-12-21 16:59:39'),(605,210,'2016-12-21 03:25:29'),(606,211,'2016-12-21 19:56:37'),(607,169,'2016-12-21 01:23:45'),(608,128,'2016-12-21 01:00:01'),(609,128,'2016-12-21 01:00:14'),(610,131,'2016-12-21 01:27:01'),(611,132,'2016-12-21 01:23:39'),(612,212,'2016-12-21 08:35:57'),(613,213,'2016-12-22 02:49:25'),(614,121,'2016-12-22 01:36:53'),(615,214,'2016-12-22 01:26:20'),(616,125,'2016-12-22 01:38:12'),(617,215,'2016-12-22 08:30:09'),(618,216,'2016-12-22 01:15:32'),(619,217,'2016-12-22 16:47:22'),(620,103,'2016-12-22 01:32:28'),(621,110,'2016-12-22 02:47:12'),(622,128,'2016-12-22 01:36:53'),(623,168,'2016-12-22 00:34:45'),(624,137,'2016-12-22 01:16:53'),(625,134,'2016-12-23 01:16:22'),(626,102,'2016-12-23 01:15:05'),(627,195,'2016-12-23 01:25:53'),(628,101,'2016-12-23 02:20:32'),(629,136,'2016-12-23 01:24:13'),(630,218,'2016-12-23 14:59:32'),(631,219,'2016-12-23 10:24:49'),(632,219,'2016-12-23 10:25:04'),(633,219,'2016-12-23 10:25:04'),(634,105,'2016-12-23 01:36:17'),(635,142,'2016-12-23 01:52:54'),(636,205,'2016-12-23 02:23:51'),(637,170,'2016-12-23 01:56:58'),(638,164,'2016-12-23 01:21:09'),(639,220,'2016-12-23 01:38:01'),(640,221,'2016-12-23 08:31:01'),(641,222,'2016-12-23 00:40:55'),(642,223,'2016-12-24 01:22:53'),(643,122,'2016-12-24 01:44:28'),(644,102,'2016-12-24 01:23:45'),(645,102,'2016-12-24 01:23:33'),(646,161,'2016-12-24 01:39:37'),(647,195,'2016-12-24 01:58:53'),(648,224,'2016-12-24 01:52:28'),(649,93,'2016-12-24 04:54:52'),(650,93,'2016-12-24 04:54:59'),(651,218,'2016-12-24 09:52:07'),(652,218,'2016-12-24 09:42:43'),(653,105,'2016-12-24 01:35:21'),(654,225,'2016-12-24 01:30:27'),(655,225,'2016-12-24 01:28:59'),(656,140,'2016-12-24 01:45:22'),(657,131,'2016-12-24 01:37:57'),(658,142,'2016-12-24 01:32:48'),(659,197,'2016-12-24 00:42:29'),(660,164,'2016-12-24 01:27:11'),(661,193,'2016-12-24 04:54:39'),(662,221,'2016-12-24 08:30:18'),(663,125,'2016-12-25 01:28:28'),(664,226,'2016-12-25 01:33:51'),(665,227,'2016-12-25 01:20:14'),(666,218,'2016-12-25 15:40:24'),(667,218,'2016-12-25 15:07:41'),(668,218,'2016-12-25 15:42:30'),(669,218,'2016-12-25 15:42:42'),(670,218,'2016-12-25 21:40:44'),(671,131,'2016-12-25 01:21:50'),(672,131,'2016-12-25 01:21:37'),(673,220,'2016-12-25 01:35:23'),(674,143,'2016-12-25 01:34:04'),(675,228,'2016-12-26 15:29:53'),(676,214,'2016-12-26 01:37:43'),(677,229,'2016-12-26 01:30:02'),(678,230,'2016-12-26 17:15:42'),(679,231,'2016-12-26 11:15:46'),(680,232,'2016-12-26 14:15:43'),(681,233,'2016-12-26 00:13:21'),(682,131,'2016-12-26 01:31:38'),(683,130,'2016-12-26 01:43:57'),(684,220,'2016-12-26 01:45:20'),(685,234,'2016-12-26 05:15:46'),(686,208,'2016-12-26 01:44:26'),(687,134,'2016-12-27 01:39:20'),(688,216,'2016-12-27 01:40:32'),(689,135,'2016-12-27 01:42:08'),(690,161,'2016-12-27 01:35:34'),(691,108,'2016-12-27 01:34:47'),(692,129,'2016-12-27 01:25:01'),(693,129,'2016-12-27 01:24:47'),(694,143,'2016-12-27 01:41:07'),(695,142,'2016-12-27 01:37:46'),(696,235,'2016-12-27 23:15:46'),(697,236,'2016-12-27 08:31:39'),(698,106,'2016-12-27 01:23:29'),(699,228,'2016-12-28 15:50:08'),(700,228,'2016-12-28 15:48:44'),(701,228,'2016-12-28 15:47:32'),(702,228,'2016-12-28 15:49:19'),(703,229,'2016-12-28 01:41:22'),(704,135,'2016-12-28 01:38:28'),(705,135,'2016-12-28 01:39:40'),(706,139,'2016-12-28 01:37:33'),(707,233,'2016-12-28 08:34:47'),(708,118,'2016-12-28 01:56:08'),(709,105,'2016-12-28 01:43:25'),(710,105,'2016-12-28 01:43:37'),(711,130,'2016-12-28 01:50:37'),(712,237,'2016-12-28 01:47:36'),(713,237,'2016-12-28 01:47:21'),(714,106,'2016-12-28 01:29:16'),(715,106,'2016-12-28 01:26:46'),(716,106,'2016-12-28 01:29:00'),(717,228,'2016-12-29 19:07:22'),(718,228,'2016-12-29 14:26:27'),(719,228,'2016-12-29 14:26:53'),(720,122,'2016-12-29 01:40:06'),(721,238,'2016-12-29 00:38:04'),(722,210,'2016-12-29 16:39:55'),(723,239,'2016-12-29 08:35:52'),(724,139,'2016-12-29 01:41:51'),(725,189,'2016-12-29 01:49:37'),(726,240,'2016-12-30 00:39:34'),(727,214,'2016-12-30 01:40:40'),(728,103,'2016-12-30 01:54:32'),(729,169,'2016-12-30 01:41:43'),(730,227,'2016-12-30 01:55:28'),(731,178,'2016-12-30 16:38:25'),(732,105,'2016-12-30 01:52:14'),(733,241,'2016-12-30 08:35:55'),(734,242,'2016-12-30 01:41:18'),(735,134,'2016-12-31 03:14:04'),(736,122,'2016-12-31 05:28:26'),(737,136,'2016-12-31 02:47:36'),(738,113,'2016-12-31 03:32:28'),(739,105,'2016-12-31 03:54:19'),(740,118,'2016-12-31 04:20:40'),(741,121,'2016-12-31 05:53:48'),(742,238,'2016-12-31 08:29:13'),(743,160,'2016-12-31 00:38:35'),(744,169,'2016-12-31 04:43:52'),(745,243,'2016-12-31 22:10:59'),(746,220,'2016-12-31 04:34:27'),(747,106,'2016-12-31 02:23:27'),(748,244,'2016-12-31 16:32:24'),(749,245,'2017-01-02 01:45:30'),(750,127,'2017-01-02 05:55:46'),(751,246,'2017-01-02 05:12:59'),(752,139,'2017-01-02 01:39:17'),(753,224,'2017-01-02 06:02:36'),(754,225,'2017-01-02 01:32:59'),(755,118,'2017-01-02 12:14:27'),(756,247,'2017-01-02 16:39:52'),(757,140,'2017-01-02 05:57:39'),(758,205,'2017-01-02 01:37:55'),(759,248,'2017-01-02 03:21:13'),(760,216,'2017-01-02 01:40:27'),(761,103,'2017-01-02 02:06:25'),(762,169,'2017-01-02 05:15:50'),(763,196,'2017-01-02 02:37:33'),(764,249,'2017-01-02 15:12:28'),(765,249,'2017-01-02 15:12:47'),(766,129,'2017-01-02 05:01:25'),(767,220,'2017-01-02 05:47:53'),(768,106,'2017-01-02 01:24:27'),(769,250,'2017-01-02 00:28:37'),(770,134,'2017-01-03 02:22:44'),(771,134,'2017-01-03 00:51:35'),(772,101,'2017-01-03 00:53:26'),(773,136,'2017-01-03 00:54:44'),(774,108,'2017-01-03 00:53:48'),(775,140,'2017-01-03 04:36:24'),(776,131,'2017-01-03 02:19:49'),(777,130,'2017-01-03 03:16:44'),(778,251,'2017-01-03 08:51:47'),(779,251,'2017-01-03 08:51:26'),(780,252,'2017-01-03 16:48:41'),(781,129,'2017-01-03 02:09:37'),(782,253,'2017-01-03 08:29:59'),(783,106,'2017-01-03 00:48:22'),(784,208,'2017-01-03 02:37:56'),(785,254,'2017-01-19 21:58:35'),(786,254,'2017-01-19 23:58:33'),(787,255,'2017-01-19 19:58:19'),(788,256,'2017-01-20 00:57:40'),(789,195,'2017-01-20 00:16:56'),(790,104,'2017-01-20 01:09:14'),(791,257,'2017-01-20 01:13:56'),(792,257,'2017-01-20 00:17:29'),(793,118,'2017-01-20 00:23:43'),(794,118,'2017-01-20 01:33:45'),(795,105,'2017-01-20 00:48:07'),(796,140,'2017-01-20 00:23:33'),(797,258,'2017-01-20 23:15:45'),(798,258,'2017-01-20 23:14:12'),(799,258,'2017-01-20 23:19:32'),(800,258,'2017-01-20 23:19:41'),(801,258,'2017-01-20 23:19:50'),(802,258,'2017-01-20 23:26:29'),(803,258,'2017-01-20 23:12:48'),(804,258,'2017-01-20 23:08:31'),(805,258,'2017-01-20 23:16:15'),(806,258,'2017-01-20 23:13:18'),(807,258,'2017-01-20 23:08:56'),(808,258,'2017-01-20 23:56:49'),(809,258,'2017-01-20 23:13:42'),(810,258,'2017-01-20 23:20:28'),(811,258,'2017-01-20 23:31:56'),(812,258,'2017-01-20 23:28:17'),(813,259,'2017-01-20 22:15:02'),(814,259,'2017-01-20 11:19:58'),(815,259,'2017-01-20 11:15:21'),(816,259,'2017-01-20 14:10:55'),(817,259,'2017-01-20 14:20:30'),(818,259,'2017-01-20 15:09:53'),(819,259,'2017-01-20 14:13:27'),(820,259,'2017-01-20 11:20:28'),(821,259,'2017-01-20 14:18:02'),(822,259,'2017-01-20 14:21:50'),(823,259,'2017-01-20 15:09:33'),(824,259,'2017-01-20 14:12:55'),(825,259,'2017-01-20 11:20:29'),(826,259,'2017-01-20 14:17:32'),(827,259,'2017-01-20 14:23:04'),(828,106,'2017-01-20 00:12:54'),(829,245,'2017-01-20 00:13:03'),(830,161,'2017-01-20 00:18:21'),(831,139,'2017-01-20 01:05:43'),(832,189,'2017-01-20 00:10:59'),(833,225,'2017-01-20 00:14:41'),(834,108,'2017-01-20 00:15:10'),(835,255,'2017-01-20 00:11:38'),(836,255,'2017-01-20 00:14:54'),(837,255,'2017-01-20 00:10:57'),(838,255,'2017-01-20 00:12:26'),(839,255,'2017-01-20 00:14:24'),(840,142,'2017-01-20 00:16:01'),(841,229,'2017-01-20 00:15:47'),(842,172,'2017-01-20 00:14:32'),(843,216,'2017-01-20 01:07:43'),(844,254,'2017-01-19 22:12:02'),(845,254,'2017-01-19 22:11:43'),(846,254,'2017-01-19 22:12:10'),(847,254,'2017-01-19 22:12:06'),(848,103,'2017-01-20 00:14:42'),(849,169,'2017-01-20 01:01:40'),(850,196,'2017-01-20 00:19:57'),(851,220,'2017-01-20 00:13:09'),(852,220,'2017-01-20 00:16:38'),(853,237,'2017-01-20 00:14:29'),(854,242,'2017-01-20 01:10:01');

/*Data for the table `sj_guestshistory` */

insert  into `sj_guestshistory`(`G_ID`,`G_IPADDRESS`,`G_PROVINCEANDCITY`,`G_FIRSTVISITORDATE`,`G_LASTVISITORDATE`) values (1,'58.101.56.249','','2016-09-18 14:46:25','2016-09-18 14:46:42'),(2,'115.198.106.201','中国浙江杭州江干','2016-09-19 10:35:17','2016-09-23 00:00:01'),(3,'218.109.8.125','','2016-09-19 22:03:03','2016-09-25 00:00:01'),(4,'123.151.64.201','中国天津天津None','2016-09-19 17:43:57','2016-09-19 17:43:57'),(5,'110.178.67.227','','2016-09-19 16:18:38','2016-09-19 17:36:53'),(6,'171.117.99.206','中国山西太原万柏','2016-09-19 17:21:06','2016-09-19 17:49:13'),(7,'125.120.144.182','中国浙江杭州西湖','2016-09-20 11:42:04','2016-09-20 11:42:08'),(8,'112.225.175.158','','2016-09-20 21:00:16','2016-09-20 21:00:16'),(9,'101.226.125.103','','2016-09-20 11:56:33','2016-09-20 11:56:33'),(10,'110.178.98.217','中国山西太原万柏','2016-09-21 16:53:48','2016-09-21 17:05:04'),(11,'220.181.132.194','中国广东广州花都','2016-09-21 16:30:43','2016-09-21 16:30:43'),(12,'101.199.108.51','中国广东广州天河','2016-09-21 16:32:29','2016-09-21 16:32:29'),(13,'183.156.33.37','中国浙江杭州江干','2016-09-21 12:22:19','2016-09-21 12:22:19'),(14,'101.199.108.55','中国广东广州天河','2016-09-21 16:30:42','2016-09-21 16:30:42'),(15,'106.120.160.119','','2016-09-21 16:30:22','2016-09-21 16:32:04'),(16,'121.35.103.97','中国广东深圳南山','2016-09-22 23:22:44','2016-09-22 23:22:44'),(17,'180.153.81.203','','2016-09-24 22:33:16','2016-09-24 22:33:16'),(18,'110.178.68.5','中国山西太原万柏','2016-09-24 09:36:44','2016-09-24 09:36:44'),(19,'113.108.12.154','中国浙江温州None','2016-09-25 14:53:42','2016-09-25 14:53:42'),(20,'112.17.247.221','中国浙江杭州萧山','2016-09-25 14:53:28','2016-09-25 14:57:00'),(21,'183.157.51.199','中国浙江杭州江干','2016-09-26 09:18:53','2016-09-26 16:16:44'),(22,'110.178.86.134','中国山西太原万柏','2016-09-26 16:59:02','2016-09-26 16:59:02'),(23,'121.35.100.189','中国广东深圳南山','2016-09-27 22:50:13','2016-09-27 22:50:13'),(24,'183.184.74.79','中国山西太原尖草坪','2016-09-30 07:30:36','2016-09-30 22:19:55'),(25,'171.118.82.124','','2016-10-02 23:57:32','2016-10-04 00:00:00'),(26,'171.118.174.62','','2016-10-02 10:52:13','2016-10-02 11:25:03'),(27,'171.118.82.245','','2016-10-03 17:42:31','2016-10-03 20:43:53'),(28,'58.100.182.93','','2016-10-09 20:19:59','2016-10-11 00:00:01'),(29,'223.12.205.185','中国山西太原小店','2016-10-10 21:40:46','2016-10-10 21:40:46'),(30,'121.35.103.31','中国广东深圳南山','2016-10-10 22:35:27','2016-10-10 22:35:27'),(31,'218.109.143.199','中国浙江杭州江干','2016-10-10 22:49:47','2016-10-10 22:49:47'),(32,'113.108.21.33','中国广东深圳None','2016-10-10 20:22:08','2016-10-10 20:22:08'),(33,'218.109.15.1','','2016-10-12 22:07:50','2016-10-12 22:09:45'),(34,'60.177.106.116','','2016-10-12 09:43:36','2016-10-12 09:51:10'),(35,'60.177.106.116','','2016-10-13 11:38:44','2016-10-13 11:38:44'),(36,'60.177.106.116','','2016-10-13 11:38:44','2016-10-13 11:38:44'),(37,'183.195.146.64','','2016-10-14 11:38:56','2016-10-14 11:38:56'),(38,'211.161.244.23','中国上海上海宝山','2016-10-17 23:28:08','2016-10-17 23:28:08'),(39,'114.95.99.71','中国上海上海松江','2016-10-17 22:55:17','2016-10-17 23:27:50'),(40,'183.60.1.26','中国广东深圳None','2016-10-17 23:37:34','2016-10-17 23:37:34'),(41,'180.168.162.210','中国上海上海宝山','2016-10-18 13:45:27','2016-10-18 13:45:27'),(42,'61.151.186.144','','2016-10-18 00:10:41','2016-10-18 00:10:41'),(43,'218.109.154.167','中国浙江杭州江干','2016-10-18 22:53:14','2016-10-18 22:53:14'),(44,'117.136.8.72','中国上海上海浦东','2016-10-18 09:10:56','2016-10-18 09:10:56'),(45,'175.102.134.140','中国上海上海徐汇','2016-10-18 10:14:02','2016-10-18 10:14:02'),(46,'112.97.30.190','中国广东广州白云','2016-10-18 08:32:06','2016-10-18 08:32:06'),(47,'114.85.6.111','','2016-10-18 10:16:17','2016-10-18 10:16:17'),(48,'223.166.15.80','中国上海上海长宁','2016-10-18 11:48:08','2016-10-18 11:48:25'),(49,'101.81.232.254','中国上海上海普陀','2016-10-18 11:05:51','2016-10-18 11:05:51'),(50,'223.104.5.198','中国上海上海浦东','2016-10-18 10:23:35','2016-10-18 10:23:35'),(51,'218.109.10.233','中国浙江杭州江干','2016-10-19 21:37:02','2016-10-19 21:37:02'),(52,'175.189.55.151','中国湖北武汉武昌','2016-10-19 12:25:59','2016-10-19 12:25:59'),(53,'223.211.223.82','','2016-10-19 22:20:38','2016-10-19 22:20:38'),(54,'180.153.163.205','中国广东珠海None','2016-10-19 14:39:33','2016-10-19 14:39:33'),(55,'58.100.183.219','中国浙江杭州江干','2016-10-20 20:41:11','2016-10-20 20:41:59'),(56,'58.100.183.219','中国浙江杭州江干','2016-10-20 20:41:11','2016-10-20 20:41:59'),(57,'58.100.183.219','中国浙江杭州江干','2016-10-21 08:01:45','2016-10-21 08:01:45'),(58,'115.198.111.172','中国浙江杭州江干','2016-10-21 12:06:42','2016-10-21 12:06:42'),(59,'58.101.39.209','中国浙江杭州江干','2016-10-22 08:10:43','2016-10-22 12:18:01'),(60,'104.44.96.167','美国NoneNoneNone','2016-10-22 19:18:49','2016-10-22 19:18:49'),(61,'183.157.50.197','中国浙江杭州江干','2016-10-24 11:20:27','2016-10-27 00:00:02'),(62,'58.100.87.55','中国浙江杭州西湖','2016-10-25 21:29:25','2016-10-25 21:29:25'),(63,'218.109.15.94','中国浙江杭州江干','2016-10-25 07:46:57','2016-10-25 07:46:57'),(64,'218.109.10.140','中国浙江杭州江干','2016-10-26 21:18:48','2016-10-28 00:00:03'),(65,'183.157.50.197','中国浙江杭州江干','2016-10-27 09:17:29','2016-10-27 09:17:29'),(66,'60.186.197.2','','2016-10-28 16:14:07','2016-10-28 16:14:07'),(67,'115.205.240.216','中国浙江杭州江干','2016-10-28 15:59:20','2016-11-01 00:00:01'),(68,'219.82.211.169','中国浙江杭州江干','2016-10-28 23:09:45','2016-10-28 23:09:45'),(69,'218.109.154.174','中国浙江杭州江干','2016-10-30 10:11:00','2016-10-30 10:11:54'),(70,'60.177.185.55','','2016-11-01 09:25:47','2016-11-01 18:22:27'),(71,'60.177.185.55','','2016-11-01 09:25:47','2016-11-01 18:22:27'),(72,'60.177.185.55','中国浙江杭州江干','2016-11-02 09:21:00','2016-11-02 10:34:06'),(73,'218.109.155.210','中国浙江杭州江干','2016-11-03 21:33:13','2016-11-03 21:33:13'),(74,'115.198.110.64','中国浙江杭州江干','2016-11-07 17:08:29','2016-11-07 17:08:29'),(75,'115.198.110.64','中国浙江杭州江干','2016-11-08 17:37:29','2016-11-08 17:37:36'),(76,'58.101.230.116','中国浙江杭州江干','2016-11-09 21:07:56','2016-11-09 21:07:56'),(77,'183.156.43.243','中国浙江杭州江干','2016-11-10 14:22:18','2016-11-10 14:22:18'),(78,'218.109.166.165','中国浙江杭州江干','2016-11-12 10:20:19','2016-11-14 00:00:00'),(79,'125.122.54.130','中国浙江杭州余杭','2016-11-13 17:58:27','2016-11-13 17:58:27'),(80,'60.176.112.216','中国浙江杭州江干','2016-11-13 14:49:08','2016-11-13 14:49:08'),(81,'122.235.210.115','中国浙江杭州江干','2016-11-14 09:23:23','2016-11-14 11:13:48'),(82,'121.42.0.59','中国浙江杭州淳安','2016-11-15 05:27:06','2016-12-21 00:00:00'),(83,'121.42.0.55','中国浙江杭州淳安','2016-11-15 05:26:35','2016-12-17 00:00:00'),(84,'183.157.37.85','','2016-11-16 16:07:36','2016-11-16 16:07:36'),(85,'121.42.0.71','中国浙江杭州淳安','2016-11-17 05:25:00','2016-12-16 00:00:01'),(86,'121.42.0.56','中国浙江杭州淳安','2016-11-17 05:25:12','2016-11-17 05:25:12'),(87,'121.42.0.61','中国浙江杭州淳安','2016-11-18 05:25:01','2016-11-18 05:25:02'),(88,'58.101.42.22','中国浙江杭州江干','2016-11-19 20:35:51','2016-11-19 20:35:51'),(89,'121.42.0.62','中国浙江杭州淳安','2016-11-20 05:25:02','2016-11-22 00:00:01'),(90,'121.42.0.64','中国浙江杭州淳安','2016-11-21 05:24:57','2016-12-16 00:00:03'),(91,'121.42.0.54','中国浙江杭州淳安','2016-11-21 05:24:30','2016-12-16 00:00:03'),(92,'218.109.142.55','中国浙江杭州江干','2016-11-22 22:11:04','2016-11-22 22:55:56'),(93,'121.42.0.67','','2016-11-22 05:25:05','2016-12-25 00:00:02'),(94,'121.42.0.63','中国浙江杭州淳安','2016-11-22 05:25:27','2016-12-19 00:00:01'),(95,'123.125.71.55','','2016-11-22 05:40:16','2016-11-22 05:40:16'),(96,'110.178.72.72','中国山西太原万柏','2016-11-23 16:04:48','2016-11-23 16:04:48'),(97,'218.109.16.248','中国浙江杭州江干','2016-11-23 20:06:23','2016-11-23 20:17:56'),(98,'121.42.0.65','中国浙江杭州淳安','2016-11-24 05:20:39','2016-12-21 00:00:02'),(99,'219.82.212.170','中国浙江杭州江干','2016-11-26 10:49:29','2016-11-28 00:00:00'),(100,'220.181.108.153','中国广东深圳None','2016-11-26 16:11:54','2016-11-26 16:11:54'),(101,'123.150.186.36','中国天津天津宝坻','2016-11-27 00:07:13','2017-01-04 00:00:01'),(102,'112.21.182.17','中国江苏常州None','2016-11-27 00:02:39','2016-12-25 00:00:02'),(103,'42.236.123.153','中国河南郑州None','2016-11-28 00:03:52','2017-01-21 00:00:02'),(104,'223.71.143.234','中国北京北京西城','2016-11-28 00:18:00','2017-01-21 00:00:01'),(105,'59.46.7.49','','2016-11-28 00:04:53','2017-01-21 00:00:02'),(106,'123.134.186.231','中国山东莱芜莱城','2016-11-28 00:03:25','2017-01-21 00:00:02'),(107,'58.100.182.144','中国浙江杭州江干','2016-11-29 20:58:29','2016-11-29 22:06:57'),(108,'103.47.136.16','中国上海上海闸北','2016-11-29 00:07:20','2017-01-21 00:00:02'),(109,'139.214.113.18','','2016-11-30 00:11:58','2016-11-30 00:11:58'),(110,'119.188.112.219','中国山东济南None','2016-11-30 00:07:14','2016-12-23 00:00:03'),(111,'218.109.154.7','中国浙江杭州江干','2016-11-30 20:03:59','2016-11-30 20:03:59'),(112,'183.157.61.9','中国浙江杭州江干','2016-11-30 12:11:03','2016-11-30 12:16:09'),(113,'103.47.136.18','中国上海上海闸北','2016-11-30 00:06:58','2017-01-01 00:00:03'),(114,'219.82.74.156','中国浙江杭州江干','2016-12-01 22:59:32','2016-12-01 23:04:14'),(115,'119.188.98.9','中国山东济南None','2016-12-01 00:13:30','2016-12-01 00:13:30'),(116,'220.181.108.162','中国广东深圳None','2016-12-01 14:26:24','2016-12-01 14:26:24'),(117,'113.24.100.207','中国山西太原万柏','2016-12-01 14:17:47','2016-12-01 14:17:47'),(118,'183.95.80.214','','2016-12-01 00:17:55','2017-01-21 00:00:02'),(119,'117.185.27.113','中国NoneNoneNone','2016-12-01 14:19:41','2016-12-01 14:19:41'),(120,'219.82.74.156','','2016-12-02 08:11:05','2016-12-02 08:11:09'),(121,'222.161.223.154','中国吉林长春None','2016-12-02 00:23:10','2017-01-01 00:00:04'),(122,'220.170.181.36','中国湖南株洲醴陵','2016-12-02 00:16:35','2017-01-01 00:00:03'),(123,'183.95.80.215','中国湖北武汉None','2016-12-02 00:23:09','2016-12-04 00:00:02'),(124,'218.109.137.85','','2016-12-03 09:57:33','2016-12-03 09:57:34'),(125,'220.170.181.37','中国湖南株洲醴陵','2016-12-03 00:24:03','2016-12-26 00:00:01'),(126,'112.21.182.14','中国江苏常州None','2016-12-03 00:19:30','2016-12-03 00:19:30'),(127,'117.23.59.62','中国河南郑州金水','2016-12-03 00:20:50','2017-01-03 00:00:01'),(128,'59.46.7.51','中国辽宁沈阳None','2016-12-03 00:16:27','2016-12-23 00:00:03'),(129,'123.134.186.234','中国山东莱芜莱城','2016-12-03 00:14:38','2017-01-04 00:00:02'),(130,'122.228.114.165','中国浙江温州None','2016-12-03 00:17:47','2017-01-04 00:00:02'),(131,'14.29.87.39','中国广东广州None','2016-12-03 00:18:13','2017-01-04 00:00:02'),(132,'117.23.59.61','中国河南郑州金水','2016-12-03 00:26:38','2016-12-22 00:00:02'),(133,'119.188.98.9','','2016-12-04 00:16:19','2016-12-04 00:16:19'),(134,'112.21.182.13','中国江苏常州None','2016-12-04 00:17:24','2017-01-04 00:00:01'),(135,'124.232.137.180','','2016-12-04 00:31:05','2016-12-29 00:00:01'),(136,'223.71.143.236','中国北京北京西城','2016-12-04 00:19:46','2017-01-04 00:00:01'),(137,'122.228.114.163','','2016-12-04 00:18:52','2016-12-23 00:00:03'),(138,'119.188.98.9','中国山东济南None','2016-12-05 00:21:27','2016-12-05 00:21:27'),(139,'14.29.87.59','中国广东广州None','2016-12-05 00:22:35','2017-01-21 00:00:02'),(140,'183.95.80.213','中国湖北武汉None','2016-12-05 00:37:22','2017-01-21 00:00:02'),(141,'115.198.108.62','中国浙江杭州江干','2016-12-05 11:12:09','2016-12-08 00:00:01'),(142,'122.228.114.164','中国浙江温州None','2016-12-05 00:27:22','2017-01-21 00:00:02'),(143,'117.23.59.59','中国河南郑州金水','2016-12-05 00:21:45','2016-12-28 00:00:01'),(144,'220.181.108.166','中国广东深圳None','2016-12-05 15:20:18','2016-12-05 15:20:18'),(145,'220.181.108.97','中国广东深圳None','2016-12-05 16:55:29','2016-12-05 16:55:29'),(146,'58.100.156.40','中国浙江杭州江干','2016-12-06 21:15:36','2016-12-06 22:38:58'),(147,'113.108.10.15','中国广东深圳None','2016-12-07 18:54:26','2016-12-07 18:54:26'),(148,'223.104.5.224','中国上海上海浦东','2016-12-07 21:18:31','2016-12-07 21:18:31'),(149,'58.100.156.49','中国浙江杭州江干','2016-12-07 18:46:38','2016-12-09 00:00:02'),(150,'61.135.190.102','中国北京北京None','2016-12-08 19:38:29','2016-12-08 19:38:29'),(151,'220.181.108.169','中国广东深圳None','2016-12-08 09:19:25','2016-12-08 09:19:25'),(152,'58.101.54.29','中国浙江杭州江干','2016-12-08 22:55:08','2016-12-08 22:55:39'),(153,'121.42.0.58','中国浙江杭州淳安','2016-12-08 05:14:51','2016-12-08 05:14:51'),(154,'61.135.190.222','中国北京北京None','2016-12-08 19:46:45','2016-12-08 19:46:45'),(155,'110.178.85.129','中国山西太原万柏','2016-12-09 09:45:37','2016-12-09 09:54:48'),(156,'220.181.108.186','中国广东深圳None','2016-12-09 08:31:05','2016-12-09 08:31:05'),(157,'220.181.108.102','中国广东深圳None','2016-12-09 16:33:43','2016-12-09 16:33:43'),(158,'59.47.6.195','中国辽宁本溪明山','2016-12-09 00:30:21','2016-12-21 00:00:02'),(159,'58.100.157.238','','2016-12-10 23:36:45','2016-12-12 00:00:01'),(160,'220.181.108.179','','2016-12-11 08:40:45','2017-01-01 00:00:04'),(161,'183.60.252.28','中国广东广州番禺','2016-12-11 00:46:15','2017-01-21 00:00:02'),(162,'183.61.160.211','中国广东东莞None','2016-12-11 13:36:16','2016-12-11 13:36:16'),(163,'112.17.245.48','中国浙江杭州萧山','2016-12-11 13:36:04','2016-12-11 13:36:04'),(164,'117.23.59.60','','2016-12-11 00:43:38','2016-12-25 00:00:04'),(165,'202.97.148.202','中国山西太原尖草坪','2016-12-12 10:21:37','2016-12-12 10:21:37'),(166,'123.125.71.12','中国北京北京密云','2016-12-12 09:06:25','2016-12-12 09:06:25'),(167,'219.82.74.249','中国浙江杭州江干','2016-12-12 19:59:18','2016-12-12 20:51:37'),(168,'123.125.71.13','中国北京北京密云','2016-12-12 00:35:16','2016-12-23 00:00:03'),(169,'203.110.169.100','中国上海上海金山','2016-12-13 00:46:09','2017-01-21 00:00:02'),(170,'183.95.81.100','','2016-12-13 00:48:45','2016-12-24 00:00:08'),(171,'123.125.71.52','','2016-12-13 16:34:38','2016-12-13 16:34:38'),(172,'119.6.226.35','中国四川宜宾翠屏','2016-12-14 14:51:29','2017-01-21 00:00:02'),(173,'58.100.157.230','中国浙江杭州江干','2016-12-14 21:56:28','2016-12-14 21:56:44'),(174,'211.138.116.152','中国浙江杭州萧山','2016-12-14 13:19:52','2016-12-14 13:19:52'),(175,'60.177.107.87','中国浙江杭州江干','2016-12-14 11:24:12','2016-12-14 15:43:01'),(176,'220.181.108.176','中国广东深圳None','2016-12-15 16:36:13','2016-12-15 16:36:13'),(177,'220.181.108.119','中国广东深圳None','2016-12-15 08:37:47','2016-12-15 08:37:47'),(178,'123.125.71.50','中国北京北京密云','2016-12-15 00:41:53','2016-12-31 00:00:01'),(179,'219.82.74.86','','2016-12-15 22:01:27','2016-12-15 22:45:14'),(180,'121.42.0.66','','2016-12-16 05:05:02','2016-12-16 05:05:02'),(181,'112.17.241.94','中国浙江杭州萧山','2016-12-16 10:54:11','2016-12-16 10:54:11'),(182,'113.108.10.17','中国广东深圳None','2016-12-16 22:33:05','2016-12-16 22:33:05'),(183,'220.181.108.99','中国广东深圳None','2016-12-16 16:38:30','2016-12-16 16:38:30'),(184,'58.100.157.187','中国浙江杭州江干','2016-12-16 21:30:11','2016-12-18 00:00:01'),(185,'123.125.71.54','中国北京北京密云','2016-12-16 08:32:30','2016-12-16 08:32:30'),(186,'171.116.0.76','中国山西太原杏花岭','2016-12-17 16:35:22','2016-12-17 16:35:22'),(187,'220.181.108.159','中国广东深圳None','2016-12-17 16:40:57','2016-12-17 16:40:57'),(188,'123.125.71.104','中国北京北京密云','2016-12-17 08:37:48','2016-12-17 08:37:48'),(189,'59.46.7.50','中国辽宁沈阳None','2016-12-17 00:48:51','2017-01-21 00:00:02'),(190,'121.42.0.57','中国浙江杭州淳安','2016-12-17 05:04:42','2016-12-17 05:04:43'),(191,'218.109.152.30','中国浙江杭州江干','2016-12-17 21:17:59','2016-12-19 00:00:01'),(192,'178.32.63.119','法国NoneNoneNone','2016-12-17 16:05:44','2016-12-17 16:05:44'),(193,'121.42.0.60','中国浙江杭州淳安','2016-12-17 05:04:42','2016-12-25 00:00:04'),(194,'180.175.53.192','中国上海上海松江','2016-12-17 00:36:12','2016-12-17 00:36:12'),(195,'223.71.143.235','中国北京北京西城','2016-12-18 01:15:28','2017-01-21 00:00:01'),(196,'123.150.186.35','中国天津天津宝坻','2016-12-18 01:11:03','2017-01-21 00:00:02'),(197,'220.181.108.110','','2016-12-18 00:36:01','2016-12-25 00:00:04'),(198,'123.125.71.69','中国北京北京密云','2016-12-19 18:23:03','2016-12-19 18:23:03'),(199,'202.108.43.172','中国北京北京海淀','2016-12-19 00:14:17','2016-12-19 00:14:17'),(200,'123.125.71.53','中国北京北京密云','2016-12-19 09:23:02','2016-12-19 09:23:02'),(201,'123.125.71.111','中国北京北京密云','2016-12-20 08:34:34','2016-12-20 08:34:34'),(202,'121.42.0.73','中国浙江杭州淳安','2016-12-20 04:59:29','2016-12-20 04:59:29'),(203,'123.125.71.115','中国北京北京密云','2016-12-20 00:41:59','2016-12-20 00:41:59'),(204,'183.157.53.14','中国浙江杭州江干','2016-12-20 09:22:16','2016-12-20 09:22:16'),(205,'123.150.189.148','中国天津天津宝坻','2016-12-20 02:09:57','2017-01-03 00:00:03'),(206,'115.198.110.165','中国浙江杭州江干','2016-12-20 16:06:33','2016-12-20 16:06:33'),(207,'220.181.108.160','中国广东深圳None','2016-12-20 20:02:07','2016-12-20 20:02:07'),(208,'222.161.223.155','中国吉林长春None','2016-12-20 01:21:08','2017-01-04 00:00:03'),(209,'123.125.71.94','中国北京北京密云','2016-12-21 16:59:39','2016-12-21 16:59:39'),(210,'123.125.71.113','','2016-12-21 03:25:29','2016-12-30 00:00:01'),(211,'218.109.153.232','中国浙江杭州江干','2016-12-21 19:56:37','2016-12-21 19:56:37'),(212,'220.181.108.81','','2016-12-21 08:35:57','2016-12-21 08:35:57'),(213,'119.188.98.9','中国山东济南None','2016-12-22 02:49:25','2016-12-22 02:49:25'),(214,'119.6.226.34','中国四川宜宾翠屏','2016-12-22 01:26:20','2016-12-31 00:00:01'),(215,'123.125.71.82','中国北京北京密云','2016-12-22 08:30:09','2016-12-22 08:30:09'),(216,'122.228.114.195','中国浙江温州None','2016-12-22 01:15:32','2017-01-21 00:00:02'),(217,'123.125.71.110','中国北京北京密云','2016-12-22 16:47:22','2016-12-22 16:47:22'),(218,'58.100.157.92','','2016-12-23 14:59:32','2016-12-26 00:00:01'),(219,'218.26.176.181','中国山西太原万柏','2016-12-23 10:24:49','2016-12-23 10:25:04'),(220,'139.209.91.221','','2016-12-23 01:38:01','2017-01-21 00:00:02'),(221,'220.181.108.185','中国广东深圳None','2016-12-23 08:31:01','2016-12-25 00:00:04'),(222,'123.125.71.60','中国北京北京密云','2016-12-23 00:40:55','2016-12-23 00:40:55'),(223,'112.21.182.14','','2016-12-24 01:22:53','2016-12-24 01:22:53'),(224,'223.71.143.237','中国北京北京西城','2016-12-24 01:52:28','2017-01-03 00:00:02'),(225,'103.47.136.17','中国上海上海闸北','2016-12-24 01:28:59','2017-01-21 00:00:02'),(226,'112.21.182.14','中国江苏常州None','2016-12-25 01:33:51','2016-12-25 01:33:51'),(227,'14.29.87.58','中国广东广州None','2016-12-25 01:20:14','2016-12-31 00:00:01'),(228,'183.157.34.103','中国浙江杭州江干','2016-12-26 15:29:53','2016-12-30 00:00:01'),(229,'42.236.123.152','中国河南郑州None','2016-12-26 01:30:02','2017-01-21 00:00:02'),(230,'123.125.71.101','中国北京北京密云','2016-12-26 17:15:42','2016-12-26 17:15:42'),(231,'220.181.108.156','中国广东深圳None','2016-12-26 11:15:46','2016-12-26 11:15:46'),(232,'123.125.71.17','中国北京北京密云','2016-12-26 14:15:43','2016-12-26 14:15:43'),(233,'220.181.108.114','中国广东深圳None','2016-12-26 00:13:21','2016-12-29 00:00:01'),(234,'123.125.71.73','','2016-12-26 05:15:46','2016-12-26 05:15:46'),(235,'123.125.71.43','中国北京北京密云','2016-12-27 23:15:46','2016-12-27 23:15:46'),(236,'220.181.108.82','中国广东深圳None','2016-12-27 08:31:39','2016-12-27 08:31:39'),(237,'119.6.226.36','中国四川宜宾翠屏','2016-12-28 01:47:21','2017-01-21 00:00:02'),(238,'220.181.108.178','中国广东深圳None','2016-12-29 00:38:04','2017-01-01 00:00:04'),(239,'220.181.108.106','','2016-12-29 08:35:52','2016-12-29 08:35:52'),(240,'123.125.71.100','','2016-12-30 00:39:34','2016-12-30 00:39:34'),(241,'220.181.108.172','中国广东深圳None','2016-12-30 08:35:55','2016-12-30 08:35:55'),(242,'119.6.226.37','中国四川宜宾翠屏','2016-12-30 01:41:18','2017-01-21 00:00:02'),(243,'58.100.156.6','','2016-12-31 22:10:59','2016-12-31 22:10:59'),(244,'220.181.108.76','中国广东深圳None','2016-12-31 16:32:24','2016-12-31 16:32:24'),(245,'220.170.181.35','中国湖南株洲醴陵','2017-01-02 01:45:30','2017-01-21 00:00:02'),(246,'112.21.182.26','中国江苏常州None','2017-01-02 05:12:59','2017-01-02 05:12:59'),(247,'220.181.108.145','中国广东深圳None','2017-01-02 16:39:52','2017-01-02 16:39:52'),(248,'42.236.123.151','中国河南郑州None','2017-01-02 03:21:13','2017-01-02 03:21:13'),(249,'111.0.12.246','中国浙江杭州拱墅','2017-01-02 15:12:28','2017-01-02 15:12:47'),(250,'220.181.108.174','中国广东深圳None','2017-01-02 00:28:37','2017-01-02 00:28:37'),(251,'58.101.116.233','中国浙江杭州江干','2017-01-03 08:51:26','2017-01-03 08:51:47'),(252,'220.181.108.181','','2017-01-03 16:48:41','2017-01-03 16:48:41'),(253,'123.125.71.45','中国北京北京密云','2017-01-03 08:29:59','2017-01-03 08:29:59'),(254,'120.76.131.230','浙江省杭州市 阿里云BGP数据中心','2017-01-19 21:58:35','2017-01-21 00:00:02'),(255,'183.184.250.38','','2017-01-19 19:58:19','2017-01-21 00:00:02'),(256,'112.21.182.14','中国华东江苏省常州市移动','2017-01-20 00:57:40','2017-01-20 00:57:40'),(257,'123.150.186.37','中国华北天津市天津市电信','2017-01-20 00:17:29','2017-01-20 01:13:56'),(258,'183.185.121.4','中国华北山西省太原市联通','2017-01-20 23:08:31','2017-01-20 23:56:49'),(259,'221.205.134.185','中国华北山西省太原市联通','2017-01-20 11:15:21','2017-01-20 22:15:02');

/*Data for the table `sj_leavemessages` */

insert  into `sj_leavemessages`(`M_ID`,`M_U_ID`,`M_REPLY_ID`,`M_A_ID`,`M_COMMENTS`,`M_PUBLISHDATE`,`M_MESSAGE_TYPE`,`M_VERIFYSTATE`,`M_IPADDRESS`,`M_DEVICEINFO`,`M_SYSTEMINFO`,`M_PRAISE_COUNT`) values (3,1,NULL,10,'我是博主。占个沙发～','2016-09-17 17:18:00',1,1,'58.101.56.99','Chrome 50','Mac',14),(4,8,NULL,10,'13213213213','2016-09-19 17:30:27',1,1,'171.117.99.206','Chrome 46','Microsoft Windows 10',5),(5,8,NULL,8,'【表情】','2016-09-19 17:34:28',1,1,'171.117.99.206','Chrome 46','Microsoft Windows 10',1),(6,1,NULL,8,'呵呵','2016-09-19 17:49:55',1,1,'171.117.99.206','Chrome 46','Microsoft Windows 10',NULL),(7,1,NULL,14,'扯淡吧！','2016-10-02 11:15:15',1,2,'171.118.174.62','Chrome 50','Mac',NULL),(9,1,NULL,14,'fighting!','2016-10-02 11:23:52',1,1,'171.118.174.62','Chrome 50','Mac',13),(10,1,NULL,10,'这篇文章写的真不错！顶一个！','2016-10-20 20:49:17',1,1,'58.100.183.219','NOKIA RM-940_nam_att_200','WindowsPhone',1),(11,2,NULL,14,'加油！生活还要继续，没有理由妥协','2016-10-20 20:50:37',1,1,'58.100.183.219','NOKIA RM-940_nam_att_200','WindowsPhone',4),(13,2,NULL,10,'不错不错，很好的一篇AngularJS入门教程，分析得很透彻很明了。','2016-10-21 08:01:20',1,1,'58.100.183.219','NOKIA RM-940_nam_att_200','WindowsPhone',2),(14,2,NULL,10,'网站做得的一般，有时候会登录不上。服务器网速有点慢啊，加载速度好慢。','2016-10-22 08:08:49',1,1,'58.101.39.209','NOKIA RM-845_nam_vzw_100','WindowsPhone',2),(15,2,NULL,1,'说的好的部队部队和打击盗版盗版','2016-10-22 13:31:50',1,2,'58.101.39.209','NOKIA RM-940_nam_att_200','WindowsPhone',0),(16,1,NULL,10,'这篇文章写得真不错！感谢博主~','2016-10-22 18:36:33',1,1,'58.101.39.209','LENOVO_MT_20EH_BU_Think_FM_ThinkPad E450c','WINDOWS',3),(17,2,NULL,14,'可以可以，写的不错，发自肺腑的！','2016-10-26 10:31:03',1,1,'183.157.50.197','LENOVO_MT_20EH_BU_Think_FM_ThinkPad E450c','WINDOWS',2),(18,9,NULL,14,'可以的','2016-10-28 16:20:06',1,1,'60.186.197.2','Chrome 37','Linux',4),(19,1,NULL,16,'这篇文章写得太好了！正好解决我燃眉之急，最近也在做微信开发，返回的XML数据正愁不知道怎么用jQuery解析呢！太感谢了！！！','2016-10-31 15:56:31',1,1,'115.205.240.216','LENOVO_MT_20EH_BU_Think_FM_ThinkPad E450c','WINDOWS',11),(20,2,NULL,4,'机会好好补补vv不谢谢顶顶顶顶顶顶顶顶','2016-11-13 00:58:34',1,2,'218.109.166.165','NOKIA RM-940_nam_att_200','WindowsPhone',0),(21,12,NULL,17,'好厉害啊啊','2016-11-23 16:07:40',1,1,'110.178.72.72','','Microsoft Windows 7',2),(22,12,NULL,17,'好棒','2016-11-23 16:08:36',1,1,'110.178.72.72','','Microsoft Windows 7',2),(23,2,NULL,27,'嗯，很生动形象的描述。','2016-12-06 21:59:36',1,2,'58.100.156.40','NOKIA RM-940_nam_att_200','WindowsPhone',0),(24,12,NULL,14,'厉害了晶晶','2016-12-07 16:04:24',1,1,'110.178.85.129','','Microsoft Windows 7',5);

/*Data for the table `sj_life` */

insert  into `sj_life`(`L_ID`,`L_U_ID`,`L_CONTENTS`,`L_PUBLISHDATE`,`L_MODIFYDATE`,`L_IPADDRESS`,`L_DEVICEINFO`,`L_SYSTEMINFO`) values (11,1,'今天和几个逗逼们聚餐，好开心！算是磨难后的减压吧！','2016-09-25 14:55:22',NULL,'120.76.131.230','Safari 6','iPhone'),(12,1,'时隔一月，重新上线 UWP App同步开发中，1.0版本即将上线，敬请期待 Official Site：https://www.stevejrong.top','2016-09-30 22:11:12','2016-10-03 00:07:07','120.76.131.230','Internet Explorer 11','HTC 8X'),(13,1,'ShangHai，deeping love with you！','2016-09-30 22:15:12','2016-10-03 00:07:30','120.76.131.230','Internet Explorer 11','HTC 8X'),(14,1,'杭州也刮沙尘暴还是地段太偏了','2016-09-30 22:16:54','2016-10-03 00:08:11','120.76.131.230','Internet Explorer 11','HTC 8X'),(15,1,'無','2016-09-30 22:18:21','2016-10-03 00:08:38','120.76.131.230','Internet Explorer 11','HTC 8X'),(16,1,'Ready Go杭州','2016-09-30 22:19:39','2016-10-03 00:09:06','120.76.131.230','Internet Explorer 11','HTC 8X'),(17,1,'发版成功！','2016-10-10 20:29:48',NULL,'58.100.182.93','Safari an unknown version','iPhone'),(18,1,'倒计时：24天。','2016-12-06 22:04:12',NULL,'58.100.156.40','undefined undefined','Unknown');

/*Data for the table `sj_users` */

insert  into `sj_users`(`U_ID`,`U_NICKNAME`,`U_GENDER`,`U_ROLE`,`U_AGE`,`U_PWD`,`U_SECURITYQUESTIONANSWER`,`U_HEADER`,`U_STATE`,`U_LEVEL`,`U_CREATETIME`,`U_LASTLOGONTIME`,`U_EMAIL`,`U_QQNUM`,`U_PROVINCEANDCITY`) values (1,'Steve Jrong','男','系统管理员',21,'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3','王日早','resources/upload/users_header/7d192918-b000-47c6-ae20-b342a025d65a.jpg','正常',1,'2015-02-17 13:04:05','2017-01-20 14:12:54','1554052208@qq.com',1554052208,'山西省太原市'),(2,'张三','男','普通用户',25,'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3','Father',NULL,'正常',1,'2016-03-26 20:33:21','2017-01-18 23:17:04','123@qq.com',123123123,'枣庄'),(7,'手机注册测试','男','普通用户',30,'1eed84337f74056ad99d7e7c61461473c338bcdd02f196c5d1f5e1f590104612','王文幸',NULL,'正常',1,'2016-05-30 19:57:09',NULL,'1554052208@qq.com',1554052208,'浙江省杭州市江干区'),(8,'侯文静','女','普通用户',23,'96cae35ce8a9b0244178bf28e4966c2ce1b8385723a96a6b838858cdd6ca0a1e','123',NULL,'正常',1,'2016-09-19 17:22:55',NULL,'1339384071@qq.com',1339384071,'山西省太原市'),(9,'导演家媳妇','女','普通用户',19,'d5c00120173c7dc65d068850b2eb29fec75a1e6f19f118b3ae26e3b6122a3d2a','123123',NULL,'正常',1,'2016-10-28 16:19:05','2016-10-28 16:19:48','9834544345@qq.com',983544345,'中国浙江杭州拱墅'),(10,'MI','女','普通用户',19,'e049866004dd9a68f7fe7f381b8af38fd5edbd3b234425cdffa8539a386fe037','BB',NULL,'正常',1,'2016-11-06 02:13:51',NULL,'malilianj@yahoo.com',1843227117,'浙江省杭州市江干区'),(12,'炫酷仔','女','普通用户',20,'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3','哥哥','resources/upload/users_header/889d92f7-d0c5-40b7-ac12-b1717d68997f.jpg','正常',1,'2016-11-23 16:06:20','2016-12-12 11:19:36','1113630905@qq.om',1113630905,'中国山西太原万柏'),(14,'interview','男','面试官',20,'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3','default','resources/assets/img/default_header.png','正常',1,'2017-01-20 00:00:00','2017-01-20 23:13:50','interview@corp.com',123456789,NULL);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;